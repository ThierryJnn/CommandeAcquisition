
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800cf78  0800cf78  0001cf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d540  0800d540  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800d540  0800d540  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d548  0800d548  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d548  0800d548  0001d548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d54c  0800d54c  0001d54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800d550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000250  0800d7a0  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800d7a0  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e26d  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f1a  00000000  00000000  0003e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  00042450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001175  00000000  00000000  00043b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b069  00000000  00000000  00044c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e146  00000000  00000000  0006fce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001146e2  00000000  00000000  0008de2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072b8  00000000  00000000  001a2510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001a97c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf5c 	.word	0x0800cf5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	0800cf5c 	.word	0x0800cf5c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fa7c 	bl	800a42a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f9e:	f001 fd65 	bl	8002a6c <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fa8:	f000 fb5a 	bl	8001660 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000fb8:	f002 fe30 	bl	8003c1c <HAL_ADCEx_MultiModeConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fc2:	f000 fb4d 	bl	8001660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_ADC1_Init+0xec>)
 8000fc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd2:	237f      	movs	r3, #127	; 0x7f
 8000fd4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000fe4:	f002 f982 	bl	80032ec <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fee:	f000 fb37 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	3730      	adds	r7, #48	; 0x30
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000026c 	.word	0x2000026c
 8001000:	21800100 	.word	0x21800100

08001004 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fa0a 	bl	800a42a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001018:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <MX_ADC2_Init+0xc4>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800101e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001022:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800103e:	2204      	movs	r2, #4
 8001040:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001080:	f001 fcf4 	bl	8002a6c <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800108a:	f000 fae9 	bl	8001660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC2_Init+0xc8>)
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001092:	2306      	movs	r3, #6
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109a:	237f      	movs	r3, #127	; 0x7f
 800109c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109e:	2304      	movs	r3, #4
 80010a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_ADC2_Init+0xc0>)
 80010ac:	f002 f91e 	bl	80032ec <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80010b6:	f000 fad3 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200002d8 	.word	0x200002d8
 80010c8:	50000100 	.word	0x50000100
 80010cc:	19200040 	.word	0x19200040

080010d0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a4      	sub	sp, #144	; 0x90
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 f99a 	bl	800a42a <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	f040 80a9 	bne.w	8001254 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001108:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	4618      	mov	r0, r3
 8001114:	f004 f9bc 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800111e:	f000 fa9f 	bl	8001660 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001122:	4b82      	ldr	r3, [pc, #520]	; (800132c <HAL_ADC_MspInit+0x25c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a80      	ldr	r2, [pc, #512]	; (800132c <HAL_ADC_MspInit+0x25c>)
 800112a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800112c:	4b7f      	ldr	r3, [pc, #508]	; (800132c <HAL_ADC_MspInit+0x25c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d10b      	bne.n	800114c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001134:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	4a7d      	ldr	r2, [pc, #500]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800113a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001140:	4b7b      	ldr	r3, [pc, #492]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b78      	ldr	r3, [pc, #480]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a77      	ldr	r2, [pc, #476]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b75      	ldr	r3, [pc, #468]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	623b      	str	r3, [r7, #32]
 8001162:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b72      	ldr	r3, [pc, #456]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a71      	ldr	r2, [pc, #452]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b6c      	ldr	r3, [pc, #432]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a6b      	ldr	r2, [pc, #428]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001194:	2304      	movs	r3, #4
 8001196:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4862      	ldr	r0, [pc, #392]	; (8001334 <HAL_ADC_MspInit+0x264>)
 80011ac:	f003 f998 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80011b0:	2302      	movs	r3, #2
 80011b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f003 f989 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 80011ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80011d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4854      	ldr	r0, [pc, #336]	; (8001338 <HAL_ADC_MspInit+0x268>)
 80011e8:	f003 f97a 	bl	80044e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_ADC_MspInit+0x26c>)
 80011ee:	4a54      	ldr	r2, [pc, #336]	; (8001340 <HAL_ADC_MspInit+0x270>)
 80011f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <HAL_ADC_MspInit+0x26c>)
 80011f4:	2205      	movs	r2, #5
 80011f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_ADC_MspInit+0x26c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <HAL_ADC_MspInit+0x26c>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_ADC_MspInit+0x26c>)
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <HAL_ADC_MspInit+0x26c>)
 800120c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001210:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_ADC_MspInit+0x26c>)
 8001214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001218:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <HAL_ADC_MspInit+0x26c>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_ADC_MspInit+0x26c>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001226:	4845      	ldr	r0, [pc, #276]	; (800133c <HAL_ADC_MspInit+0x26c>)
 8001228:	f002 fee0 	bl	8003fec <HAL_DMA_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 8001232:	f000 fa15 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a40      	ldr	r2, [pc, #256]	; (800133c <HAL_ADC_MspInit+0x26c>)
 800123a:	655a      	str	r2, [r3, #84]	; 0x54
 800123c:	4a3f      	ldr	r2, [pc, #252]	; (800133c <HAL_ADC_MspInit+0x26c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2012      	movs	r0, #18
 8001248:	f002 fea8 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800124c:	2012      	movs	r0, #18
 800124e:	f002 febf 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001252:	e066      	b.n	8001322 <HAL_ADC_MspInit+0x252>
  else if(adcHandle->Instance==ADC2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <HAL_ADC_MspInit+0x274>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d161      	bne.n	8001322 <HAL_ADC_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800125e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001264:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001268:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f90e 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800127a:	f000 f9f1 	bl	8001660 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_ADC_MspInit+0x25c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <HAL_ADC_MspInit+0x25c>)
 8001286:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_ADC_MspInit+0x25c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10b      	bne.n	80012a8 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <HAL_ADC_MspInit+0x260>)
 8001296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_ADC_MspInit+0x260>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_ADC_MspInit+0x260>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_ADC_MspInit+0x260>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_ADC_MspInit+0x260>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_ADC_MspInit+0x260>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <HAL_ADC_MspInit+0x260>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_ADC_MspInit+0x260>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80012d8:	230b      	movs	r3, #11
 80012da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <HAL_ADC_MspInit+0x264>)
 80012f0:	f003 f8f6 	bl	80044e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80012f4:	2301      	movs	r3, #1
 80012f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f003 f8e7 	bl	80044e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2012      	movs	r0, #18
 8001318:	f002 fe40 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800131c:	2012      	movs	r0, #18
 800131e:	f002 fe57 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3790      	adds	r7, #144	; 0x90
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200003a4 	.word	0x200003a4
 8001330:	40021000 	.word	0x40021000
 8001334:	48000800 	.word	0x48000800
 8001338:	48000400 	.word	0x48000400
 800133c:	20000344 	.word	0x20000344
 8001340:	40020008 	.word	0x40020008
 8001344:	50000100 	.word	0x50000100

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_DMA_Init+0x50>)
 8001350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <MX_DMA_Init+0x50>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6493      	str	r3, [r2, #72]	; 0x48
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_DMA_Init+0x50>)
 800135c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_DMA_Init+0x50>)
 8001368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <MX_DMA_Init+0x50>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6493      	str	r3, [r2, #72]	; 0x48
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_DMA_Init+0x50>)
 8001374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	200b      	movs	r0, #11
 8001384:	f002 fe0a 	bl	8003f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001388:	200b      	movs	r0, #11
 800138a:	f002 fe21 	bl	8003fd0 <HAL_NVIC_EnableIRQ>

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a38      	ldr	r2, [pc, #224]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <MX_GPIO_Init+0x114>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a2c      	ldr	r2, [pc, #176]	; (80014b0 <MX_GPIO_Init+0x114>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <MX_GPIO_Init+0x114>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <MX_GPIO_Init+0x114>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <MX_GPIO_Init+0x114>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <MX_GPIO_Init+0x114>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2120      	movs	r1, #32
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f003 f9d7 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2104      	movs	r1, #4
 800143a:	481e      	ldr	r0, [pc, #120]	; (80014b4 <MX_GPIO_Init+0x118>)
 800143c:	f003 f9d2 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_GPIO_Init+0x11c>)
 8001458:	f003 f842 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800145c:	2320      	movs	r3, #32
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f003 f833 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800147a:	2304      	movs	r3, #4
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_GPIO_Init+0x118>)
 8001492:	f003 f825 	bl	80044e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2028      	movs	r0, #40	; 0x28
 800149c:	f002 fd7e 	bl	8003f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a0:	2028      	movs	r0, #40	; 0x28
 80014a2:	f002 fd95 	bl	8003fd0 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000c00 	.word	0x48000c00
 80014b8:	48000800 	.word	0x48000800

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f001 f85f 	bl	8002582 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f854 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff68 	bl	800139c <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f7ff ff3c 	bl	8001348 <MX_DMA_Init>
  MX_ADC2_Init();
 80014d0:	f7ff fd98 	bl	8001004 <MX_ADC2_Init>
  MX_ADC1_Init();
 80014d4:	f7ff fd1e 	bl	8000f14 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014d8:	f000 fcd0 	bl	8001e7c <MX_TIM1_Init>
  MX_TIM3_Init();
 80014dc:	f000 fd9c 	bl	8002018 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014e0:	f000 feee 	bl	80022c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014e4:	f000 ff38 	bl	8002358 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, started, strlen(started), HAL_MAX_DELAY);
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	2230      	movs	r2, #48	; 0x30
 80014ee:	4919      	ldr	r1, [pc, #100]	; (8001554 <main+0x98>)
 80014f0:	4819      	ldr	r0, [pc, #100]	; (8001558 <main+0x9c>)
 80014f2:	f006 f9b9 	bl	8007868 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	4918      	ldr	r1, [pc, #96]	; (800155c <main+0xa0>)
 80014fa:	4817      	ldr	r0, [pc, #92]	; (8001558 <main+0x9c>)
 80014fc:	f006 fa4a 	bl	8007994 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(it_uart2){
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <main+0xa4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0fb      	beq.n	8001500 <main+0x44>
		  if(uartRxBuffer[0]==ENTER){
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <main+0xa0>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b0d      	cmp	r3, #13
 800150e:	d112      	bne.n	8001536 <main+0x7a>
			  HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	2202      	movs	r2, #2
 8001516:	4913      	ldr	r1, [pc, #76]	; (8001564 <main+0xa8>)
 8001518:	480f      	ldr	r0, [pc, #60]	; (8001558 <main+0x9c>)
 800151a:	f006 f9a5 	bl	8007868 <HAL_UART_Transmit>
			  processCommand(command); // Traitez la commande
 800151e:	4812      	ldr	r0, [pc, #72]	; (8001568 <main+0xac>)
 8001520:	f000 f8f0 	bl	8001704 <processCommand>
			  memset(command, 0, sizeof(command)); // Réinitialisez le tableau
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <main+0xac>)
 800152a:	f008 ff7e 	bl	800a42a <memset>
			  idx=0;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <main+0xb0>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e00a      	b.n	800154c <main+0x90>
		  }
		  else{
			  command[idx++]=uartRxBuffer[0];
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <main+0xb0>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <main+0xb0>)
 8001540:	7011      	strb	r1, [r2, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <main+0xa0>)
 8001546:	7819      	ldrb	r1, [r3, #0]
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <main+0xac>)
 800154a:	5499      	strb	r1, [r3, r2]
		  }
		  it_uart2 = 0;
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <main+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	  if(it_uart2){
 8001552:	e7d5      	b.n	8001500 <main+0x44>
 8001554:	0800d144 	.word	0x0800d144
 8001558:	200004bc 	.word	0x200004bc
 800155c:	200003a8 	.word	0x200003a8
 8001560:	200003a9 	.word	0x200003a9
 8001564:	0800cf78 	.word	0x0800cf78
 8001568:	200003ac 	.word	0x200003ac
 800156c:	200003cc 	.word	0x200003cc

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	; 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2238      	movs	r2, #56	; 0x38
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f008 ff53 	bl	800a42a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001592:	2000      	movs	r0, #0
 8001594:	f003 f962 	bl	800485c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	2303      	movs	r3, #3
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015aa:	2306      	movs	r3, #6
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015ae:	2355      	movs	r3, #85	; 0x55
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f9fe 	bl	80049c4 <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ce:	f000 f847 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2303      	movs	r3, #3
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2104      	movs	r1, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fd02 	bl	8004ff4 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015f6:	f000 f833 	bl	8001660 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	; 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100);
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2201      	movs	r2, #1
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <HAL_UART_RxCpltCallback+0x2c>)
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <HAL_UART_RxCpltCallback+0x30>)
 8001614:	f006 f928 	bl	8007868 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8001618:	2201      	movs	r2, #1
 800161a:	4905      	ldr	r1, [pc, #20]	; (8001630 <HAL_UART_RxCpltCallback+0x2c>)
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_UART_RxCpltCallback+0x30>)
 800161e:	f006 f9b9 	bl	8007994 <HAL_UART_Receive_IT>
	it_uart2 = 1;
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_UART_RxCpltCallback+0x34>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003a8 	.word	0x200003a8
 8001634:	200004bc 	.word	0x200004bc
 8001638:	200003a9 	.word	0x200003a9

0800163c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800164e:	f000 ffb1 	bl	80025b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40001000 	.word	0x40001000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <pinout>:
    {"PA1", "GPIO", "OUT"},
    // Ajoutez d'autres broches et leurs informations ici
};


void pinout() {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b09d      	sub	sp, #116	; 0x74
 8001670:	af02      	add	r7, sp, #8
    HAL_UART_Transmit(&huart2, "Pinout:\r\n", strlen("Pinout:\r\n"), HAL_MAX_DELAY);
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	2209      	movs	r2, #9
 8001678:	491e      	ldr	r1, [pc, #120]	; (80016f4 <pinout+0x88>)
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <pinout+0x8c>)
 800167c:	f006 f8f4 	bl	8007868 <HAL_UART_Transmit>

    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 8001680:	2300      	movs	r3, #0
 8001682:	667b      	str	r3, [r7, #100]	; 0x64
 8001684:	e02e      	b.n	80016e4 <pinout+0x78>
        char message[100];
        snprintf(message, sizeof(message), "Pin %s: Function - %s, State - %s\r\n", pins[i].name, pins[i].function, pins[i].state);
 8001686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <pinout+0x90>)
 8001692:	189c      	adds	r4, r3, r2
 8001694:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001696:	4613      	mov	r3, r2
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	3310      	adds	r3, #16
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <pinout+0x90>)
 80016a2:	4413      	add	r3, r2
 80016a4:	1d19      	adds	r1, r3, #4
 80016a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016a8:	4613      	mov	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3328      	adds	r3, #40	; 0x28
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <pinout+0x90>)
 80016b4:	4413      	add	r3, r2
 80016b6:	4638      	mov	r0, r7
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9100      	str	r1, [sp, #0]
 80016bc:	4623      	mov	r3, r4
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <pinout+0x94>)
 80016c0:	2164      	movs	r1, #100	; 0x64
 80016c2:	f008 fe0d 	bl	800a2e0 <sniprintf>
        HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 80016c6:	463b      	mov	r3, r7
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fe09 	bl	80002e0 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4639      	mov	r1, r7
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <pinout+0x8c>)
 80016da:	f006 f8c5 	bl	8007868 <HAL_UART_Transmit>
    for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); i++) {
 80016de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e0:	3301      	adds	r3, #1
 80016e2:	667b      	str	r3, [r7, #100]	; 0x64
 80016e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d9cd      	bls.n	8001686 <pinout+0x1a>
    }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	376c      	adds	r7, #108	; 0x6c
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	0800cf7c 	.word	0x0800cf7c
 80016f8:	200004bc 	.word	0x200004bc
 80016fc:	20000000 	.word	0x20000000
 8001700:	0800cf88 	.word	0x0800cf88

08001704 <processCommand>:
#include "startMotor.h"
#include "stopMotor.h"

int Power=0;

void processCommand(char* command) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if (strcmp(command, "help") == 0) {
 800170c:	492e      	ldr	r1, [pc, #184]	; (80017c8 <processCommand+0xc4>)
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe fd86 	bl	8000220 <strcmp>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10e      	bne.n	8001738 <processCommand+0x34>
    // Affiche le message d'aide
    HAL_UART_Transmit(&huart2, "Commandes disponibles :\r\n", strlen("Commandes disponibles :\r\n"), HAL_MAX_DELAY);
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	2219      	movs	r2, #25
 8001720:	492a      	ldr	r1, [pc, #168]	; (80017cc <processCommand+0xc8>)
 8001722:	482b      	ldr	r0, [pc, #172]	; (80017d0 <processCommand+0xcc>)
 8001724:	f006 f8a0 	bl	8007868 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, " - help : Affiche ce message d'aide\r\n", strlen(" - help : Affiche ce message d'aide\r\n"), HAL_MAX_DELAY);
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2225      	movs	r2, #37	; 0x25
 800172e:	4929      	ldr	r1, [pc, #164]	; (80017d4 <processCommand+0xd0>)
 8001730:	4827      	ldr	r0, [pc, #156]	; (80017d0 <processCommand+0xcc>)
 8001732:	f006 f899 	bl	8007868 <HAL_UART_Transmit>
    // Ajoutez d'autres commandes et leurs descriptions ici
    return 0;
 8001736:	e044      	b.n	80017c2 <processCommand+0xbe>
  }
  if (strcmp(command, "pinout") == 0) {
 8001738:	4927      	ldr	r1, [pc, #156]	; (80017d8 <processCommand+0xd4>)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe fd70 	bl	8000220 <strcmp>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <processCommand+0x48>
	  pinout(); // Appeler la fonction pinout
 8001746:	f7ff ff91 	bl	800166c <pinout>
	  return 0;
 800174a:	e03a      	b.n	80017c2 <processCommand+0xbe>
  }
  if (strcmp(command, "start") == 0) {
 800174c:	4923      	ldr	r1, [pc, #140]	; (80017dc <processCommand+0xd8>)
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fd66 	bl	8000220 <strcmp>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <processCommand+0x5c>
	  startMotor(); // Appeler la fonction startMotor
 800175a:	f000 f923 	bl	80019a4 <startMotor>
	  return 0;
 800175e:	e030      	b.n	80017c2 <processCommand+0xbe>
  }
  if (strcmp(command, "stop") == 0) {
 8001760:	491f      	ldr	r1, [pc, #124]	; (80017e0 <processCommand+0xdc>)
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe fd5c 	bl	8000220 <strcmp>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <processCommand+0x70>
	  stopMotor(); // Appeler la fonction stopMotor
 800176e:	f000 fa6f 	bl	8001c50 <stopMotor>
	  return 0;
 8001772:	e026      	b.n	80017c2 <processCommand+0xbe>
    }
  if (strncmp(command, "speed", 5) == 0) {
 8001774:	2205      	movs	r2, #5
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <processCommand+0xe0>)
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f008 fe5e 	bl	800a43a <strncmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d117      	bne.n	80017b4 <processCommand+0xb0>
              // Extrait les quatre chiffres suivant "speed"
              int digit;
              if (sscanf(command + 5, "%d", &digit) == 1) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3305      	adds	r3, #5
 8001788:	f107 020c 	add.w	r2, r7, #12
 800178c:	4916      	ldr	r1, [pc, #88]	; (80017e8 <processCommand+0xe4>)
 800178e:	4618      	mov	r0, r3
 8001790:	f008 fdda 	bl	800a348 <siscanf>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d104      	bne.n	80017a4 <processCommand+0xa0>
                  speed(digit);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f829 	bl	80017f4 <speed>
 80017a2:	e00e      	b.n	80017c2 <processCommand+0xbe>
              } else {
                  HAL_UART_Transmit(&huart2, "Format incorrect. Utilisation : speed <chiffre1><chiffre2><chiffre3><chiffre4>\r\n", strlen("Format incorrect. Utilisation : speed <chiffre1><chiffre2><chiffre3><chiffre4>\r\n"), HAL_MAX_DELAY);
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	2250      	movs	r2, #80	; 0x50
 80017aa:	4910      	ldr	r1, [pc, #64]	; (80017ec <processCommand+0xe8>)
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <processCommand+0xcc>)
 80017ae:	f006 f85b 	bl	8007868 <HAL_UART_Transmit>
 80017b2:	e006      	b.n	80017c2 <processCommand+0xbe>
              }
  }
  else {
	  HAL_UART_Transmit(&huart2, "Command not found\r\n", strlen("Command not found\r\n"), HAL_MAX_DELAY);
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	2213      	movs	r2, #19
 80017ba:	490d      	ldr	r1, [pc, #52]	; (80017f0 <processCommand+0xec>)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <processCommand+0xcc>)
 80017be:	f006 f853 	bl	8007868 <HAL_UART_Transmit>
  }
  // Ajoutez d'autres conditions pour d'autres commandes si nécessaire
}
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0800cfac 	.word	0x0800cfac
 80017cc:	0800cfb4 	.word	0x0800cfb4
 80017d0:	200004bc 	.word	0x200004bc
 80017d4:	0800cfd0 	.word	0x0800cfd0
 80017d8:	0800cff8 	.word	0x0800cff8
 80017dc:	0800d000 	.word	0x0800d000
 80017e0:	0800d008 	.word	0x0800d008
 80017e4:	0800d010 	.word	0x0800d010
 80017e8:	0800d018 	.word	0x0800d018
 80017ec:	0800d01c 	.word	0x0800d01c
 80017f0:	0800d070 	.word	0x0800d070

080017f4 <speed>:
#include "gpio.h"
#include "string.h"

extern int Power;
int vit=512;
void speed(int digit) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	; 0x38
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	int oldspeed=vit;
 80017fc:	4b60      	ldr	r3, [pc, #384]	; (8001980 <speed+0x18c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
	int i=0;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
	char message[30];
	if (Power==0){
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <speed+0x190>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <speed+0x2a>
		HAL_UART_Transmit(&huart2, "Moteur éteint\r\n", strlen("Moteur éteint\r\n"), HAL_MAX_DELAY);
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	2210      	movs	r2, #16
 8001814:	495c      	ldr	r1, [pc, #368]	; (8001988 <speed+0x194>)
 8001816:	485d      	ldr	r0, [pc, #372]	; (800198c <speed+0x198>)
 8001818:	f006 f826 	bl	8007868 <HAL_UART_Transmit>
 800181c:	e0ac      	b.n	8001978 <speed+0x184>
		return 0;
	}

    vit = digit;
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <speed+0x18c>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
    if (vit>1024) {
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <speed+0x18c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182c:	dd0a      	ble.n	8001844 <speed+0x50>
    	vit=1024;
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <speed+0x18c>)
 8001830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001834:	601a      	str	r2, [r3, #0]
    	HAL_UART_Transmit(&huart2, "Vitesse abaissée au max: 1023\r\n", strlen("Vitesse abaissée au max: 1023\r\n"), HAL_MAX_DELAY);
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	2220      	movs	r2, #32
 800183c:	4954      	ldr	r1, [pc, #336]	; (8001990 <speed+0x19c>)
 800183e:	4853      	ldr	r0, [pc, #332]	; (800198c <speed+0x198>)
 8001840:	f006 f812 	bl	8007868 <HAL_UART_Transmit>
    }
    if(oldspeed<vit){
 8001844:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <speed+0x18c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800184a:	429a      	cmp	r2, r3
 800184c:	da2c      	bge.n	80018a8 <speed+0xb4>
    	for(i=oldspeed;i<vit;i=i+1){
 800184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
 8001852:	e024      	b.n	800189e <speed+0xaa>
    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1024-i);
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <speed+0x1a0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,i);
 8001860:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <speed+0x1a0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001866:	639a      	str	r2, [r3, #56]	; 0x38
    		snprintf(message, sizeof(message), "i: %d \r\n", i);
 8001868:	f107 000c 	add.w	r0, r7, #12
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <speed+0x1a4>)
 8001870:	211e      	movs	r1, #30
 8001872:	f008 fd35 	bl	800a2e0 <sniprintf>
    		HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fd30 	bl	80002e0 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	f107 010c 	add.w	r1, r7, #12
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	483f      	ldr	r0, [pc, #252]	; (800198c <speed+0x198>)
 800188e:	f005 ffeb 	bl	8007868 <HAL_UART_Transmit>
    		HAL_Delay(20);
 8001892:	2014      	movs	r0, #20
 8001894:	f000 feac 	bl	80025f0 <HAL_Delay>
    	for(i=oldspeed;i<vit;i=i+1){
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	3301      	adds	r3, #1
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <speed+0x18c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbd5      	blt.n	8001854 <speed+0x60>
    	}
    }
    if(oldspeed>vit){
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <speed+0x18c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dd2c      	ble.n	800190c <speed+0x118>
    	for(i=oldspeed;i>vit;i=i-1){
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
 80018b6:	e024      	b.n	8001902 <speed+0x10e>
    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1024-i);
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <speed+0x1a0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,i);
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <speed+0x1a0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38
    		snprintf(message, sizeof(message), "i: %d \r\n", i);
 80018cc:	f107 000c 	add.w	r0, r7, #12
 80018d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d2:	4a31      	ldr	r2, [pc, #196]	; (8001998 <speed+0x1a4>)
 80018d4:	211e      	movs	r1, #30
 80018d6:	f008 fd03 	bl	800a2e0 <sniprintf>
    		HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fcfe 	bl	80002e0 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	4826      	ldr	r0, [pc, #152]	; (800198c <speed+0x198>)
 80018f2:	f005 ffb9 	bl	8007868 <HAL_UART_Transmit>
    		HAL_Delay(20);
 80018f6:	2014      	movs	r0, #20
 80018f8:	f000 fe7a 	bl	80025f0 <HAL_Delay>
    	for(i=oldspeed;i>vit;i=i-1){
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	3b01      	subs	r3, #1
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <speed+0x18c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001908:	429a      	cmp	r2, r3
 800190a:	dcd5      	bgt.n	80018b8 <speed+0xc4>
    	}
    }
    int rapcycl= vit*100/1024;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <speed+0x18c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2264      	movs	r2, #100	; 0x64
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	da01      	bge.n	800191e <speed+0x12a>
 800191a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800191e:	129b      	asrs	r3, r3, #10
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    snprintf(message, sizeof(message), "Speed: %d \r\n", vit);
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <speed+0x18c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f107 000c 	add.w	r0, r7, #12
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <speed+0x1a8>)
 800192c:	211e      	movs	r1, #30
 800192e:	f008 fcd7 	bl	800a2e0 <sniprintf>
    HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fcd2 	bl	80002e0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f107 010c 	add.w	r1, r7, #12
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <speed+0x198>)
 800194a:	f005 ff8d 	bl	8007868 <HAL_UART_Transmit>
    snprintf(message, sizeof(message), "Rapport cyclique: %d \r\n", rapcycl);
 800194e:	f107 000c 	add.w	r0, r7, #12
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <speed+0x1ac>)
 8001956:	211e      	movs	r1, #30
 8001958:	f008 fcc2 	bl	800a2e0 <sniprintf>
    HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fcbd 	bl	80002e0 <strlen>
 8001966:	4603      	mov	r3, r0
 8001968:	b29a      	uxth	r2, r3
 800196a:	f107 010c 	add.w	r1, r7, #12
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <speed+0x198>)
 8001974:	f005 ff78 	bl	8007868 <HAL_UART_Transmit>
}
 8001978:	3738      	adds	r7, #56	; 0x38
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000078 	.word	0x20000078
 8001984:	200003d0 	.word	0x200003d0
 8001988:	0800d084 	.word	0x0800d084
 800198c:	200004bc 	.word	0x200004bc
 8001990:	0800d098 	.word	0x0800d098
 8001994:	20000424 	.word	0x20000424
 8001998:	0800d0bc 	.word	0x0800d0bc
 800199c:	0800d0c8 	.word	0x0800d0c8
 80019a0:	0800d0d8 	.word	0x0800d0d8

080019a4 <startMotor>:
#include "usart.h"
#include "gpio.h"
#include "string.h"

extern int Power;
void startMotor() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    // Activez l'étage de puissance du moteur (code pour activer le moteur)
	if (Power==0){
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <startMotor+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d124      	bne.n	80019fa <startMotor+0x56>
		Power=1;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <startMotor+0x68>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019b6:	2100      	movs	r1, #0
 80019b8:	4815      	ldr	r0, [pc, #84]	; (8001a10 <startMotor+0x6c>)
 80019ba:	f004 f8e9 	bl	8005b90 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019be:	2104      	movs	r1, #4
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <startMotor+0x6c>)
 80019c2:	f004 f8e5 	bl	8005b90 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80019c6:	2100      	movs	r1, #0
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <startMotor+0x6c>)
 80019ca:	f005 fc17 	bl	80071fc <HAL_TIMEx_PWMN_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80019ce:	2104      	movs	r1, #4
 80019d0:	480f      	ldr	r0, [pc, #60]	; (8001a10 <startMotor+0x6c>)
 80019d2:	f005 fc13 	bl	80071fc <HAL_TIMEx_PWMN_Start>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1024-512);
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <startMotor+0x6c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,512);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <startMotor+0x6c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e8:	639a      	str	r2, [r3, #56]	; 0x38
		// Affichez le message "Power ON" dans la console
		HAL_UART_Transmit(&huart2, "Power ON\r\n", strlen("Power ON\r\n"), HAL_MAX_DELAY);
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	220a      	movs	r2, #10
 80019f0:	4908      	ldr	r1, [pc, #32]	; (8001a14 <startMotor+0x70>)
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <startMotor+0x74>)
 80019f4:	f005 ff38 	bl	8007868 <HAL_UART_Transmit>
		return 0;
 80019f8:	e006      	b.n	8001a08 <startMotor+0x64>
	}
	else {
	}
    HAL_UART_Transmit(&huart2, "Moteur déjà allumé\r\n", strlen("Moteur déjà allumé\r\n"), HAL_MAX_DELAY);
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	2217      	movs	r2, #23
 8001a00:	4906      	ldr	r1, [pc, #24]	; (8001a1c <startMotor+0x78>)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <startMotor+0x74>)
 8001a04:	f005 ff30 	bl	8007868 <HAL_UART_Transmit>
}
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200003d0 	.word	0x200003d0
 8001a10:	20000424 	.word	0x20000424
 8001a14:	0800d0f0 	.word	0x0800d0f0
 8001a18:	200004bc 	.word	0x200004bc
 8001a1c:	0800d0fc 	.word	0x0800d0fc

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_MspInit+0x44>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_MspInit+0x44>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6613      	str	r3, [r2, #96]	; 0x60
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_MspInit+0x44>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_MspInit+0x44>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_MspInit+0x44>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_MspInit+0x44>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a56:	f002 ffa5 	bl	80049a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_InitTick+0xc4>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_InitTick+0xc4>)
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6593      	str	r3, [r2, #88]	; 0x58
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_InitTick+0xc4>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a90:	f107 020c 	add.w	r2, r7, #12
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fc80 	bl	80053a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aa0:	f003 fc52 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8001aa4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <HAL_InitTick+0xc8>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0c9b      	lsrs	r3, r3, #18
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_InitTick+0xcc>)
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_InitTick+0xd0>)
 8001ab8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_InitTick+0xcc>)
 8001abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_InitTick+0xcc>)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_InitTick+0xcc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_InitTick+0xcc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001ad4:	4817      	ldr	r0, [pc, #92]	; (8001b34 <HAL_InitTick+0xcc>)
 8001ad6:	f003 ff29 	bl	800592c <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11b      	bne.n	8001b20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ae8:	4812      	ldr	r0, [pc, #72]	; (8001b34 <HAL_InitTick+0xcc>)
 8001aea:	f003 ff77 	bl	80059dc <HAL_TIM_Base_Start_IT>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001afc:	2036      	movs	r0, #54	; 0x36
 8001afe:	f002 fa67 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	d808      	bhi.n	8001b1a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	2036      	movs	r0, #54	; 0x36
 8001b0e:	f002 fa45 	bl	8003f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_InitTick+0xd4>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e002      	b.n	8001b20 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3730      	adds	r7, #48	; 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	431bde83 	.word	0x431bde83
 8001b34:	200003d4 	.word	0x200003d4
 8001b38:	40001000 	.word	0x40001000
 8001b3c:	20000080 	.word	0x20000080

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <DMA1_Channel1_IRQHandler+0x10>)
 8001b9e:	f002 fb8d 	bl	80042bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000344 	.word	0x20000344

08001bac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <ADC1_2_IRQHandler+0x14>)
 8001bb2:	f001 f91d 	bl	8002df0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <ADC1_2_IRQHandler+0x18>)
 8001bb8:	f001 f91a 	bl	8002df0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000026c 	.word	0x2000026c
 8001bc4:	200002d8 	.word	0x200002d8

08001bc8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001bce:	f004 f98d 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000424 	.word	0x20000424

08001bdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001be2:	f004 f983 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000424 	.word	0x20000424

08001bf0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001bf6:	f004 f979 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000424 	.word	0x20000424

08001c04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM1_CC_IRQHandler+0x10>)
 8001c0a:	f004 f96f 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000424 	.word	0x20000424

08001c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USART2_IRQHandler+0x10>)
 8001c1e:	f005 ff0f 	bl	8007a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200004bc 	.word	0x200004bc

08001c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c34:	f002 fdee 	bl	8004814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM6_DAC_IRQHandler+0x10>)
 8001c42:	f004 f953 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200003d4 	.word	0x200003d4

08001c50 <stopMotor>:
#include "usart.h"
#include "gpio.h"
#include "string.h"

extern int Power;
void stopMotor() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    // Desactivez l'étage de puissance du moteur (code pour desactiver le moteur)
	if (Power==1){
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <stopMotor+0x68>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d124      	bne.n	8001ca6 <stopMotor+0x56>
			Power=0;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <stopMotor+0x68>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001c62:	2100      	movs	r1, #0
 8001c64:	4815      	ldr	r0, [pc, #84]	; (8001cbc <stopMotor+0x6c>)
 8001c66:	f004 f8a5 	bl	8005db4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <stopMotor+0x6c>)
 8001c6e:	f004 f8a1 	bl	8005db4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001c72:	2100      	movs	r1, #0
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <stopMotor+0x6c>)
 8001c76:	f005 fb83 	bl	8007380 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	480f      	ldr	r0, [pc, #60]	; (8001cbc <stopMotor+0x6c>)
 8001c7e:	f005 fb7f 	bl	8007380 <HAL_TIMEx_PWMN_Stop>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,512);
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <stopMotor+0x6c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1024-512);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <stopMotor+0x6c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
			// Affichez le message "Power OFF" dans la console
			HAL_UART_Transmit(&huart2, "Power OFF\r\n", strlen("Power OFF\r\n"), HAL_MAX_DELAY);
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	220b      	movs	r2, #11
 8001c9c:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <stopMotor+0x70>)
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <stopMotor+0x74>)
 8001ca0:	f005 fde2 	bl	8007868 <HAL_UART_Transmit>
			return 0;
 8001ca4:	e006      	b.n	8001cb4 <stopMotor+0x64>
		}
		else {
		}
	    HAL_UART_Transmit(&huart2, "Moteur déjà éteint\r\n", strlen("Moteur déjà éteint\r\n"), HAL_MAX_DELAY);
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	2217      	movs	r2, #23
 8001cac:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <stopMotor+0x78>)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <stopMotor+0x74>)
 8001cb0:	f005 fdda 	bl	8007868 <HAL_UART_Transmit>
	}
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200003d0 	.word	0x200003d0
 8001cbc:	20000424 	.word	0x20000424
 8001cc0:	0800d114 	.word	0x0800d114
 8001cc4:	200004bc 	.word	0x200004bc
 8001cc8:	0800d120 	.word	0x0800d120

08001ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_kill>:

int _kill(int pid, int sig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce6:	f008 fc05 	bl	800a4f4 <__errno>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2216      	movs	r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_exit>:

void _exit (int status)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffe7 	bl	8001cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d0e:	e7fe      	b.n	8001d0e <_exit+0x12>

08001d10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e00a      	b.n	8001d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d22:	f3af 8000 	nop.w
 8001d26:	4601      	mov	r1, r0
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf0      	blt.n	8001d22 <_read+0x12>
  }

  return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e009      	b.n	8001d70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf1      	blt.n	8001d5c <_write+0x12>
  }
  return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_close>:

int _close(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001daa:	605a      	str	r2, [r3, #4]
  return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_isatty>:

int _isatty(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f008 fb6a 	bl	800a4f4 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000420 	.word	0x20000420
 8001e54:	20000730 	.word	0x20000730

08001e58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b09c      	sub	sp, #112	; 0x70
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2234      	movs	r2, #52	; 0x34
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f008 fab7 	bl	800a42a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ebc:	4b54      	ldr	r3, [pc, #336]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ebe:	4a55      	ldr	r2, [pc, #340]	; (8002014 <MX_TIM1_Init+0x198>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001ec2:	4b53      	ldr	r3, [pc, #332]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ec8:	4b51      	ldr	r3, [pc, #324]	; (8002010 <MX_TIM1_Init+0x194>)
 8001eca:	2220      	movs	r2, #32
 8001ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ed0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ee8:	4849      	ldr	r0, [pc, #292]	; (8002010 <MX_TIM1_Init+0x194>)
 8001eea:	f003 fd1f 	bl	800592c <HAL_TIM_Base_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ef4:	f7ff fbb4 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001efe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f02:	4619      	mov	r1, r3
 8001f04:	4842      	ldr	r0, [pc, #264]	; (8002010 <MX_TIM1_Init+0x194>)
 8001f06:	f004 fa85 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f10:	f7ff fba6 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f14:	483e      	ldr	r0, [pc, #248]	; (8002010 <MX_TIM1_Init+0x194>)
 8001f16:	f003 fdd9 	bl	8005acc <HAL_TIM_PWM_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f20:	f7ff fb9e 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f34:	4619      	mov	r1, r3
 8001f36:	4836      	ldr	r0, [pc, #216]	; (8002010 <MX_TIM1_Init+0x194>)
 8001f38:	f005 fa80 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f42:	f7ff fb8d 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f46:	2360      	movs	r3, #96	; 0x60
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 8001f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f50:	2300      	movs	r3, #0
 8001f52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f54:	2300      	movs	r3, #0
 8001f56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4828      	ldr	r0, [pc, #160]	; (8002010 <MX_TIM1_Init+0x194>)
 8001f6e:	f004 f93d 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f78:	f7ff fb72 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f80:	2204      	movs	r2, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4822      	ldr	r0, [pc, #136]	; (8002010 <MX_TIM1_Init+0x194>)
 8001f86:	f004 f931 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001f90:	f7ff fb66 	bl	8001660 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481b      	ldr	r0, [pc, #108]	; (8002010 <MX_TIM1_Init+0x194>)
 8001fa2:	f004 f923 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001fac:	f7ff fb58 	bl	8001660 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001fb0:	4817      	ldr	r0, [pc, #92]	; (8002010 <MX_TIM1_Init+0x194>)
 8001fb2:	f005 fb8b 	bl	80076cc <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 8001fc2:	232c      	movs	r3, #44	; 0x2c
 8001fc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_TIM1_Init+0x194>)
 8001ff4:	f005 fab8 	bl	8007568 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001ffe:	f7ff fb2f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <MX_TIM1_Init+0x194>)
 8002004:	f000 f8f4 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8002008:	bf00      	nop
 800200a:	3770      	adds	r7, #112	; 0x70
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000424 	.word	0x20000424
 8002014:	40012c00 	.word	0x40012c00

08002018 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <MX_TIM3_Init+0x90>)
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <MX_TIM3_Init+0x94>)
 800203a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_TIM3_Init+0x90>)
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <MX_TIM3_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <MX_TIM3_Init+0x90>)
 800204a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <MX_TIM3_Init+0x90>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_TIM3_Init+0x90>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	480d      	ldr	r0, [pc, #52]	; (80020a8 <MX_TIM3_Init+0x90>)
 8002074:	f005 f813 	bl	800709e <HAL_TIMEx_HallSensor_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800207e:	f7ff faef 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002082:	2350      	movs	r3, #80	; 0x50
 8002084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_TIM3_Init+0x90>)
 8002090:	f005 f9d4 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800209a:	f7ff fae1 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000470 	.word	0x20000470
 80020ac:	40000400 	.word	0x40000400

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_TIM_Base_MspInit+0x74>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12b      	bne.n	800211a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_TIM_Base_MspInit+0x78>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_TIM_Base_MspInit+0x78>)
 80020c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020cc:	6613      	str	r3, [r2, #96]	; 0x60
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_TIM_Base_MspInit+0x78>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2018      	movs	r0, #24
 80020e0:	f001 ff5c 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020e4:	2018      	movs	r0, #24
 80020e6:	f001 ff73 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2019      	movs	r0, #25
 80020f0:	f001 ff54 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020f4:	2019      	movs	r0, #25
 80020f6:	f001 ff6b 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201a      	movs	r0, #26
 8002100:	f001 ff4c 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002104:	201a      	movs	r0, #26
 8002106:	f001 ff63 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	201b      	movs	r0, #27
 8002110:	f001 ff44 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002114:	201b      	movs	r0, #27
 8002116:	f001 ff5b 	bl	8003fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d145      	bne.n	80021da <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002196:	2350      	movs	r3, #80	; 0x50
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a6:	2302      	movs	r3, #2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b4:	f002 f994 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ca:	2302      	movs	r3, #2
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80021d6:	f002 f983 	bl	80044e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40021000 	.word	0x40021000
 80021ec:	48000800 	.word	0x48000800

080021f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_TIM_MspPostInit+0xc4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d14b      	bne.n	80022aa <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8002242:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002254:	2306      	movs	r3, #6
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4817      	ldr	r0, [pc, #92]	; (80022bc <HAL_TIM_MspPostInit+0xcc>)
 8002260:	f002 f93e 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002276:	2304      	movs	r3, #4
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	480e      	ldr	r0, [pc, #56]	; (80022bc <HAL_TIM_MspPostInit+0xcc>)
 8002282:	f002 f92d 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8002286:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002298:	2306      	movs	r3, #6
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f002 f91b 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48000400 	.word	0x48000400

080022c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c4:	4b22      	ldr	r3, [pc, #136]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022c6:	4a23      	ldr	r2, [pc, #140]	; (8002354 <MX_USART2_UART_Init+0x94>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_USART2_UART_Init+0x90>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <MX_USART2_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <MX_USART2_UART_Init+0x90>)
 800230a:	f005 fa5d 	bl	80077c8 <HAL_UART_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002314:	f7ff f9a4 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002318:	2100      	movs	r1, #0
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <MX_USART2_UART_Init+0x90>)
 800231c:	f007 f9ff 	bl	800971e <HAL_UARTEx_SetTxFifoThreshold>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002326:	f7ff f99b 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800232a:	2100      	movs	r1, #0
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <MX_USART2_UART_Init+0x90>)
 800232e:	f007 fa34 	bl	800979a <HAL_UARTEx_SetRxFifoThreshold>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002338:	f7ff f992 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <MX_USART2_UART_Init+0x90>)
 800233e:	f007 f9b5 	bl	80096ac <HAL_UARTEx_DisableFifoMode>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002348:	f7ff f98a 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200004bc 	.word	0x200004bc
 8002354:	40004400 	.word	0x40004400

08002358 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800235e:	4a23      	ldr	r2, [pc, #140]	; (80023ec <MX_USART3_UART_Init+0x94>)
 8002360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023a0:	4811      	ldr	r0, [pc, #68]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023a2:	f005 fa11 	bl	80077c8 <HAL_UART_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023ac:	f7ff f958 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b0:	2100      	movs	r1, #0
 80023b2:	480d      	ldr	r0, [pc, #52]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023b4:	f007 f9b3 	bl	800971e <HAL_UARTEx_SetTxFifoThreshold>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023be:	f7ff f94f 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c2:	2100      	movs	r1, #0
 80023c4:	4808      	ldr	r0, [pc, #32]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023c6:	f007 f9e8 	bl	800979a <HAL_UARTEx_SetRxFifoThreshold>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023d0:	f7ff f946 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023d6:	f007 f969 	bl	80096ac <HAL_UARTEx_DisableFifoMode>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023e0:	f7ff f93e 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000054c 	.word	0x2000054c
 80023ec:	40004800 	.word	0x40004800

080023f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0a0      	sub	sp, #128	; 0x80
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0318 	add.w	r3, r7, #24
 800240c:	2254      	movs	r2, #84	; 0x54
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f008 f80a 	bl	800a42a <memset>
  if(uartHandle->Instance==USART2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a41      	ldr	r2, [pc, #260]	; (8002520 <HAL_UART_MspInit+0x130>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d13f      	bne.n	80024a0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002420:	2302      	movs	r3, #2
 8002422:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	4618      	mov	r0, r3
 800242e:	f003 f82f 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002438:	f7ff f912 	bl	8001660 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_UART_MspInit+0x134>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_UART_MspInit+0x134>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_UART_MspInit+0x134>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_UART_MspInit+0x134>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a32      	ldr	r2, [pc, #200]	; (8002524 <HAL_UART_MspInit+0x134>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_UART_MspInit+0x134>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800246c:	230c      	movs	r3, #12
 800246e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800247c:	2307      	movs	r3, #7
 800247e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248a:	f002 f829 	bl	80044e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	2026      	movs	r0, #38	; 0x26
 8002494:	f001 fd82 	bl	8003f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002498:	2026      	movs	r0, #38	; 0x26
 800249a:	f001 fd99 	bl	8003fd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800249e:	e03b      	b.n	8002518 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_UART_MspInit+0x138>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d136      	bne.n	8002518 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024aa:	2304      	movs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b2:	f107 0318 	add.w	r3, r7, #24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 ffea 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80024c2:	f7ff f8cd 	bl	8001660 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002508:	2307      	movs	r3, #7
 800250a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002510:	4619      	mov	r1, r3
 8002512:	4806      	ldr	r0, [pc, #24]	; (800252c <HAL_UART_MspInit+0x13c>)
 8002514:	f001 ffe4 	bl	80044e0 <HAL_GPIO_Init>
}
 8002518:	bf00      	nop
 800251a:	3780      	adds	r7, #128	; 0x80
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40004400 	.word	0x40004400
 8002524:	40021000 	.word	0x40021000
 8002528:	40004800 	.word	0x40004800
 800252c:	48000800 	.word	0x48000800

08002530 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002532:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <LoopForever+0x6>)
  ldr r1, =_edata
 8002536:	490e      	ldr	r1, [pc, #56]	; (8002570 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <LoopForever+0xe>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <LoopForever+0x12>)
  ldr r4, =_ebss
 800254c:	4c0b      	ldr	r4, [pc, #44]	; (800257c <LoopForever+0x16>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800255a:	f7ff fc7d 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f007 ffcf 	bl	800a500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002562:	f7fe ffab 	bl	80014bc <main>

08002566 <LoopForever>:

LoopForever:
    b LoopForever
 8002566:	e7fe      	b.n	8002566 <LoopForever>
  ldr   r0, =_estack
 8002568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002574:	0800d550 	.word	0x0800d550
  ldr r2, =_sbss
 8002578:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800257c:	2000072c 	.word	0x2000072c

08002580 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC3_IRQHandler>

08002582 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258c:	2003      	movs	r0, #3
 800258e:	f001 fcfa 	bl	8003f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002592:	200f      	movs	r0, #15
 8002594:	f7ff fa68 	bl	8001a68 <HAL_InitTick>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	71fb      	strb	r3, [r7, #7]
 80025a2:	e001      	b.n	80025a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025a4:	f7ff fa3c 	bl	8001a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025a8:	79fb      	ldrb	r3, [r7, #7]

}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_IncTick+0x1c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_IncTick+0x20>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_IncTick+0x1c>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	200005dc 	.word	0x200005dc
 80025d4:	20000084 	.word	0x20000084

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200005dc 	.word	0x200005dc

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff ffee 	bl	80025d8 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d004      	beq.n	8002614 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_Delay+0x40>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002614:	bf00      	nop
 8002616:	f7ff ffdf 	bl	80025d8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	429a      	cmp	r2, r3
 8002624:	d8f7      	bhi.n	8002616 <HAL_Delay+0x26>
  {
  }
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000084 	.word	0x20000084

08002634 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3360      	adds	r3, #96	; 0x60
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <LL_ADC_SetOffset+0x44>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	03fff000 	.word	0x03fff000

080026e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3360      	adds	r3, #96	; 0x60
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3360      	adds	r3, #96	; 0x60
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	431a      	orrs	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3360      	adds	r3, #96	; 0x60
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	615a      	str	r2, [r3, #20]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3330      	adds	r3, #48	; 0x30
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	4413      	add	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	211f      	movs	r1, #31
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	401a      	ands	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 011f 	and.w	r1, r3, #31
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	431a      	orrs	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3314      	adds	r3, #20
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	0e5b      	lsrs	r3, r3, #25
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0d1b      	lsrs	r3, r3, #20
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2107      	movs	r1, #7
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	401a      	ands	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	0d1b      	lsrs	r3, r3, #20
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10a      	bne.n	80028fe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80028fc:	e00a      	b.n	8002914 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	43db      	mvns	r3, r3
 800290c:	401a      	ands	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	407f0000 	.word	0x407f0000

08002924 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 031f 	and.w	r3, r3, #31
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800296c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6093      	str	r3, [r2, #8]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002994:	d101      	bne.n	800299a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029e4:	d101      	bne.n	80029ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_IsEnabled+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_IsEnabled+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d101      	bne.n	8002a5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1af      	b.n	8002de6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fe fb1b 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff67 	bl	8002980 <LL_ADC_IsDeepPowerDownEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff4d 	bl	800295c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff82 	bl	80029d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d115      	bne.n	8002afe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff66 	bl	80029a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002adc:	4b9f      	ldr	r3, [pc, #636]	; (8002d5c <HAL_ADC_Init+0x2f0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	4a9f      	ldr	r2, [pc, #636]	; (8002d60 <HAL_ADC_Init+0x2f4>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002af0:	e002      	b.n	8002af8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f9      	bne.n	8002af2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff64 	bl	80029d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff75 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002b34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8148 	bne.w	8002dd4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8144 	bne.w	8002dd4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b54:	f043 0202 	orr.w	r2, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff49 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d141      	bne.n	8002bf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b74:	d004      	beq.n	8002b80 <HAL_ADC_Init+0x114>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7a      	ldr	r2, [pc, #488]	; (8002d64 <HAL_ADC_Init+0x2f8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_Init+0x134>
 8002b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b84:	f7ff ff38 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4876      	ldr	r0, [pc, #472]	; (8002d64 <HAL_ADC_Init+0x2f8>)
 8002b8c:	f7ff ff34 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4323      	orrs	r3, r4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e012      	b.n	8002bc6 <HAL_ADC_Init+0x15a>
 8002ba0:	4871      	ldr	r0, [pc, #452]	; (8002d68 <HAL_ADC_Init+0x2fc>)
 8002ba2:	f7ff ff29 	bl	80029f8 <LL_ADC_IsEnabled>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4870      	ldr	r0, [pc, #448]	; (8002d6c <HAL_ADC_Init+0x300>)
 8002baa:	f7ff ff25 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	431c      	orrs	r4, r3
 8002bb2:	486f      	ldr	r0, [pc, #444]	; (8002d70 <HAL_ADC_Init+0x304>)
 8002bb4:	f7ff ff20 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d012      	beq.n	8002bf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd2:	d004      	beq.n	8002bde <HAL_ADC_Init+0x172>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a62      	ldr	r2, [pc, #392]	; (8002d64 <HAL_ADC_Init+0x2f8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0x176>
 8002bde:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_ADC_Init+0x308>)
 8002be0:	e000      	b.n	8002be4 <HAL_ADC_Init+0x178>
 8002be2:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_ADC_Init+0x30c>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7ff fd22 	bl	8002634 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7f5b      	ldrb	r3, [r3, #29]
 8002bf4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bfa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	045b      	lsls	r3, r3, #17
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_ADC_Init+0x310>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fed1 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002c7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fede 	bl	8002a44 <LL_ADC_INJ_IsConversionOngoing>
 8002c88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d17f      	bne.n	8002d90 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d17c      	bne.n	8002d90 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c9a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ca2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb2:	f023 0302 	bic.w	r3, r3, #2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ce0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6911      	ldr	r1, [r2, #16]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cf6:	e013      	b.n	8002d20 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d12a      	bne.n	8002d80 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d46:	4311      	orrs	r1, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
 8002d5a:	e019      	b.n	8002d90 <HAL_ADC_Init+0x324>
 8002d5c:	2000007c 	.word	0x2000007c
 8002d60:	053e2d63 	.word	0x053e2d63
 8002d64:	50000100 	.word	0x50000100
 8002d68:	50000400 	.word	0x50000400
 8002d6c:	50000500 	.word	0x50000500
 8002d70:	50000600 	.word	0x50000600
 8002d74:	50000300 	.word	0x50000300
 8002d78:	50000700 	.word	0x50000700
 8002d7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f023 010f 	bic.w	r1, r3, #15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
 8002db0:	e007      	b.n	8002dc2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 020f 	bic.w	r2, r2, #15
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dd2:	e007      	b.n	8002de4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	bf00      	nop

08002df0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e14:	d004      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x30>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a8e      	ldr	r2, [pc, #568]	; (8003054 <HAL_ADC_IRQHandler+0x264>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x34>
 8002e20:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <HAL_ADC_IRQHandler+0x268>)
 8002e22:	e000      	b.n	8002e26 <HAL_ADC_IRQHandler+0x36>
 8002e24:	4b8d      	ldr	r3, [pc, #564]	; (800305c <HAL_ADC_IRQHandler+0x26c>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fd7c 	bl	8002924 <LL_ADC_GetMultimode>
 8002e2c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d017      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x78>
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fed4 	bl	8003c08 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x8c>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8094 	beq.w	8002fb0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 808e 	beq.w	8002fb0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fc91 	bl	80027d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d072      	beq.n	8002fa2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a64      	ldr	r2, [pc, #400]	; (8003054 <HAL_ADC_IRQHandler+0x264>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_ADC_IRQHandler+0xea>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_ADC_IRQHandler+0x270>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d002      	beq.n	8002ed6 <HAL_ADC_IRQHandler+0xe6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_IRQHandler+0xee>
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_ADC_IRQHandler+0x274>)
 8002ed8:	e001      	b.n	8002ede <HAL_ADC_IRQHandler+0xee>
 8002eda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d008      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d002      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d104      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	e014      	b.n	8002f2c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_ADC_IRQHandler+0x264>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_ADC_IRQHandler+0x130>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a53      	ldr	r2, [pc, #332]	; (8003060 <HAL_ADC_IRQHandler+0x270>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d002      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x12c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_IRQHandler+0x134>
 8002f1c:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_ADC_IRQHandler+0x274>)
 8002f1e:	e001      	b.n	8002f24 <HAL_ADC_IRQHandler+0x134>
 8002f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f24:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d135      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d12e      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fd68 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11a      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 020c 	bic.w	r2, r2, #12
 8002f62:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d112      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f88:	e00b      	b.n	8002fa2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f984 	bl	80032b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	220c      	movs	r2, #12
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_IRQHandler+0x1d4>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80b3 	beq.w	8003136 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80ad 	beq.w	8003136 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fc2c 	bl	8002856 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ffe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fbe7 	bl	80027d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800300a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a10      	ldr	r2, [pc, #64]	; (8003054 <HAL_ADC_IRQHandler+0x264>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_ADC_IRQHandler+0x23a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_ADC_IRQHandler+0x270>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d002      	beq.n	8003026 <HAL_ADC_IRQHandler+0x236>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	e003      	b.n	800302e <HAL_ADC_IRQHandler+0x23e>
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_ADC_IRQHandler+0x274>)
 8003028:	e001      	b.n	800302e <HAL_ADC_IRQHandler+0x23e>
 800302a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4293      	cmp	r3, r2
 8003034:	d008      	beq.n	8003048 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b06      	cmp	r3, #6
 8003040:	d002      	beq.n	8003048 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b07      	cmp	r3, #7
 8003046:	d10f      	bne.n	8003068 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	e01f      	b.n	8003092 <HAL_ADC_IRQHandler+0x2a2>
 8003052:	bf00      	nop
 8003054:	50000100 	.word	0x50000100
 8003058:	50000300 	.word	0x50000300
 800305c:	50000700 	.word	0x50000700
 8003060:	50000500 	.word	0x50000500
 8003064:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a8b      	ldr	r2, [pc, #556]	; (800329c <HAL_ADC_IRQHandler+0x4ac>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_ADC_IRQHandler+0x296>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a8a      	ldr	r2, [pc, #552]	; (80032a0 <HAL_ADC_IRQHandler+0x4b0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d002      	beq.n	8003082 <HAL_ADC_IRQHandler+0x292>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	e003      	b.n	800308a <HAL_ADC_IRQHandler+0x29a>
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_ADC_IRQHandler+0x4b4>)
 8003084:	e001      	b.n	800308a <HAL_ADC_IRQHandler+0x29a>
 8003086:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800308a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d047      	beq.n	8003128 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_ADC_IRQHandler+0x2c2>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d03f      	beq.n	8003128 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d13a      	bne.n	8003128 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d133      	bne.n	8003128 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d12e      	bne.n	8003128 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fcb8 	bl	8002a44 <LL_ADC_INJ_IsConversionOngoing>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11a      	bne.n	8003110 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d112      	bne.n	8003128 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	; 0x5c
 800310e:	e00b      	b.n	8003128 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f043 0210 	orr.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fd45 	bl	8003bb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2260      	movs	r2, #96	; 0x60
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <HAL_ADC_IRQHandler+0x374>
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8b4 	bl	80032c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <HAL_ADC_IRQHandler+0x3a4>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fd2b 	bl	8003be0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d012      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x3d4>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fd1d 	bl	8003bf4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d043      	beq.n	8003256 <HAL_ADC_IRQHandler+0x466>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03e      	beq.n	8003256 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80031e0:	2301      	movs	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	e021      	b.n	800322a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f4:	d004      	beq.n	8003200 <HAL_ADC_IRQHandler+0x410>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a28      	ldr	r2, [pc, #160]	; (800329c <HAL_ADC_IRQHandler+0x4ac>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_IRQHandler+0x414>
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_ADC_IRQHandler+0x4b8>)
 8003202:	e000      	b.n	8003206 <HAL_ADC_IRQHandler+0x416>
 8003204:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_ADC_IRQHandler+0x4bc>)
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fb9a 	bl	8002940 <LL_ADC_GetMultiDMATransfer>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003212:	2301      	movs	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	e008      	b.n	800322a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003226:	2301      	movs	r3, #1
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10e      	bne.n	800324e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	f043 0202 	orr.w	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f845 	bl	80032d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2210      	movs	r2, #16
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_ADC_IRQHandler+0x4a2>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d013      	beq.n	8003292 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	f043 0208 	orr.w	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800328a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fc9d 	bl	8003bcc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	50000100 	.word	0x50000100
 80032a0:	50000500 	.word	0x50000500
 80032a4:	50000400 	.word	0x50000400
 80032a8:	50000300 	.word	0x50000300
 80032ac:	50000700 	.word	0x50000700

080032b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b0b6      	sub	sp, #216	; 0xd8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x24>
 800330a:	2302      	movs	r3, #2
 800330c:	f000 bc13 	b.w	8003b36 <HAL_ADC_ConfigChannel+0x84a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb7e 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 83f3 	bne.w	8003b10 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f7ff fa61 	bl	80027fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fb6c 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8003346:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fb78 	bl	8002a44 <LL_ADC_INJ_IsConversionOngoing>
 8003354:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 81d9 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 81d4 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003374:	d10f      	bne.n	8003396 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	4619      	mov	r1, r3
 8003382:	f7ff fa7b 	bl	800287c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fa0f 	bl	80027b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003394:	e00e      	b.n	80033b4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7ff fa6a 	bl	800287c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f9ff 	bl	80027b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d022      	beq.n	800341c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033e6:	f7ff f959 	bl	800269c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f7ff f9a5 	bl	8002746 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6919      	ldr	r1, [r3, #16]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	7f1b      	ldrb	r3, [r3, #28]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x126>
 800340c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003410:	e000      	b.n	8003414 <HAL_ADC_ConfigChannel+0x128>
 8003412:	2300      	movs	r3, #0
 8003414:	461a      	mov	r2, r3
 8003416:	f7ff f9b1 	bl	800277c <LL_ADC_SetOffsetSaturation>
 800341a:	e17b      	b.n	8003714 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f95e 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x15c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f953 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	0e9b      	lsrs	r3, r3, #26
 8003442:	f003 021f 	and.w	r2, r3, #31
 8003446:	e01e      	b.n	8003486 <HAL_ADC_ConfigChannel+0x19a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f948 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003454:	4603      	mov	r3, r0
 8003456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800346a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800346e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e004      	b.n	8003484 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800347a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_ConfigChannel+0x1b2>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0e9b      	lsrs	r3, r3, #26
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	e018      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x1e4>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034c2:	2320      	movs	r3, #32
 80034c4:	e004      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d106      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f917 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f8fb 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_ADC_ConfigChannel+0x222>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f8f0 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	e01e      	b.n	800354c <HAL_ADC_ConfigChannel+0x260>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2101      	movs	r1, #1
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff f8e5 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800351a:	4603      	mov	r3, r0
 800351c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800352c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e004      	b.n	800354a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x278>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	e018      	b.n	8003596 <HAL_ADC_ConfigChannel+0x2aa>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800357c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e004      	b.n	8003596 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003596:	429a      	cmp	r2, r3
 8003598:	d106      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	2101      	movs	r1, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f8b4 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2102      	movs	r1, #2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f898 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x2e8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f88d 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	f003 021f 	and.w	r2, r3, #31
 80035d2:	e01e      	b.n	8003612 <HAL_ADC_ConfigChannel+0x326>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2102      	movs	r1, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f882 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003602:	2320      	movs	r3, #32
 8003604:	e004      	b.n	8003610 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <HAL_ADC_ConfigChannel+0x33e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	e016      	b.n	8003658 <HAL_ADC_ConfigChannel+0x36c>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800363c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800363e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e004      	b.n	8003658 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800364e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003658:	429a      	cmp	r2, r3
 800365a:	d106      	bne.n	800366a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f853 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2103      	movs	r1, #3
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f837 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x3aa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2103      	movs	r1, #3
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f82c 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	0e9b      	lsrs	r3, r3, #26
 8003690:	f003 021f 	and.w	r2, r3, #31
 8003694:	e017      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x3da>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2103      	movs	r1, #3
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f821 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80036bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <HAL_ADC_ConfigChannel+0x3f2>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	e011      	b.n	8003702 <HAL_ADC_ConfigChannel+0x416>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e003      	b.n	8003702 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003702:	429a      	cmp	r2, r3
 8003704:	d106      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	2103      	movs	r1, #3
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fffe 	bl	8002710 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f96d 	bl	80029f8 <LL_ADC_IsEnabled>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 813d 	bne.w	80039a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	461a      	mov	r2, r3
 8003734:	f7ff f8ce 	bl	80028d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4aa2      	ldr	r2, [pc, #648]	; (80039c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	f040 812e 	bne.w	80039a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <HAL_ADC_ConfigChannel+0x480>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2b09      	cmp	r3, #9
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e019      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x4b4>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800377a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800377c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800377e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003784:	2320      	movs	r3, #32
 8003786:	e003      	b.n	8003790 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3301      	adds	r3, #1
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2b09      	cmp	r3, #9
 8003798:	bf94      	ite	ls
 800379a:	2301      	movls	r3, #1
 800379c:	2300      	movhi	r3, #0
 800379e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d079      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x4d4>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	3301      	adds	r3, #1
 80037b8:	069b      	lsls	r3, r3, #26
 80037ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037be:	e015      	b.n	80037ec <HAL_ADC_ConfigChannel+0x500>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037d8:	2320      	movs	r3, #32
 80037da:	e003      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	069b      	lsls	r3, r3, #26
 80037e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_ADC_ConfigChannel+0x520>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0e9b      	lsrs	r3, r3, #26
 80037fe:	3301      	adds	r3, #1
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	e017      	b.n	800383c <HAL_ADC_ConfigChannel+0x550>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800381e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003824:	2320      	movs	r3, #32
 8003826:	e003      	b.n	8003830 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	3301      	adds	r3, #1
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	ea42 0103 	orr.w	r1, r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x576>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	3301      	adds	r3, #1
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	051b      	lsls	r3, r3, #20
 8003860:	e018      	b.n	8003894 <HAL_ADC_ConfigChannel+0x5a8>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800387a:	2320      	movs	r3, #32
 800387c:	e003      	b.n	8003886 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f003 021f 	and.w	r2, r3, #31
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003894:	430b      	orrs	r3, r1
 8003896:	e07e      	b.n	8003996 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d107      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5c8>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	3301      	adds	r3, #1
 80038ac:	069b      	lsls	r3, r3, #26
 80038ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038b2:	e015      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x5f4>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e003      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x614>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	3301      	adds	r3, #1
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	e017      	b.n	8003930 <HAL_ADC_ConfigChannel+0x644>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	61fb      	str	r3, [r7, #28]
  return result;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e003      	b.n	8003924 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	ea42 0103 	orr.w	r1, r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_ADC_ConfigChannel+0x670>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e9b      	lsrs	r3, r3, #26
 8003946:	3301      	adds	r3, #1
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	3b1e      	subs	r3, #30
 8003954:	051b      	lsls	r3, r3, #20
 8003956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800395a:	e01b      	b.n	8003994 <HAL_ADC_ConfigChannel+0x6a8>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	613b      	str	r3, [r7, #16]
  return result;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e003      	b.n	8003980 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f003 021f 	and.w	r2, r3, #31
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	3b1e      	subs	r3, #30
 800398e:	051b      	lsls	r3, r3, #20
 8003990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003994:	430b      	orrs	r3, r1
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	6892      	ldr	r2, [r2, #8]
 800399a:	4619      	mov	r1, r3
 800399c:	f7fe ff6e 	bl	800287c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_ADC_ConfigChannel+0x6e0>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80be 	beq.w	8003b2a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b6:	d004      	beq.n	80039c2 <HAL_ADC_ConfigChannel+0x6d6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10a      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x6ec>
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80039c4:	e009      	b.n	80039da <HAL_ADC_ConfigChannel+0x6ee>
 80039c6:	bf00      	nop
 80039c8:	407f0000 	.word	0x407f0000
 80039cc:	80080000 	.word	0x80080000
 80039d0:	50000100 	.word	0x50000100
 80039d4:	50000300 	.word	0x50000300
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_ADC_ConfigChannel+0x854>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fe50 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 80039e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a56      	ldr	r2, [pc, #344]	; (8003b44 <HAL_ADC_ConfigChannel+0x858>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_ADC_ConfigChannel+0x70c>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a55      	ldr	r2, [pc, #340]	; (8003b48 <HAL_ADC_ConfigChannel+0x85c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d13a      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d134      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a0c:	d005      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x72e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4e      	ldr	r2, [pc, #312]	; (8003b4c <HAL_ADC_ConfigChannel+0x860>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	f040 8085 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a22:	d004      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x742>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a49      	ldr	r2, [pc, #292]	; (8003b50 <HAL_ADC_ConfigChannel+0x864>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x746>
 8003a2e:	4a49      	ldr	r2, [pc, #292]	; (8003b54 <HAL_ADC_ConfigChannel+0x868>)
 8003a30:	e000      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x748>
 8003a32:	4a43      	ldr	r2, [pc, #268]	; (8003b40 <HAL_ADC_ConfigChannel+0x854>)
 8003a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f7fe fe0b 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a44:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <HAL_ADC_ConfigChannel+0x86c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	4a44      	ldr	r2, [pc, #272]	; (8003b5c <HAL_ADC_ConfigChannel+0x870>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a5e:	e002      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f9      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a6c:	e05a      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <HAL_ADC_ConfigChannel+0x874>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d125      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x7d8>
 8003a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11f      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a31      	ldr	r2, [pc, #196]	; (8003b50 <HAL_ADC_ConfigChannel+0x864>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d104      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x7ac>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <HAL_ADC_ConfigChannel+0x878>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d047      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa0:	d004      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x7c0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <HAL_ADC_ConfigChannel+0x864>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x7c4>
 8003aac:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <HAL_ADC_ConfigChannel+0x868>)
 8003aae:	e000      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x7c6>
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_ADC_ConfigChannel+0x854>)
 8003ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe fdcc 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ac2:	e031      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_ADC_ConfigChannel+0x87c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d12d      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d127      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_ADC_ConfigChannel+0x864>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d022      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aec:	d004      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0x80c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_ADC_ConfigChannel+0x864>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x810>
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_ADC_ConfigChannel+0x868>)
 8003afa:	e000      	b.n	8003afe <HAL_ADC_ConfigChannel+0x812>
 8003afc:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <HAL_ADC_ConfigChannel+0x854>)
 8003afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f7fe fda6 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
 8003b0e:	e00c      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b22:	e002      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b24:	bf00      	nop
 8003b26:	e000      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	37d8      	adds	r7, #216	; 0xd8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	50000700 	.word	0x50000700
 8003b44:	c3210000 	.word	0xc3210000
 8003b48:	90c00010 	.word	0x90c00010
 8003b4c:	50000600 	.word	0x50000600
 8003b50:	50000100 	.word	0x50000100
 8003b54:	50000300 	.word	0x50000300
 8003b58:	2000007c 	.word	0x2000007c
 8003b5c:	053e2d63 	.word	0x053e2d63
 8003b60:	c7520000 	.word	0xc7520000
 8003b64:	50000500 	.word	0x50000500
 8003b68:	cb840000 	.word	0xcb840000

08003b6c <LL_ADC_IsEnabled>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <LL_ADC_IsEnabled+0x18>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <LL_ADC_IsEnabled+0x1a>
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d101      	bne.n	8003baa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b0a1      	sub	sp, #132	; 0x84
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0e7      	b.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c42:	2300      	movs	r3, #0
 8003c44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c46:	2300      	movs	r3, #0
 8003c48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c52:	d102      	bne.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c54:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	e009      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6e      	ldr	r2, [pc, #440]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d102      	bne.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003c64:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	e001      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0be      	b.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ff7f 	bl	8003b92 <LL_ADC_REG_IsConversionOngoing>
 8003c94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff ff79 	bl	8003b92 <LL_ADC_REG_IsConversionOngoing>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 80a0 	bne.w	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 809c 	bne.w	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb8:	d004      	beq.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a55      	ldr	r2, [pc, #340]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003cc4:	4b56      	ldr	r3, [pc, #344]	; (8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003cc6:	e000      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003cc8:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003cca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d04b      	beq.n	8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ce6:	035b      	lsls	r3, r3, #13
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	431a      	orrs	r2, r3
 8003cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf8:	d004      	beq.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a45      	ldr	r2, [pc, #276]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10f      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003d04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d08:	f7ff ff30 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4841      	ldr	r0, [pc, #260]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d10:	f7ff ff2c 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4323      	orrs	r3, r4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e012      	b.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d24:	483c      	ldr	r0, [pc, #240]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d26:	f7ff ff21 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	483b      	ldr	r0, [pc, #236]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d2e:	f7ff ff1d 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	431c      	orrs	r4, r3
 8003d36:	483c      	ldr	r0, [pc, #240]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d38:	f7ff ff18 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4323      	orrs	r3, r4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d056      	beq.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d56:	f023 030f 	bic.w	r3, r3, #15
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6811      	ldr	r1, [r2, #0]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	431a      	orrs	r2, r3
 8003d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d68:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d6a:	e047      	b.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d80:	d004      	beq.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a23      	ldr	r2, [pc, #140]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10f      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d90:	f7ff feec 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d94:	4604      	mov	r4, r0
 8003d96:	481f      	ldr	r0, [pc, #124]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d98:	f7ff fee8 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4323      	orrs	r3, r4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e012      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003dac:	481a      	ldr	r0, [pc, #104]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dae:	f7ff fedd 	bl	8003b6c <LL_ADC_IsEnabled>
 8003db2:	4604      	mov	r4, r0
 8003db4:	4819      	ldr	r0, [pc, #100]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003db6:	f7ff fed9 	bl	8003b6c <LL_ADC_IsEnabled>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	431c      	orrs	r4, r3
 8003dbe:	481a      	ldr	r0, [pc, #104]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003dc0:	f7ff fed4 	bl	8003b6c <LL_ADC_IsEnabled>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4323      	orrs	r3, r4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dde:	f023 030f 	bic.w	r3, r3, #15
 8003de2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003de4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003de6:	e009      	b.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003dfa:	e000      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3784      	adds	r7, #132	; 0x84
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}
 8003e12:	bf00      	nop
 8003e14:	50000100 	.word	0x50000100
 8003e18:	50000400 	.word	0x50000400
 8003e1c:	50000500 	.word	0x50000500
 8003e20:	50000300 	.word	0x50000300
 8003e24:	50000700 	.word	0x50000700
 8003e28:	50000600 	.word	0x50000600

08003e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5e:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	60d3      	str	r3, [r2, #12]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <__NVIC_GetPriorityGrouping+0x18>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0307 	and.w	r3, r3, #7
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db0b      	blt.n	8003eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <__NVIC_EnableIRQ+0x38>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff4c 	bl	8003e2c <__NVIC_SetPriorityGrouping>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003faa:	f7ff ff63 	bl	8003e74 <__NVIC_GetPriorityGrouping>
 8003fae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f7ff ffb3 	bl	8003f20 <NVIC_EncodePriority>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff82 	bl	8003ecc <__NVIC_SetPriority>
}
 8003fc8:	bf00      	nop
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff56 	bl	8003e90 <__NVIC_EnableIRQ>
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e08d      	b.n	800411a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_DMA_Init+0x138>)
 8004006:	429a      	cmp	r2, r3
 8004008:	d80f      	bhi.n	800402a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b45      	ldr	r3, [pc, #276]	; (8004128 <HAL_DMA_Init+0x13c>)
 8004012:	4413      	add	r3, r2
 8004014:	4a45      	ldr	r2, [pc, #276]	; (800412c <HAL_DMA_Init+0x140>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a42      	ldr	r2, [pc, #264]	; (8004130 <HAL_DMA_Init+0x144>)
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
 8004028:	e00e      	b.n	8004048 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_DMA_Init+0x148>)
 8004032:	4413      	add	r3, r2
 8004034:	4a3d      	ldr	r2, [pc, #244]	; (800412c <HAL_DMA_Init+0x140>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	009a      	lsls	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a3c      	ldr	r2, [pc, #240]	; (8004138 <HAL_DMA_Init+0x14c>)
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9be 	bl	800441c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a8:	d102      	bne.n	80040b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_DMA_Init+0x104>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d80c      	bhi.n	80040f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9de 	bl	8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	e008      	b.n	8004102 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40020407 	.word	0x40020407
 8004128:	bffdfff8 	.word	0xbffdfff8
 800412c:	cccccccd 	.word	0xcccccccd
 8004130:	40020000 	.word	0x40020000
 8004134:	bffdfbf8 	.word	0xbffdfbf8
 8004138:	40020400 	.word	0x40020400

0800413c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d005      	beq.n	8004160 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2204      	movs	r2, #4
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e037      	b.n	80041d0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020e 	bic.w	r2, r2, #14
 800416e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ac:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041ce:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d00d      	beq.n	8004222 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2204      	movs	r2, #4
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e047      	b.n	80042b2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 020e 	bic.w	r2, r2, #14
 8004230:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f003 021f 	and.w	r2, r3, #31
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f202 	lsl.w	r2, r1, r2
 8004264:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00c      	beq.n	8004292 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004286:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004290:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
    }
  }
  return status;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2204      	movs	r2, #4
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d026      	beq.n	8004336 <HAL_DMA_IRQHandler+0x7a>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d021      	beq.n	8004336 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0204 	bic.w	r2, r2, #4
 800430e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	2104      	movs	r1, #4
 800431e:	fa01 f202 	lsl.w	r2, r1, r2
 8004322:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	2b00      	cmp	r3, #0
 800432a:	d071      	beq.n	8004410 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004334:	e06c      	b.n	8004410 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2202      	movs	r2, #2
 8004340:	409a      	lsls	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02e      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d029      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 020a 	bic.w	r2, r2, #10
 8004370:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f003 021f 	and.w	r2, r3, #31
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2102      	movs	r1, #2
 8004388:	fa01 f202 	lsl.w	r2, r1, r2
 800438c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d038      	beq.n	8004410 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043a6:	e033      	b.n	8004410 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	2208      	movs	r2, #8
 80043b2:	409a      	lsls	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02a      	beq.n	8004412 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d025      	beq.n	8004412 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 020e 	bic.w	r2, r2, #14
 80043d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f003 021f 	and.w	r2, r3, #31
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2101      	movs	r1, #1
 80043e4:	fa01 f202 	lsl.w	r2, r1, r2
 80043e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004410:	bf00      	nop
 8004412:	bf00      	nop
}
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d802      	bhi.n	8004436 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e001      	b.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004438:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3b08      	subs	r3, #8
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40020407 	.word	0x40020407
 8004488:	40020800 	.word	0x40020800
 800448c:	40020820 	.word	0x40020820
 8004490:	cccccccd 	.word	0xcccccccd
 8004494:	40020880 	.word	0x40020880

08004498 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a08      	ldr	r2, [pc, #32]	; (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044ba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b01      	subs	r3, #1
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2201      	movs	r2, #1
 80044c6:	409a      	lsls	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	1000823f 	.word	0x1000823f
 80044dc:	40020940 	.word	0x40020940

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044ee:	e15a      	b.n	80047a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 814c 	beq.w	80047a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d005      	beq.n	8004520 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800451c:	2b02      	cmp	r3, #2
 800451e:	d130      	bne.n	8004582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004556:	2201      	movs	r2, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0201 	and.w	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b03      	cmp	r3, #3
 800458c:	d017      	beq.n	80045be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d123      	bne.n	8004612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a6 	beq.w	80047a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004654:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 8004656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004658:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6613      	str	r3, [r2, #96]	; 0x60
 8004660:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 8004662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466c:	4a56      	ldr	r2, [pc, #344]	; (80047c8 <HAL_GPIO_Init+0x2e8>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004696:	d01f      	beq.n	80046d8 <HAL_GPIO_Init+0x1f8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d019      	beq.n	80046d4 <HAL_GPIO_Init+0x1f4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4b      	ldr	r2, [pc, #300]	; (80047d0 <HAL_GPIO_Init+0x2f0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a4a      	ldr	r2, [pc, #296]	; (80047d4 <HAL_GPIO_Init+0x2f4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00d      	beq.n	80046cc <HAL_GPIO_Init+0x1ec>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a49      	ldr	r2, [pc, #292]	; (80047d8 <HAL_GPIO_Init+0x2f8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <HAL_GPIO_Init+0x1e8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a48      	ldr	r2, [pc, #288]	; (80047dc <HAL_GPIO_Init+0x2fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_GPIO_Init+0x1e4>
 80046c0:	2305      	movs	r3, #5
 80046c2:	e00a      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046c4:	2306      	movs	r3, #6
 80046c6:	e008      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e006      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046cc:	2303      	movs	r3, #3
 80046ce:	e004      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e002      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_GPIO_Init+0x1fa>
 80046d8:	2300      	movs	r3, #0
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	f002 0203 	and.w	r2, r2, #3
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	4093      	lsls	r3, r2
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ea:	4937      	ldr	r1, [pc, #220]	; (80047c8 <HAL_GPIO_Init+0x2e8>)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f8:	4b39      	ldr	r3, [pc, #228]	; (80047e0 <HAL_GPIO_Init+0x300>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800471c:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_GPIO_Init+0x300>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004746:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_GPIO_Init+0x300>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <HAL_GPIO_Init+0x300>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	43db      	mvns	r3, r3
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HAL_GPIO_Init+0x300>)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3301      	adds	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f47f ae9d 	bne.w	80044f0 <HAL_GPIO_Init+0x10>
  }
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40010000 	.word	0x40010000
 80047cc:	48000400 	.word	0x48000400
 80047d0:	48000800 	.word	0x48000800
 80047d4:	48000c00 	.word	0x48000c00
 80047d8:	48001000 	.word	0x48001000
 80047dc:	48001400 	.word	0x48001400
 80047e0:	40010400 	.word	0x40010400

080047e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
 80047f0:	4613      	mov	r3, r2
 80047f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047f4:	787b      	ldrb	r3, [r7, #1]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004800:	e002      	b.n	8004808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d006      	beq.n	8004838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800482a:	4a05      	ldr	r2, [pc, #20]	; (8004840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f806 	bl	8004844 <HAL_GPIO_EXTI_Callback>
  }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40010400 	.word	0x40010400

08004844 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d141      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800486a:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d131      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004878:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	4a46      	ldr	r2, [pc, #280]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004888:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004890:	4a41      	ldr	r2, [pc, #260]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004898:	4b40      	ldr	r3, [pc, #256]	; (800499c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2232      	movs	r2, #50	; 0x32
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	4a3f      	ldr	r2, [pc, #252]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9b      	lsrs	r3, r3, #18
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	e002      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b6:	4b38      	ldr	r3, [pc, #224]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d102      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f2      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ca:	4b33      	ldr	r3, [pc, #204]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d158      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e057      	b.n	800498c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e2:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048ec:	e04d      	b.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d141      	bne.n	800497a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d131      	bne.n	8004968 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490a:	4a23      	ldr	r2, [pc, #140]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004910:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2232      	movs	r2, #50	; 0x32
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	0c9b      	lsrs	r3, r3, #18
 8004936:	3301      	adds	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800493a:	e002      	b.n	8004942 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3b01      	subs	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d102      	bne.n	8004956 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f2      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004962:	d112      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e011      	b.n	800498c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004978:	e007      	b.n	800498a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004988:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40007000 	.word	0x40007000
 800499c:	2000007c 	.word	0x2000007c
 80049a0:	431bde83 	.word	0x431bde83

080049a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b2:	6093      	str	r3, [r2, #8]
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40007000 	.word	0x40007000

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e306      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d075      	beq.n	8004ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e2:	4b97      	ldr	r3, [pc, #604]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ec:	4b94      	ldr	r3, [pc, #592]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d102      	bne.n	8004a02 <HAL_RCC_OscConfig+0x3e>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_OscConfig+0x44>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	4b8d      	ldr	r3, [pc, #564]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05b      	beq.n	8004acc <HAL_RCC_OscConfig+0x108>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d157      	bne.n	8004acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e2e1      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d106      	bne.n	8004a38 <HAL_RCC_OscConfig+0x74>
 8004a2a:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a84      	ldr	r2, [pc, #528]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e01d      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x98>
 8004a42:	4b7f      	ldr	r3, [pc, #508]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7e      	ldr	r2, [pc, #504]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7b      	ldr	r2, [pc, #492]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	4b78      	ldr	r3, [pc, #480]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a77      	ldr	r2, [pc, #476]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a74      	ldr	r2, [pc, #464]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fdac 	bl	80025d8 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fd fda8 	bl	80025d8 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e2a6      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0xc0>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fd98 	bl	80025d8 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fd94 	bl	80025d8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e292      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004abe:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0xe8>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ada:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ae4:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_OscConfig+0x136>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_OscConfig+0x13c>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11f      	bne.n	8004b40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b00:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x154>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e265      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b18:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	4946      	ldr	r1, [pc, #280]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b2c:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <HAL_RCC_OscConfig+0x280>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fc ff99 	bl	8001a68 <HAL_InitTick>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d043      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e251      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d023      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b48:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3c      	ldr	r2, [pc, #240]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fd40 	bl	80025d8 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fd3c 	bl	80025d8 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e23a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6e:	4b34      	ldr	r3, [pc, #208]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	492d      	ldr	r1, [pc, #180]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
 8004b8e:	e01a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004b96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fd1c 	bl	80025d8 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba4:	f7fd fd18 	bl	80025d8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e216      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1e0>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d041      	beq.n	8004c56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01c      	beq.n	8004c14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be0:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fd fcf5 	bl	80025d8 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fcf1 	bl	80025d8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1ef      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ef      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x22e>
 8004c12:	e020      	b.n	8004c56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <HAL_RCC_OscConfig+0x27c>)
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fd fcd8 	bl	80025d8 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c2a:	e00d      	b.n	8004c48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2c:	f7fd fcd4 	bl	80025d8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d906      	bls.n	8004c48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e1d2      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	20000080 	.word	0x20000080
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	4b8c      	ldr	r3, [pc, #560]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ea      	bne.n	8004c2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a6 	beq.w	8004db0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c64:	2300      	movs	r3, #0
 8004c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c68:	4b84      	ldr	r3, [pc, #528]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_RCC_OscConfig+0x2b4>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x2b6>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	4a7e      	ldr	r2, [pc, #504]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6593      	str	r3, [r2, #88]	; 0x58
 8004c8a:	4b7c      	ldr	r3, [pc, #496]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c96:	2301      	movs	r3, #1
 8004c98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9a:	4b79      	ldr	r3, [pc, #484]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d118      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca6:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a75      	ldr	r2, [pc, #468]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fd fc91 	bl	80025d8 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fd fc8d 	bl	80025d8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e18b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ccc:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <HAL_RCC_OscConfig+0x4bc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d108      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x32e>
 8004ce0:	4b66      	ldr	r3, [pc, #408]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	4a65      	ldr	r2, [pc, #404]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf0:	e024      	b.n	8004d3c <HAL_RCC_OscConfig+0x378>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b05      	cmp	r3, #5
 8004cf8:	d110      	bne.n	8004d1c <HAL_RCC_OscConfig+0x358>
 8004cfa:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	4a5e      	ldr	r2, [pc, #376]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d0a:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	4a5a      	ldr	r2, [pc, #360]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_OscConfig+0x378>
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	4a56      	ldr	r2, [pc, #344]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd fc48 	bl	80025d8 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fc44 	bl	80025d8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e140      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ed      	beq.n	8004d4c <HAL_RCC_OscConfig+0x388>
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fc31 	bl	80025d8 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fc2d 	bl	80025d8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e129      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ed      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d9e:	7ffb      	ldrb	r3, [r7, #31]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d03c      	beq.n	8004e36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fd fc00 	bl	80025d8 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ddc:	f7fd fbfc 	bl	80025d8 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0fa      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ef      	beq.n	8004ddc <HAL_RCC_OscConfig+0x418>
 8004dfc:	e01b      	b.n	8004e36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0e:	f7fd fbe3 	bl	80025d8 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e16:	f7fd fbdf 	bl	80025d8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e0dd      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ef      	bne.n	8004e16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80d1 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	f000 808b 	beq.w	8004f64 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d15e      	bne.n	8004f14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fd fbb9 	bl	80025d8 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e68:	e00c      	b.n	8004e84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd fbb5 	bl	80025d8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d905      	bls.n	8004e84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0b3      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ec      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b56      	ldr	r3, [pc, #344]	; (8004ff0 <HAL_RCC_OscConfig+0x62c>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6a11      	ldr	r1, [r2, #32]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004eaa:	0212      	lsls	r2, r2, #8
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004eb2:	0852      	lsrs	r2, r2, #1
 8004eb4:	3a01      	subs	r2, #1
 8004eb6:	0552      	lsls	r2, r2, #21
 8004eb8:	4311      	orrs	r1, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ebe:	0852      	lsrs	r2, r2, #1
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	0652      	lsls	r2, r2, #25
 8004ec4:	4311      	orrs	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004eca:	06d2      	lsls	r2, r2, #27
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4947      	ldr	r1, [pc, #284]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b45      	ldr	r3, [pc, #276]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a44      	ldr	r2, [pc, #272]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee0:	4b42      	ldr	r3, [pc, #264]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a41      	ldr	r2, [pc, #260]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fd fb74 	bl	80025d8 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd fb70 	bl	80025d8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f06:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x530>
 8004f12:	e066      	b.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a34      	ldr	r2, [pc, #208]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f20:	4b32      	ldr	r3, [pc, #200]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a31      	ldr	r2, [pc, #196]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f2c:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a2e      	ldr	r2, [pc, #184]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fb4c 	bl	80025d8 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fb48 	bl	80025d8 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e046      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f56:	4b25      	ldr	r3, [pc, #148]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x580>
 8004f62:	e03e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e039      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <HAL_RCC_OscConfig+0x628>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d12c      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d123      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11b      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d113      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	019f800c 	.word	0x019f800c

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e11e      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800500c:	4b91      	ldr	r3, [pc, #580]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d910      	bls.n	800503c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b8e      	ldr	r3, [pc, #568]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	498c      	ldr	r1, [pc, #560]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b8a      	ldr	r3, [pc, #552]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e106      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d073      	beq.n	8005130 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d129      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0f4      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005060:	f000 f9d0 	bl	8005404 <RCC_GetSysClockFreqFromPLLSource>
 8005064:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4a7c      	ldr	r2, [pc, #496]	; (800525c <HAL_RCC_ClockConfig+0x268>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d93f      	bls.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800506e:	4b7a      	ldr	r3, [pc, #488]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005082:	2b00      	cmp	r3, #0
 8005084:	d033      	beq.n	80050ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800508a:	2b00      	cmp	r3, #0
 800508c:	d12f      	bne.n	80050ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800508e:	4b72      	ldr	r3, [pc, #456]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	4a70      	ldr	r2, [pc, #448]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e024      	b.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0c6      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050bc:	4b66      	ldr	r3, [pc, #408]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0be      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050cc:	f000 f8ce 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4a61      	ldr	r2, [pc, #388]	; (800525c <HAL_RCC_ClockConfig+0x268>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d909      	bls.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	4a5d      	ldr	r2, [pc, #372]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b5a      	ldr	r3, [pc, #360]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4957      	ldr	r1, [pc, #348]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fd fa6a 	bl	80025d8 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7fd fa66 	bl	80025d8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e095      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	4b4e      	ldr	r3, [pc, #312]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 020c 	and.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	429a      	cmp	r2, r3
 800512e:	d1eb      	bne.n	8005108 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d023      	beq.n	8005184 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a42      	ldr	r2, [pc, #264]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800514e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005152:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005160:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005168:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800516a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800516e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005170:	4b39      	ldr	r3, [pc, #228]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4936      	ldr	r1, [pc, #216]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
 8005182:	e008      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d105      	bne.n	8005196 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800518a:	4b33      	ldr	r3, [pc, #204]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4a32      	ldr	r2, [pc, #200]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005194:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d21d      	bcs.n	80051e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f023 020f 	bic.w	r2, r3, #15
 80051ac:	4929      	ldr	r1, [pc, #164]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051b4:	f7fd fa10 	bl	80025d8 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051bc:	f7fd fa0c 	bl	80025d8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e03b      	b.n	800524a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1ed      	bne.n	80051bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4917      	ldr	r1, [pc, #92]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	490f      	ldr	r1, [pc, #60]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800521e:	f000 f825 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005222:	4602      	mov	r2, r0
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	490c      	ldr	r1, [pc, #48]	; (8005260 <HAL_RCC_ClockConfig+0x26c>)
 8005230:	5ccb      	ldrb	r3, [r1, r3]
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x270>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_RCC_ClockConfig+0x274>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fc fc10 	bl	8001a68 <HAL_InitTick>
 8005248:	4603      	mov	r3, r0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40022000 	.word	0x40022000
 8005258:	40021000 	.word	0x40021000
 800525c:	04c4b400 	.word	0x04c4b400
 8005260:	0800d178 	.word	0x0800d178
 8005264:	2000007c 	.word	0x2000007c
 8005268:	20000080 	.word	0x20000080

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b04      	cmp	r3, #4
 800527c:	d102      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e047      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d102      	bne.n	8005296 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005290:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e03e      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d136      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	3301      	adds	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d10c      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c0:	4a1a      	ldr	r2, [pc, #104]	; (800532c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ca:	68d2      	ldr	r2, [r2, #12]
 80052cc:	0a12      	lsrs	r2, r2, #8
 80052ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	617b      	str	r3, [r7, #20]
      break;
 80052d8:	e00c      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052da:	4a13      	ldr	r2, [pc, #76]	; (8005328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	0a12      	lsrs	r2, r2, #8
 80052e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
      break;
 80052f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	0e5b      	lsrs	r3, r3, #25
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	3301      	adds	r3, #1
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e001      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005314:	693b      	ldr	r3, [r7, #16]
}
 8005316:	4618      	mov	r0, r3
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	00f42400 	.word	0x00f42400
 800532c:	016e3600 	.word	0x016e3600

08005330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000007c 	.word	0x2000007c

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	0800d188 	.word	0x0800d188

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005378:	f7ff ffda 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0adb      	lsrs	r3, r3, #11
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCC_GetPCLK2Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	0800d188 	.word	0x0800d188

080053a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	220f      	movs	r2, #15
 80053ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053b0:	4b12      	ldr	r3, [pc, #72]	; (80053fc <HAL_RCC_GetClockConfig+0x5c>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0203 	and.w	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <HAL_RCC_GetClockConfig+0x5c>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <HAL_RCC_GetClockConfig+0x5c>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCC_GetClockConfig+0x5c>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	08db      	lsrs	r3, r3, #3
 80053da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <HAL_RCC_GetClockConfig+0x60>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	40022000 	.word	0x40022000

08005404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800540a:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005414:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d10c      	bne.n	8005442 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005428:	4a17      	ldr	r2, [pc, #92]	; (8005488 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005432:	68d2      	ldr	r2, [r2, #12]
 8005434:	0a12      	lsrs	r2, r2, #8
 8005436:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	617b      	str	r3, [r7, #20]
    break;
 8005440:	e00c      	b.n	800545c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	0a12      	lsrs	r2, r2, #8
 8005450:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	617b      	str	r3, [r7, #20]
    break;
 800545a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	0e5b      	lsrs	r3, r3, #25
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	3301      	adds	r3, #1
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005476:	687b      	ldr	r3, [r7, #4]
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40021000 	.word	0x40021000
 8005488:	016e3600 	.word	0x016e3600
 800548c:	00f42400 	.word	0x00f42400

08005490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005498:	2300      	movs	r3, #0
 800549a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800549c:	2300      	movs	r3, #0
 800549e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8098 	beq.w	80055de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10d      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	4a3f      	ldr	r2, [pc, #252]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d6:	2301      	movs	r3, #1
 80054d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054da:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a39      	ldr	r2, [pc, #228]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054e6:	f7fd f877 	bl	80025d8 <HAL_GetTick>
 80054ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ec:	e009      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ee:	f7fd f873 	bl	80025d8 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d902      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	74fb      	strb	r3, [r7, #19]
        break;
 8005500:	e005      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005502:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0ef      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d159      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005514:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01e      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	429a      	cmp	r2, r3
 800552e:	d019      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005530:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800553c:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800554c:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d016      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fd f833 	bl	80025d8 <HAL_GetTick>
 8005572:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005574:	e00b      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005576:	f7fd f82f 	bl	80025d8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	4293      	cmp	r3, r2
 8005586:	d902      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	74fb      	strb	r3, [r7, #19]
            break;
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0ec      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	4903      	ldr	r1, [pc, #12]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055b8:	e008      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055ba:	7cfb      	ldrb	r3, [r7, #19]
 80055bc:	74bb      	strb	r3, [r7, #18]
 80055be:	e005      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055cc:	7c7b      	ldrb	r3, [r7, #17]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d105      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d2:	4ba7      	ldr	r3, [pc, #668]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	4aa6      	ldr	r2, [pc, #664]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ea:	4ba1      	ldr	r3, [pc, #644]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f023 0203 	bic.w	r2, r3, #3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	499d      	ldr	r1, [pc, #628]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800560c:	4b98      	ldr	r3, [pc, #608]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 020c 	bic.w	r2, r3, #12
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	4995      	ldr	r1, [pc, #596]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800562e:	4b90      	ldr	r3, [pc, #576]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	498c      	ldr	r1, [pc, #560]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005650:	4b87      	ldr	r3, [pc, #540]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4984      	ldr	r1, [pc, #528]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005672:	4b7f      	ldr	r3, [pc, #508]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	497b      	ldr	r1, [pc, #492]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005694:	4b76      	ldr	r3, [pc, #472]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	4973      	ldr	r1, [pc, #460]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056b6:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	496a      	ldr	r1, [pc, #424]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056d8:	4b65      	ldr	r3, [pc, #404]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4962      	ldr	r1, [pc, #392]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056fa:	4b5d      	ldr	r3, [pc, #372]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	4959      	ldr	r1, [pc, #356]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800571c:	4b54      	ldr	r3, [pc, #336]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	4951      	ldr	r1, [pc, #324]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800573e:	4b4c      	ldr	r3, [pc, #304]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	4948      	ldr	r1, [pc, #288]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005760:	4b43      	ldr	r3, [pc, #268]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	4940      	ldr	r1, [pc, #256]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577e:	d105      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005780:	4b3b      	ldr	r3, [pc, #236]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a3a      	ldr	r2, [pc, #232]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800578a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005794:	2b00      	cmp	r3, #0
 8005796:	d015      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	4932      	ldr	r1, [pc, #200]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b6:	d105      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b8:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d015      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057d0:	4b27      	ldr	r3, [pc, #156]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	4924      	ldr	r1, [pc, #144]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f0:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	4916      	ldr	r1, [pc, #88]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005826:	d105      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4a10      	ldr	r2, [pc, #64]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005832:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d019      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	4908      	ldr	r1, [pc, #32]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800585e:	d109      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a02      	ldr	r2, [pc, #8]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586a:	60d3      	str	r3, [r2, #12]
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d015      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005880:	4b29      	ldr	r3, [pc, #164]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	4926      	ldr	r1, [pc, #152]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800589e:	d105      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a20      	ldr	r2, [pc, #128]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d015      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	4918      	ldr	r1, [pc, #96]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d105      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a12      	ldr	r2, [pc, #72]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	490a      	ldr	r1, [pc, #40]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800590e:	d105      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800591c:	7cbb      	ldrb	r3, [r7, #18]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e049      	b.n	80059d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc fbac 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fe90 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e054      	b.n	8005a9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <HAL_TIM_Base_Start_IT+0xd0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d022      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d01d      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <HAL_TIM_Base_Start_IT+0xe0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_TIM_Base_Start_IT+0x80>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d115      	bne.n	8005a88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xec>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	d015      	beq.n	8005a9a <HAL_TIM_Base_Start_IT+0xbe>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a74:	d011      	beq.n	8005a9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	e008      	b.n	8005a9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40013400 	.word	0x40013400
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40015000 	.word	0x40015000
 8005ac8:	00010007 	.word	0x00010007

08005acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e049      	b.n	8005b72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f841 	bl	8005b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f000 fdc0 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <HAL_TIM_PWM_Start+0x24>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e03c      	b.n	8005c2e <HAL_TIM_PWM_Start+0x9e>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d109      	bne.n	8005bce <HAL_TIM_PWM_Start+0x3e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	bf14      	ite	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	2300      	moveq	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	e02f      	b.n	8005c2e <HAL_TIM_PWM_Start+0x9e>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d109      	bne.n	8005be8 <HAL_TIM_PWM_Start+0x58>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e022      	b.n	8005c2e <HAL_TIM_PWM_Start+0x9e>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b0c      	cmp	r3, #12
 8005bec:	d109      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x72>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e015      	b.n	8005c2e <HAL_TIM_PWM_Start+0x9e>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d109      	bne.n	8005c1c <HAL_TIM_PWM_Start+0x8c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e008      	b.n	8005c2e <HAL_TIM_PWM_Start+0x9e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0a6      	b.n	8005d84 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0xb6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c44:	e023      	b.n	8005c8e <HAL_TIM_PWM_Start+0xfe>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xc6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c54:	e01b      	b.n	8005c8e <HAL_TIM_PWM_Start+0xfe>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0xd6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c64:	e013      	b.n	8005c8e <HAL_TIM_PWM_Start+0xfe>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0xe6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c74:	e00b      	b.n	8005c8e <HAL_TIM_PWM_Start+0xfe>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xf6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c84:	e003      	b.n	8005c8e <HAL_TIM_PWM_Start+0xfe>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 f9dc 	bl	8007054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3a      	ldr	r2, [pc, #232]	; (8005d8c <HAL_TIM_PWM_Start+0x1fc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x148>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a39      	ldr	r2, [pc, #228]	; (8005d90 <HAL_TIM_PWM_Start+0x200>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x148>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a37      	ldr	r2, [pc, #220]	; (8005d94 <HAL_TIM_PWM_Start+0x204>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x148>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a36      	ldr	r2, [pc, #216]	; (8005d98 <HAL_TIM_PWM_Start+0x208>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x148>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <HAL_TIM_PWM_Start+0x20c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x148>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a33      	ldr	r2, [pc, #204]	; (8005da0 <HAL_TIM_PWM_Start+0x210>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x14c>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_TIM_PWM_Start+0x14e>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <HAL_TIM_PWM_Start+0x1fc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d022      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a26      	ldr	r2, [pc, #152]	; (8005da4 <HAL_TIM_PWM_Start+0x214>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a24      	ldr	r2, [pc, #144]	; (8005da8 <HAL_TIM_PWM_Start+0x218>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a23      	ldr	r2, [pc, #140]	; (8005dac <HAL_TIM_PWM_Start+0x21c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_TIM_PWM_Start+0x200>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIM_PWM_Start+0x204>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1b2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	; (8005da0 <HAL_TIM_PWM_Start+0x210>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d115      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <HAL_TIM_PWM_Start+0x220>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d015      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x1f0>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5a:	d011      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	e008      	b.n	8005d80 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e000      	b.n	8005d82 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800
 8005da0:	40015000 	.word	0x40015000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	00010007 	.word	0x00010007

08005db4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f944 	bl	8007054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a40      	ldr	r2, [pc, #256]	; (8005ed4 <HAL_TIM_PWM_Stop+0x120>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d018      	beq.n	8005e08 <HAL_TIM_PWM_Stop+0x54>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3f      	ldr	r2, [pc, #252]	; (8005ed8 <HAL_TIM_PWM_Stop+0x124>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <HAL_TIM_PWM_Stop+0x54>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <HAL_TIM_PWM_Stop+0x128>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00e      	beq.n	8005e08 <HAL_TIM_PWM_Stop+0x54>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <HAL_TIM_PWM_Stop+0x12c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d009      	beq.n	8005e08 <HAL_TIM_PWM_Stop+0x54>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3a      	ldr	r2, [pc, #232]	; (8005ee4 <HAL_TIM_PWM_Stop+0x130>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_TIM_PWM_Stop+0x54>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a39      	ldr	r2, [pc, #228]	; (8005ee8 <HAL_TIM_PWM_Stop+0x134>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d101      	bne.n	8005e0c <HAL_TIM_PWM_Stop+0x58>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <HAL_TIM_PWM_Stop+0x5a>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d017      	beq.n	8005e42 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <HAL_TIM_PWM_Stop+0x8e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	f244 4344 	movw	r3, #17476	; 0x4444
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_PWM_Stop+0x8e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a1a      	ldr	r2, [r3, #32]
 8005e48:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10f      	bne.n	8005e72 <HAL_TIM_PWM_Stop+0xbe>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a1a      	ldr	r2, [r3, #32]
 8005e58:	f244 4344 	movw	r3, #17476	; 0x4444
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d107      	bne.n	8005e72 <HAL_TIM_PWM_Stop+0xbe>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Stop+0xce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e80:	e023      	b.n	8005eca <HAL_TIM_PWM_Stop+0x116>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_PWM_Stop+0xde>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e90:	e01b      	b.n	8005eca <HAL_TIM_PWM_Stop+0x116>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Stop+0xee>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea0:	e013      	b.n	8005eca <HAL_TIM_PWM_Stop+0x116>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Stop+0xfe>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eb0:	e00b      	b.n	8005eca <HAL_TIM_PWM_Stop+0x116>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Stop+0x10e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec0:	e003      	b.n	8005eca <HAL_TIM_PWM_Stop+0x116>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800
 8005ee8:	40015000 	.word	0x40015000

08005eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0202 	mvn.w	r2, #2
 8005f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb90 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb82 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fb93 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0204 	mvn.w	r2, #4
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb66 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fb58 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb69 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0208 	mvn.w	r2, #8
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fb3c 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fb2e 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb3f 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b10      	cmp	r3, #16
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0210 	mvn.w	r2, #16
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2208      	movs	r2, #8
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fb12 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb04 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb15 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10e      	bne.n	8006070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d107      	bne.n	8006070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0201 	mvn.w	r2, #1
 8006068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fb fae6 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	2b80      	cmp	r3, #128	; 0x80
 800607c:	d10e      	bne.n	800609c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	2b80      	cmp	r3, #128	; 0x80
 800608a:	d107      	bne.n	800609c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fb35 	bl	8007706 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d10e      	bne.n	80060ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b80      	cmp	r3, #128	; 0x80
 80060b8:	d107      	bne.n	80060ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fb28 	bl	800771a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	d10e      	bne.n	80060f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d107      	bne.n	80060f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fac3 	bl	800667c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b20      	cmp	r3, #32
 8006102:	d10e      	bne.n	8006122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b20      	cmp	r3, #32
 8006110:	d107      	bne.n	8006122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f06f 0220 	mvn.w	r2, #32
 800611a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fae8 	bl	80076f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006130:	d10f      	bne.n	8006152 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800613c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006140:	d107      	bne.n	8006152 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800614a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 faee 	bl	800772e <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800615c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006160:	d10f      	bne.n	8006182 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800616c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006170:	d107      	bne.n	8006182 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800617a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fae0 	bl	8007742 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006190:	d10f      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80061aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fad2 	bl	8007756 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c0:	d10f      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061d0:	d107      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80061da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fac4 	bl	800776a <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006206:	2302      	movs	r3, #2
 8006208:	e0ff      	b.n	800640a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b14      	cmp	r3, #20
 8006216:	f200 80f0 	bhi.w	80063fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006275 	.word	0x08006275
 8006224:	080063fb 	.word	0x080063fb
 8006228:	080063fb 	.word	0x080063fb
 800622c:	080063fb 	.word	0x080063fb
 8006230:	080062b5 	.word	0x080062b5
 8006234:	080063fb 	.word	0x080063fb
 8006238:	080063fb 	.word	0x080063fb
 800623c:	080063fb 	.word	0x080063fb
 8006240:	080062f7 	.word	0x080062f7
 8006244:	080063fb 	.word	0x080063fb
 8006248:	080063fb 	.word	0x080063fb
 800624c:	080063fb 	.word	0x080063fb
 8006250:	08006337 	.word	0x08006337
 8006254:	080063fb 	.word	0x080063fb
 8006258:	080063fb 	.word	0x080063fb
 800625c:	080063fb 	.word	0x080063fb
 8006260:	08006379 	.word	0x08006379
 8006264:	080063fb 	.word	0x080063fb
 8006268:	080063fb 	.word	0x080063fb
 800626c:	080063fb 	.word	0x080063fb
 8006270:	080063b9 	.word	0x080063b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fab0 	bl	80067e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6999      	ldr	r1, [r3, #24]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	619a      	str	r2, [r3, #24]
      break;
 80062b2:	e0a5      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fb2a 	bl	8006914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6999      	ldr	r1, [r3, #24]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	619a      	str	r2, [r3, #24]
      break;
 80062f4:	e084      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fb9d 	bl	8006a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0208 	orr.w	r2, r2, #8
 8006310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0204 	bic.w	r2, r2, #4
 8006320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69d9      	ldr	r1, [r3, #28]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	61da      	str	r2, [r3, #28]
      break;
 8006334:	e064      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fc0f 	bl	8006b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69d9      	ldr	r1, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	021a      	lsls	r2, r3, #8
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	61da      	str	r2, [r3, #28]
      break;
 8006376:	e043      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fc82 	bl	8006c88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80063b6:	e023      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fccc 	bl	8006d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	021a      	lsls	r2, r3, #8
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80063f8:	e002      	b.n	8006400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
      break;
 80063fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIM_ConfigClockSource+0x1c>
 800642c:	2302      	movs	r3, #2
 800642e:	e0f6      	b.n	800661e <HAL_TIM_ConfigClockSource+0x20a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800644e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6f      	ldr	r2, [pc, #444]	; (8006628 <HAL_TIM_ConfigClockSource+0x214>)
 800646a:	4293      	cmp	r3, r2
 800646c:	f000 80c1 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006470:	4a6d      	ldr	r2, [pc, #436]	; (8006628 <HAL_TIM_ConfigClockSource+0x214>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f200 80c6 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006478:	4a6c      	ldr	r2, [pc, #432]	; (800662c <HAL_TIM_ConfigClockSource+0x218>)
 800647a:	4293      	cmp	r3, r2
 800647c:	f000 80b9 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006480:	4a6a      	ldr	r2, [pc, #424]	; (800662c <HAL_TIM_ConfigClockSource+0x218>)
 8006482:	4293      	cmp	r3, r2
 8006484:	f200 80be 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006488:	4a69      	ldr	r2, [pc, #420]	; (8006630 <HAL_TIM_ConfigClockSource+0x21c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	f000 80b1 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006490:	4a67      	ldr	r2, [pc, #412]	; (8006630 <HAL_TIM_ConfigClockSource+0x21c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	f200 80b6 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006498:	4a66      	ldr	r2, [pc, #408]	; (8006634 <HAL_TIM_ConfigClockSource+0x220>)
 800649a:	4293      	cmp	r3, r2
 800649c:	f000 80a9 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 80064a0:	4a64      	ldr	r2, [pc, #400]	; (8006634 <HAL_TIM_ConfigClockSource+0x220>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	f200 80ae 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 80064a8:	4a63      	ldr	r2, [pc, #396]	; (8006638 <HAL_TIM_ConfigClockSource+0x224>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	f000 80a1 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 80064b0:	4a61      	ldr	r2, [pc, #388]	; (8006638 <HAL_TIM_ConfigClockSource+0x224>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	f200 80a6 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 80064b8:	4a60      	ldr	r2, [pc, #384]	; (800663c <HAL_TIM_ConfigClockSource+0x228>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	f000 8099 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 80064c0:	4a5e      	ldr	r2, [pc, #376]	; (800663c <HAL_TIM_ConfigClockSource+0x228>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	f200 809e 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 80064c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064cc:	f000 8091 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 80064d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064d4:	f200 8096 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 80064d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064dc:	f000 8089 	beq.w	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 80064e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e4:	f200 808e 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 80064e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ec:	d03e      	beq.n	800656c <HAL_TIM_ConfigClockSource+0x158>
 80064ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f2:	f200 8087 	bhi.w	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 80064f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fa:	f000 8086 	beq.w	800660a <HAL_TIM_ConfigClockSource+0x1f6>
 80064fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006502:	d87f      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006504:	2b70      	cmp	r3, #112	; 0x70
 8006506:	d01a      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x12a>
 8006508:	2b70      	cmp	r3, #112	; 0x70
 800650a:	d87b      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 800650c:	2b60      	cmp	r3, #96	; 0x60
 800650e:	d050      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x19e>
 8006510:	2b60      	cmp	r3, #96	; 0x60
 8006512:	d877      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006514:	2b50      	cmp	r3, #80	; 0x50
 8006516:	d03c      	beq.n	8006592 <HAL_TIM_ConfigClockSource+0x17e>
 8006518:	2b50      	cmp	r3, #80	; 0x50
 800651a:	d873      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d058      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0x1be>
 8006520:	2b40      	cmp	r3, #64	; 0x40
 8006522:	d86f      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006524:	2b30      	cmp	r3, #48	; 0x30
 8006526:	d064      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006528:	2b30      	cmp	r3, #48	; 0x30
 800652a:	d86b      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d060      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006530:	2b20      	cmp	r3, #32
 8006532:	d867      	bhi.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d05c      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006538:	2b10      	cmp	r3, #16
 800653a:	d05a      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x1de>
 800653c:	e062      	b.n	8006604 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6899      	ldr	r1, [r3, #8]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f000 fd61 	bl	8007014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	609a      	str	r2, [r3, #8]
      break;
 800656a:	e04f      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6899      	ldr	r1, [r3, #8]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f000 fd4a 	bl	8007014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800658e:	609a      	str	r2, [r3, #8]
      break;
 8006590:	e03c      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6859      	ldr	r1, [r3, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	461a      	mov	r2, r3
 80065a0:	f000 fcbc 	bl	8006f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2150      	movs	r1, #80	; 0x50
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fd15 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 80065b0:	e02c      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	461a      	mov	r2, r3
 80065c0:	f000 fcdb 	bl	8006f7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2160      	movs	r1, #96	; 0x60
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fd05 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 80065d0:	e01c      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 fc9c 	bl	8006f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2140      	movs	r1, #64	; 0x40
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fcf5 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 80065f0:	e00c      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f000 fcec 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006602:	e003      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
      break;
 8006608:	e000      	b.n	800660c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800660a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	00100070 	.word	0x00100070
 800662c:	00100060 	.word	0x00100060
 8006630:	00100050 	.word	0x00100050
 8006634:	00100040 	.word	0x00100040
 8006638:	00100030 	.word	0x00100030
 800663c:	00100020 	.word	0x00100020

08006640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a46      	ldr	r2, [pc, #280]	; (80067bc <TIM_Base_SetConfig+0x12c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d017      	beq.n	80066d8 <TIM_Base_SetConfig+0x48>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ae:	d013      	beq.n	80066d8 <TIM_Base_SetConfig+0x48>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a43      	ldr	r2, [pc, #268]	; (80067c0 <TIM_Base_SetConfig+0x130>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00f      	beq.n	80066d8 <TIM_Base_SetConfig+0x48>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a42      	ldr	r2, [pc, #264]	; (80067c4 <TIM_Base_SetConfig+0x134>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00b      	beq.n	80066d8 <TIM_Base_SetConfig+0x48>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a41      	ldr	r2, [pc, #260]	; (80067c8 <TIM_Base_SetConfig+0x138>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <TIM_Base_SetConfig+0x48>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a40      	ldr	r2, [pc, #256]	; (80067cc <TIM_Base_SetConfig+0x13c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_Base_SetConfig+0x48>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3f      	ldr	r2, [pc, #252]	; (80067d0 <TIM_Base_SetConfig+0x140>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d108      	bne.n	80066ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a33      	ldr	r2, [pc, #204]	; (80067bc <TIM_Base_SetConfig+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d023      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d01f      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a30      	ldr	r2, [pc, #192]	; (80067c0 <TIM_Base_SetConfig+0x130>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d01b      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a2f      	ldr	r2, [pc, #188]	; (80067c4 <TIM_Base_SetConfig+0x134>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d017      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <TIM_Base_SetConfig+0x138>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2d      	ldr	r2, [pc, #180]	; (80067cc <TIM_Base_SetConfig+0x13c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00f      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <TIM_Base_SetConfig+0x144>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00b      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2c      	ldr	r2, [pc, #176]	; (80067d8 <TIM_Base_SetConfig+0x148>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d007      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2b      	ldr	r2, [pc, #172]	; (80067dc <TIM_Base_SetConfig+0x14c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_Base_SetConfig+0xaa>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <TIM_Base_SetConfig+0x140>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d108      	bne.n	800674c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <TIM_Base_SetConfig+0x12c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <TIM_Base_SetConfig+0x110>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a14      	ldr	r2, [pc, #80]	; (80067cc <TIM_Base_SetConfig+0x13c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00f      	beq.n	80067a0 <TIM_Base_SetConfig+0x110>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <TIM_Base_SetConfig+0x144>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x110>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <TIM_Base_SetConfig+0x148>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x110>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a12      	ldr	r2, [pc, #72]	; (80067dc <TIM_Base_SetConfig+0x14c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x110>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <TIM_Base_SetConfig+0x140>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d103      	bne.n	80067a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	615a      	str	r2, [r3, #20]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800
 80067c8:	40000c00 	.word	0x40000c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40015000 	.word	0x40015000
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800

080067e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 0302 	bic.w	r3, r3, #2
 800682c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a30      	ldr	r2, [pc, #192]	; (80068fc <TIM_OC1_SetConfig+0x11c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d013      	beq.n	8006868 <TIM_OC1_SetConfig+0x88>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a2f      	ldr	r2, [pc, #188]	; (8006900 <TIM_OC1_SetConfig+0x120>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_OC1_SetConfig+0x88>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a2e      	ldr	r2, [pc, #184]	; (8006904 <TIM_OC1_SetConfig+0x124>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_OC1_SetConfig+0x88>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <TIM_OC1_SetConfig+0x128>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_OC1_SetConfig+0x88>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a2c      	ldr	r2, [pc, #176]	; (800690c <TIM_OC1_SetConfig+0x12c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_OC1_SetConfig+0x88>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a2b      	ldr	r2, [pc, #172]	; (8006910 <TIM_OC1_SetConfig+0x130>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d10c      	bne.n	8006882 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f023 0308 	bic.w	r3, r3, #8
 800686e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <TIM_OC1_SetConfig+0x11c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <TIM_OC1_SetConfig+0xd2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1c      	ldr	r2, [pc, #112]	; (8006900 <TIM_OC1_SetConfig+0x120>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00f      	beq.n	80068b2 <TIM_OC1_SetConfig+0xd2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <TIM_OC1_SetConfig+0x124>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_OC1_SetConfig+0xd2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <TIM_OC1_SetConfig+0x128>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_OC1_SetConfig+0xd2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <TIM_OC1_SetConfig+0x12c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC1_SetConfig+0xd2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <TIM_OC1_SetConfig+0x130>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40013400 	.word	0x40013400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800
 8006910:	40015000 	.word	0x40015000

08006914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f023 0210 	bic.w	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0320 	bic.w	r3, r3, #32
 8006962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <TIM_OC2_SetConfig+0x110>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <TIM_OC2_SetConfig+0x74>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a2b      	ldr	r2, [pc, #172]	; (8006a28 <TIM_OC2_SetConfig+0x114>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_OC2_SetConfig+0x74>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a2a      	ldr	r2, [pc, #168]	; (8006a2c <TIM_OC2_SetConfig+0x118>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d10d      	bne.n	80069a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1f      	ldr	r2, [pc, #124]	; (8006a24 <TIM_OC2_SetConfig+0x110>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d013      	beq.n	80069d4 <TIM_OC2_SetConfig+0xc0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <TIM_OC2_SetConfig+0x114>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <TIM_OC2_SetConfig+0xc0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a1e      	ldr	r2, [pc, #120]	; (8006a30 <TIM_OC2_SetConfig+0x11c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_OC2_SetConfig+0xc0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <TIM_OC2_SetConfig+0x120>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_OC2_SetConfig+0xc0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <TIM_OC2_SetConfig+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_OC2_SetConfig+0xc0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <TIM_OC2_SetConfig+0x118>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d113      	bne.n	80069fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40013400 	.word	0x40013400
 8006a2c:	40015000 	.word	0x40015000
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40014400 	.word	0x40014400
 8006a38:	40014800 	.word	0x40014800

08006a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a2b      	ldr	r2, [pc, #172]	; (8006b48 <TIM_OC3_SetConfig+0x10c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d007      	beq.n	8006aae <TIM_OC3_SetConfig+0x72>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <TIM_OC3_SetConfig+0x110>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_OC3_SetConfig+0x72>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <TIM_OC3_SetConfig+0x114>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10d      	bne.n	8006aca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <TIM_OC3_SetConfig+0x10c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <TIM_OC3_SetConfig+0xbe>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <TIM_OC3_SetConfig+0x110>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00f      	beq.n	8006afa <TIM_OC3_SetConfig+0xbe>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <TIM_OC3_SetConfig+0x118>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_OC3_SetConfig+0xbe>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <TIM_OC3_SetConfig+0x11c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_OC3_SetConfig+0xbe>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <TIM_OC3_SetConfig+0x120>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_OC3_SetConfig+0xbe>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <TIM_OC3_SetConfig+0x114>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d113      	bne.n	8006b22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40015000 	.word	0x40015000
 8006b54:	40014000 	.word	0x40014000
 8006b58:	40014400 	.word	0x40014400
 8006b5c:	40014800 	.word	0x40014800

08006b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	031b      	lsls	r3, r3, #12
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <TIM_OC4_SetConfig+0x110>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x74>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <TIM_OC4_SetConfig+0x114>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x74>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <TIM_OC4_SetConfig+0x118>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d10d      	bne.n	8006bf0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	031b      	lsls	r3, r3, #12
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <TIM_OC4_SetConfig+0x110>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <TIM_OC4_SetConfig+0xc0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <TIM_OC4_SetConfig+0x114>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00f      	beq.n	8006c20 <TIM_OC4_SetConfig+0xc0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <TIM_OC4_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_OC4_SetConfig+0xc0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <TIM_OC4_SetConfig+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_OC4_SetConfig+0xc0>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <TIM_OC4_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC4_SetConfig+0xc0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <TIM_OC4_SetConfig+0x118>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d113      	bne.n	8006c48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	019b      	lsls	r3, r3, #6
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	019b      	lsls	r3, r3, #6
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40013400 	.word	0x40013400
 8006c78:	40015000 	.word	0x40015000
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40014800 	.word	0x40014800

08006c88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <TIM_OC5_SetConfig+0xbc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <TIM_OC5_SetConfig+0x82>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <TIM_OC5_SetConfig+0xc0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_OC5_SetConfig+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <TIM_OC5_SetConfig+0xc4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_OC5_SetConfig+0x82>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <TIM_OC5_SetConfig+0xc8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_OC5_SetConfig+0x82>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <TIM_OC5_SetConfig+0xcc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC5_SetConfig+0x82>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_OC5_SetConfig+0xd0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d109      	bne.n	8006d1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	621a      	str	r2, [r3, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40013400 	.word	0x40013400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800
 8006d58:	40015000 	.word	0x40015000

08006d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	051b      	lsls	r3, r3, #20
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <TIM_OC6_SetConfig+0xc0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <TIM_OC6_SetConfig+0x84>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <TIM_OC6_SetConfig+0xc4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00f      	beq.n	8006de0 <TIM_OC6_SetConfig+0x84>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <TIM_OC6_SetConfig+0xc8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00b      	beq.n	8006de0 <TIM_OC6_SetConfig+0x84>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <TIM_OC6_SetConfig+0xcc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <TIM_OC6_SetConfig+0x84>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <TIM_OC6_SetConfig+0xd0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_OC6_SetConfig+0x84>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <TIM_OC6_SetConfig+0xd4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d109      	bne.n	8006df4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006de6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	40015000 	.word	0x40015000

08006e34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <TIM_TI1_SetConfig+0xcc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01b      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e68:	d017      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <TIM_TI1_SetConfig+0xd0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a24      	ldr	r2, [pc, #144]	; (8006f08 <TIM_TI1_SetConfig+0xd4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4a23      	ldr	r2, [pc, #140]	; (8006f0c <TIM_TI1_SetConfig+0xd8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4a22      	ldr	r2, [pc, #136]	; (8006f10 <TIM_TI1_SetConfig+0xdc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <TIM_TI1_SetConfig+0xe0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_TI1_SetConfig+0x66>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a20      	ldr	r2, [pc, #128]	; (8006f18 <TIM_TI1_SetConfig+0xe4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d101      	bne.n	8006e9e <TIM_TI1_SetConfig+0x6a>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <TIM_TI1_SetConfig+0x6c>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e003      	b.n	8006ebe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f023 030a 	bic.w	r3, r3, #10
 8006ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 030a 	and.w	r3, r3, #10
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800
 8006f0c:	40000c00 	.word	0x40000c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40015000 	.word	0x40015000

08006f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f023 030a 	bic.w	r3, r3, #10
 8006f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0210 	bic.w	r2, r3, #16
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	031b      	lsls	r3, r3, #12
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f043 0307 	orr.w	r3, r3, #7
 8007000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800702e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	431a      	orrs	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2201      	movs	r2, #1
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	43db      	mvns	r3, r3
 8007076:	401a      	ands	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	fa01 f303 	lsl.w	r3, r1, r3
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b08a      	sub	sp, #40	; 0x28
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e0a0      	b.n	80071f4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb f830 	bl	800212c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3304      	adds	r3, #4
 80070dc:	4619      	mov	r1, r3
 80070de:	4610      	mov	r0, r2
 80070e0:	f7ff fad6 	bl	8006690 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	6819      	ldr	r1, [r3, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2203      	movs	r2, #3
 80070f2:	f7ff fe9f 	bl	8006e34 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699a      	ldr	r2, [r3, #24]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 020c 	bic.w	r2, r2, #12
 8007104:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6999      	ldr	r1, [r3, #24]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007126:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800714a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6812      	ldr	r2, [r2, #0]
 8007156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800715a:	f023 0307 	bic.w	r3, r3, #7
 800715e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0204 	orr.w	r2, r2, #4
 800716e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007174:	2300      	movs	r3, #0
 8007176:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007178:	2370      	movs	r3, #112	; 0x70
 800717a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800717c:	2300      	movs	r3, #0
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f107 020c 	add.w	r2, r7, #12
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fbbb 	bl	8006914 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80071c0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3728      	adds	r7, #40	; 0x28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_TIMEx_PWMN_Start+0x24>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	bf14      	ite	ne
 8007218:	2301      	movne	r3, #1
 800721a:	2300      	moveq	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	e022      	b.n	8007266 <HAL_TIMEx_PWMN_Start+0x6a>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b04      	cmp	r3, #4
 8007224:	d109      	bne.n	800723a <HAL_TIMEx_PWMN_Start+0x3e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	e015      	b.n	8007266 <HAL_TIMEx_PWMN_Start+0x6a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d109      	bne.n	8007254 <HAL_TIMEx_PWMN_Start+0x58>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	e008      	b.n	8007266 <HAL_TIMEx_PWMN_Start+0x6a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e073      	b.n	8007356 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <HAL_TIMEx_PWMN_Start+0x82>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800727c:	e013      	b.n	80072a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b04      	cmp	r3, #4
 8007282:	d104      	bne.n	800728e <HAL_TIMEx_PWMN_Start+0x92>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800728c:	e00b      	b.n	80072a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d104      	bne.n	800729e <HAL_TIMEx_PWMN_Start+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800729c:	e003      	b.n	80072a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2204      	movs	r2, #4
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fa65 	bl	800777e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a25      	ldr	r2, [pc, #148]	; (8007360 <HAL_TIMEx_PWMN_Start+0x164>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d01d      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a21      	ldr	r2, [pc, #132]	; (8007364 <HAL_TIMEx_PWMN_Start+0x168>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a20      	ldr	r2, [pc, #128]	; (8007368 <HAL_TIMEx_PWMN_Start+0x16c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1e      	ldr	r2, [pc, #120]	; (800736c <HAL_TIMEx_PWMN_Start+0x170>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <HAL_TIMEx_PWMN_Start+0x174>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_TIMEx_PWMN_Start+0x178>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_TIMEx_PWMN_Start+0x118>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d115      	bne.n	8007340 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	4b18      	ldr	r3, [pc, #96]	; (800737c <HAL_TIMEx_PWMN_Start+0x180>)
 800731c:	4013      	ands	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b06      	cmp	r3, #6
 8007324:	d015      	beq.n	8007352 <HAL_TIMEx_PWMN_Start+0x156>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732c:	d011      	beq.n	8007352 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0201 	orr.w	r2, r2, #1
 800733c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733e:	e008      	b.n	8007352 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e000      	b.n	8007354 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40000c00 	.word	0x40000c00
 8007370:	40013400 	.word	0x40013400
 8007374:	40014000 	.word	0x40014000
 8007378:	40015000 	.word	0x40015000
 800737c:	00010007 	.word	0x00010007

08007380 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2200      	movs	r2, #0
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f9f3 	bl	800777e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	f241 1311 	movw	r3, #4369	; 0x1111
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10f      	bne.n	80073c8 <HAL_TIMEx_PWMN_Stop+0x48>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	f244 4344 	movw	r3, #17476	; 0x4444
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d107      	bne.n	80073c8 <HAL_TIMEx_PWMN_Stop+0x48>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10f      	bne.n	80073f8 <HAL_TIMEx_PWMN_Stop+0x78>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a1a      	ldr	r2, [r3, #32]
 80073de:	f244 4344 	movw	r3, #17476	; 0x4444
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d107      	bne.n	80073f8 <HAL_TIMEx_PWMN_Stop+0x78>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d104      	bne.n	8007408 <HAL_TIMEx_PWMN_Stop+0x88>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007406:	e013      	b.n	8007430 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b04      	cmp	r3, #4
 800740c:	d104      	bne.n	8007418 <HAL_TIMEx_PWMN_Stop+0x98>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007416:	e00b      	b.n	8007430 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b08      	cmp	r3, #8
 800741c:	d104      	bne.n	8007428 <HAL_TIMEx_PWMN_Stop+0xa8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007426:	e003      	b.n	8007430 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007450:	2302      	movs	r3, #2
 8007452:	e074      	b.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a34      	ldr	r2, [pc, #208]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a33      	ldr	r2, [pc, #204]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a31      	ldr	r2, [pc, #196]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d108      	bne.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a21      	ldr	r2, [pc, #132]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d4:	d01d      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a15      	ldr	r2, [pc, #84]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a18      	ldr	r2, [pc, #96]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a11      	ldr	r2, [pc, #68]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d10c      	bne.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4313      	orrs	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40013400 	.word	0x40013400
 8007554:	40015000 	.word	0x40015000
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40014000 	.word	0x40014000

08007568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007580:	2302      	movs	r3, #2
 8007582:	e096      	b.n	80076b2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a2f      	ldr	r2, [pc, #188]	; (80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d009      	beq.n	800761c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a2d      	ldr	r2, [pc, #180]	; (80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d106      	bne.n	800762a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a24      	ldr	r2, [pc, #144]	; (80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a22      	ldr	r2, [pc, #136]	; (80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d12b      	bne.n	80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	051b      	lsls	r3, r3, #20
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d106      	bne.n	80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	40015000 	.word	0x40015000

080076cc <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2204      	movs	r2, #4
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1a      	ldr	r2, [r3, #32]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	43db      	mvns	r3, r3
 80077a0:	401a      	ands	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e042      	b.n	8007860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7fa fdff 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2224      	movs	r2, #36	; 0x24
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0201 	bic.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fc50 	bl	80080b0 <UART_SetConfig>
 8007810:	4603      	mov	r3, r0
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e022      	b.n	8007860 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 ff40 	bl	80086a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 ffc7 	bl	80087ec <UART_CheckIdleState>
 800785e:	4603      	mov	r3, r0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08a      	sub	sp, #40	; 0x28
 800786c:	af02      	add	r7, sp, #8
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787e:	2b20      	cmp	r3, #32
 8007880:	f040 8083 	bne.w	800798a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_UART_Transmit+0x28>
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e07b      	b.n	800798c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_UART_Transmit+0x3a>
 800789e:	2302      	movs	r3, #2
 80078a0:	e074      	b.n	800798c <HAL_UART_Transmit+0x124>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2221      	movs	r2, #33	; 0x21
 80078b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ba:	f7fa fe8d 	bl	80025d8 <HAL_GetTick>
 80078be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d8:	d108      	bne.n	80078ec <HAL_UART_Transmit+0x84>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e003      	b.n	80078f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80078fc:	e02c      	b.n	8007958 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2200      	movs	r2, #0
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 ffba 	bl	8008882 <UART_WaitOnFlagUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e039      	b.n	800798c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	3302      	adds	r3, #2
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e007      	b.n	8007946 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1cc      	bne.n	80078fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	2140      	movs	r1, #64	; 0x40
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 ff87 	bl	8008882 <UART_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e006      	b.n	800798c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e000      	b.n	800798c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800798a:	2302      	movs	r3, #2
  }
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	d142      	bne.n	8007a32 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_UART_Receive_IT+0x24>
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e03b      	b.n	8007a34 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_UART_Receive_IT+0x36>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e034      	b.n	8007a34 <HAL_UART_Receive_IT+0xa0>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <HAL_UART_Receive_IT+0xa8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01f      	beq.n	8007a22 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d018      	beq.n	8007a22 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	613b      	str	r3, [r7, #16]
   return(result);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	623b      	str	r3, [r7, #32]
 8007a10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	69f9      	ldr	r1, [r7, #28]
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e6      	bne.n	80079f0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	461a      	mov	r2, r3
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 fff3 	bl	8008a14 <UART_Start_Receive_IT>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	e000      	b.n	8007a34 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a32:	2302      	movs	r3, #2
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3728      	adds	r7, #40	; 0x28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40008000 	.word	0x40008000

08007a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b0ba      	sub	sp, #232	; 0xe8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a6e:	4013      	ands	r3, r2
 8007a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d015      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 82d6 	beq.w	8008056 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
      }
      return;
 8007ab2:	e2d0      	b.n	8008056 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 811f 	beq.w	8007cfc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007abe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ac2:	4b8b      	ldr	r3, [pc, #556]	; (8007cf0 <HAL_UART_IRQHandler+0x2b0>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ace:	4b89      	ldr	r3, [pc, #548]	; (8007cf4 <HAL_UART_IRQHandler+0x2b4>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8112 	beq.w	8007cfc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d011      	beq.n	8007b08 <HAL_UART_IRQHandler+0xc8>
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2201      	movs	r2, #1
 8007af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afe:	f043 0201 	orr.w	r2, r3, #1
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d011      	beq.n	8007b38 <HAL_UART_IRQHandler+0xf8>
 8007b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2202      	movs	r2, #2
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2e:	f043 0204 	orr.w	r2, r3, #4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d011      	beq.n	8007b68 <HAL_UART_IRQHandler+0x128>
 8007b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2204      	movs	r2, #4
 8007b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b5e:	f043 0202 	orr.w	r2, r3, #2
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d017      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b84:	4b5a      	ldr	r3, [pc, #360]	; (8007cf0 <HAL_UART_IRQHandler+0x2b0>)
 8007b86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2208      	movs	r2, #8
 8007b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9a:	f043 0208 	orr.w	r2, r3, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x196>
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00c      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 823c 	beq.w	800805a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d013      	beq.n	8007c16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d005      	beq.n	8007c3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d04f      	beq.n	8007cda <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 f814 	bl	8008c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d141      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1d9      	bne.n	8007c4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca6:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <HAL_UART_IRQHandler+0x2b8>)
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fc fa9d 	bl	80041ee <HAL_DMA_Abort_IT>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d017      	beq.n	8007cea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e00f      	b.n	8007cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9da 	bl	8008084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e00b      	b.n	8007cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f9d6 	bl	8008084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	e007      	b.n	8007cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9d2 	bl	8008084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007ce8:	e1b7      	b.n	800805a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cea:	bf00      	nop
    return;
 8007cec:	e1b5      	b.n	800805a <HAL_UART_IRQHandler+0x61a>
 8007cee:	bf00      	nop
 8007cf0:	10000001 	.word	0x10000001
 8007cf4:	04000120 	.word	0x04000120
 8007cf8:	08008d35 	.word	0x08008d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	f040 814a 	bne.w	8007f9a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8143 	beq.w	8007f9a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 813c 	beq.w	8007f9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2210      	movs	r2, #16
 8007d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	f040 80b5 	bne.w	8007ea4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8187 	beq.w	800805e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	f080 817f 	bcs.w	800805e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 8086 	bne.w	8007e88 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007daa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1da      	bne.n	8007d7c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e1      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3308      	adds	r3, #8
 8007e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e3      	bne.n	8007e02 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e58:	f023 0310 	bic.w	r3, r3, #16
 8007e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e4      	bne.n	8007e48 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fc f95a 	bl	800413c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f8fb 	bl	8008098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ea2:	e0dc      	b.n	800805e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80ce 	beq.w	8008062 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007ec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80c9 	beq.w	8008062 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e4      	bne.n	8007ed0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	623b      	str	r3, [r7, #32]
   return(result);
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f1c:	f023 0301 	bic.w	r3, r3, #1
 8007f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e1      	bne.n	8007f06 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0310 	bic.w	r3, r3, #16
 8007f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	617b      	str	r3, [r7, #20]
   return(result);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e4      	bne.n	8007f56 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f880 	bl	8008098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f98:	e063      	b.n	8008062 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00e      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x584>
 8007fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d008      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 fb57 	bl	8009670 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fc2:	e051      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d014      	beq.n	8007ffa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d105      	bne.n	8007fe8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d03a      	beq.n	8008066 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
    }
    return;
 8007ff8:	e035      	b.n	8008066 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d009      	beq.n	800801a <HAL_UART_IRQHandler+0x5da>
 8008006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fea4 	bl	8008d60 <UART_EndTransmit_IT>
    return;
 8008018:	e026      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <HAL_UART_IRQHandler+0x5fa>
 8008026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fb30 	bl	8009698 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008038:	e016      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d010      	beq.n	8008068 <HAL_UART_IRQHandler+0x628>
 8008046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804a:	2b00      	cmp	r3, #0
 800804c:	da0c      	bge.n	8008068 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fb18 	bl	8009684 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008054:	e008      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
      return;
 8008056:	bf00      	nop
 8008058:	e006      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
    return;
 800805a:	bf00      	nop
 800805c:	e004      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
      return;
 800805e:	bf00      	nop
 8008060:	e002      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
      return;
 8008062:	bf00      	nop
 8008064:	e000      	b.n	8008068 <HAL_UART_IRQHandler+0x628>
    return;
 8008066:	bf00      	nop
  }
}
 8008068:	37e8      	adds	r7, #232	; 0xe8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop

08008070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b4:	b08c      	sub	sp, #48	; 0x30
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4baa      	ldr	r3, [pc, #680]	; (8008388 <UART_SetConfig+0x2d8>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a9f      	ldr	r2, [pc, #636]	; (800838c <UART_SetConfig+0x2dc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008118:	4313      	orrs	r3, r2
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008126:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008130:	430b      	orrs	r3, r1
 8008132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	f023 010f 	bic.w	r1, r3, #15
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a90      	ldr	r2, [pc, #576]	; (8008390 <UART_SetConfig+0x2e0>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d125      	bne.n	80081a0 <UART_SetConfig+0xf0>
 8008154:	4b8f      	ldr	r3, [pc, #572]	; (8008394 <UART_SetConfig+0x2e4>)
 8008156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d81a      	bhi.n	8008198 <UART_SetConfig+0xe8>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0xb8>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	08008179 	.word	0x08008179
 800816c:	08008189 	.word	0x08008189
 8008170:	08008181 	.word	0x08008181
 8008174:	08008191 	.word	0x08008191
 8008178:	2301      	movs	r3, #1
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e116      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008180:	2302      	movs	r3, #2
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e112      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818e:	e10e      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e10a      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819e:	e106      	b.n	80083ae <UART_SetConfig+0x2fe>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a7c      	ldr	r2, [pc, #496]	; (8008398 <UART_SetConfig+0x2e8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d138      	bne.n	800821c <UART_SetConfig+0x16c>
 80081aa:	4b7a      	ldr	r3, [pc, #488]	; (8008394 <UART_SetConfig+0x2e4>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	f003 030c 	and.w	r3, r3, #12
 80081b4:	2b0c      	cmp	r3, #12
 80081b6:	d82d      	bhi.n	8008214 <UART_SetConfig+0x164>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <UART_SetConfig+0x110>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081f5 	.word	0x080081f5
 80081c4:	08008215 	.word	0x08008215
 80081c8:	08008215 	.word	0x08008215
 80081cc:	08008215 	.word	0x08008215
 80081d0:	08008205 	.word	0x08008205
 80081d4:	08008215 	.word	0x08008215
 80081d8:	08008215 	.word	0x08008215
 80081dc:	08008215 	.word	0x08008215
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008215 	.word	0x08008215
 80081e8:	08008215 	.word	0x08008215
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800820d 	.word	0x0800820d
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fa:	e0d8      	b.n	80083ae <UART_SetConfig+0x2fe>
 80081fc:	2302      	movs	r3, #2
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008202:	e0d4      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820a:	e0d0      	b.n	80083ae <UART_SetConfig+0x2fe>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008212:	e0cc      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821a:	e0c8      	b.n	80083ae <UART_SetConfig+0x2fe>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a5e      	ldr	r2, [pc, #376]	; (800839c <UART_SetConfig+0x2ec>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d125      	bne.n	8008272 <UART_SetConfig+0x1c2>
 8008226:	4b5b      	ldr	r3, [pc, #364]	; (8008394 <UART_SetConfig+0x2e4>)
 8008228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008230:	2b30      	cmp	r3, #48	; 0x30
 8008232:	d016      	beq.n	8008262 <UART_SetConfig+0x1b2>
 8008234:	2b30      	cmp	r3, #48	; 0x30
 8008236:	d818      	bhi.n	800826a <UART_SetConfig+0x1ba>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d00a      	beq.n	8008252 <UART_SetConfig+0x1a2>
 800823c:	2b20      	cmp	r3, #32
 800823e:	d814      	bhi.n	800826a <UART_SetConfig+0x1ba>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <UART_SetConfig+0x19a>
 8008244:	2b10      	cmp	r3, #16
 8008246:	d008      	beq.n	800825a <UART_SetConfig+0x1aa>
 8008248:	e00f      	b.n	800826a <UART_SetConfig+0x1ba>
 800824a:	2300      	movs	r3, #0
 800824c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008250:	e0ad      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008252:	2302      	movs	r3, #2
 8008254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008258:	e0a9      	b.n	80083ae <UART_SetConfig+0x2fe>
 800825a:	2304      	movs	r3, #4
 800825c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008260:	e0a5      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008262:	2308      	movs	r3, #8
 8008264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008268:	e0a1      	b.n	80083ae <UART_SetConfig+0x2fe>
 800826a:	2310      	movs	r3, #16
 800826c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008270:	e09d      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a4a      	ldr	r2, [pc, #296]	; (80083a0 <UART_SetConfig+0x2f0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d125      	bne.n	80082c8 <UART_SetConfig+0x218>
 800827c:	4b45      	ldr	r3, [pc, #276]	; (8008394 <UART_SetConfig+0x2e4>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008286:	2bc0      	cmp	r3, #192	; 0xc0
 8008288:	d016      	beq.n	80082b8 <UART_SetConfig+0x208>
 800828a:	2bc0      	cmp	r3, #192	; 0xc0
 800828c:	d818      	bhi.n	80082c0 <UART_SetConfig+0x210>
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d00a      	beq.n	80082a8 <UART_SetConfig+0x1f8>
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d814      	bhi.n	80082c0 <UART_SetConfig+0x210>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <UART_SetConfig+0x1f0>
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d008      	beq.n	80082b0 <UART_SetConfig+0x200>
 800829e:	e00f      	b.n	80082c0 <UART_SetConfig+0x210>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e082      	b.n	80083ae <UART_SetConfig+0x2fe>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e07e      	b.n	80083ae <UART_SetConfig+0x2fe>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e07a      	b.n	80083ae <UART_SetConfig+0x2fe>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082be:	e076      	b.n	80083ae <UART_SetConfig+0x2fe>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c6:	e072      	b.n	80083ae <UART_SetConfig+0x2fe>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a35      	ldr	r2, [pc, #212]	; (80083a4 <UART_SetConfig+0x2f4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d12a      	bne.n	8008328 <UART_SetConfig+0x278>
 80082d2:	4b30      	ldr	r3, [pc, #192]	; (8008394 <UART_SetConfig+0x2e4>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e0:	d01a      	beq.n	8008318 <UART_SetConfig+0x268>
 80082e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e6:	d81b      	bhi.n	8008320 <UART_SetConfig+0x270>
 80082e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ec:	d00c      	beq.n	8008308 <UART_SetConfig+0x258>
 80082ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f2:	d815      	bhi.n	8008320 <UART_SetConfig+0x270>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <UART_SetConfig+0x250>
 80082f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fc:	d008      	beq.n	8008310 <UART_SetConfig+0x260>
 80082fe:	e00f      	b.n	8008320 <UART_SetConfig+0x270>
 8008300:	2300      	movs	r3, #0
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008306:	e052      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e04e      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e04a      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e046      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e042      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <UART_SetConfig+0x2dc>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d13a      	bne.n	80083a8 <UART_SetConfig+0x2f8>
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <UART_SetConfig+0x2e4>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800833c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008340:	d01a      	beq.n	8008378 <UART_SetConfig+0x2c8>
 8008342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008346:	d81b      	bhi.n	8008380 <UART_SetConfig+0x2d0>
 8008348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800834c:	d00c      	beq.n	8008368 <UART_SetConfig+0x2b8>
 800834e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008352:	d815      	bhi.n	8008380 <UART_SetConfig+0x2d0>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <UART_SetConfig+0x2b0>
 8008358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835c:	d008      	beq.n	8008370 <UART_SetConfig+0x2c0>
 800835e:	e00f      	b.n	8008380 <UART_SetConfig+0x2d0>
 8008360:	2300      	movs	r3, #0
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008366:	e022      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008368:	2302      	movs	r3, #2
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e01e      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008370:	2304      	movs	r3, #4
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e01a      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008378:	2308      	movs	r3, #8
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e016      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008380:	2310      	movs	r3, #16
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e012      	b.n	80083ae <UART_SetConfig+0x2fe>
 8008388:	cfff69f3 	.word	0xcfff69f3
 800838c:	40008000 	.word	0x40008000
 8008390:	40013800 	.word	0x40013800
 8008394:	40021000 	.word	0x40021000
 8008398:	40004400 	.word	0x40004400
 800839c:	40004800 	.word	0x40004800
 80083a0:	40004c00 	.word	0x40004c00
 80083a4:	40005000 	.word	0x40005000
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4aae      	ldr	r2, [pc, #696]	; (800866c <UART_SetConfig+0x5bc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	f040 8097 	bne.w	80084e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d823      	bhi.n	800840a <UART_SetConfig+0x35a>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x318>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	0800840b 	.word	0x0800840b
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	0800840b 	.word	0x0800840b
 80083d8:	080083fb 	.word	0x080083fb
 80083dc:	0800840b 	.word	0x0800840b
 80083e0:	0800840b 	.word	0x0800840b
 80083e4:	0800840b 	.word	0x0800840b
 80083e8:	08008403 	.word	0x08008403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fc ffac 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 80083f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083f2:	e010      	b.n	8008416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f4:	4b9e      	ldr	r3, [pc, #632]	; (8008670 <UART_SetConfig+0x5c0>)
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083f8:	e00d      	b.n	8008416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fa:	f7fc ff37 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80083fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008400:	e009      	b.n	8008416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008408:	e005      	b.n	8008416 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 8130 	beq.w	800867e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	4a94      	ldr	r2, [pc, #592]	; (8008674 <UART_SetConfig+0x5c4>)
 8008424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008428:	461a      	mov	r2, r3
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008430:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4413      	add	r3, r2
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	429a      	cmp	r2, r3
 8008440:	d305      	bcc.n	800844e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	429a      	cmp	r2, r3
 800844c:	d903      	bls.n	8008456 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008454:	e113      	b.n	800867e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	2200      	movs	r2, #0
 800845a:	60bb      	str	r3, [r7, #8]
 800845c:	60fa      	str	r2, [r7, #12]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	4a84      	ldr	r2, [pc, #528]	; (8008674 <UART_SetConfig+0x5c4>)
 8008464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008468:	b29b      	uxth	r3, r3
 800846a:	2200      	movs	r2, #0
 800846c:	603b      	str	r3, [r7, #0]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008478:	f7f8 fbce 	bl	8000c18 <__aeabi_uldivmod>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4610      	mov	r0, r2
 8008482:	4619      	mov	r1, r3
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	020b      	lsls	r3, r1, #8
 800848e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008492:	0202      	lsls	r2, r0, #8
 8008494:	6979      	ldr	r1, [r7, #20]
 8008496:	6849      	ldr	r1, [r1, #4]
 8008498:	0849      	lsrs	r1, r1, #1
 800849a:	2000      	movs	r0, #0
 800849c:	460c      	mov	r4, r1
 800849e:	4605      	mov	r5, r0
 80084a0:	eb12 0804 	adds.w	r8, r2, r4
 80084a4:	eb43 0905 	adc.w	r9, r3, r5
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	469a      	mov	sl, r3
 80084b0:	4693      	mov	fp, r2
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	4640      	mov	r0, r8
 80084b8:	4649      	mov	r1, r9
 80084ba:	f7f8 fbad 	bl	8000c18 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4613      	mov	r3, r2
 80084c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084cc:	d308      	bcc.n	80084e0 <UART_SetConfig+0x430>
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d4:	d204      	bcs.n	80084e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	e0ce      	b.n	800867e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084e6:	e0ca      	b.n	800867e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f0:	d166      	bne.n	80085c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80084f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d827      	bhi.n	800854a <UART_SetConfig+0x49a>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <UART_SetConfig+0x450>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008525 	.word	0x08008525
 8008504:	0800852d 	.word	0x0800852d
 8008508:	08008535 	.word	0x08008535
 800850c:	0800854b 	.word	0x0800854b
 8008510:	0800853b 	.word	0x0800853b
 8008514:	0800854b 	.word	0x0800854b
 8008518:	0800854b 	.word	0x0800854b
 800851c:	0800854b 	.word	0x0800854b
 8008520:	08008543 	.word	0x08008543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008524:	f7fc ff10 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8008528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800852a:	e014      	b.n	8008556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800852c:	f7fc ff22 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8008530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008532:	e010      	b.n	8008556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008534:	4b4e      	ldr	r3, [pc, #312]	; (8008670 <UART_SetConfig+0x5c0>)
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008538:	e00d      	b.n	8008556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800853a:	f7fc fe97 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800853e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008540:	e009      	b.n	8008556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008548:	e005      	b.n	8008556 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 8090 	beq.w	800867e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	4a44      	ldr	r2, [pc, #272]	; (8008674 <UART_SetConfig+0x5c4>)
 8008564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008568:	461a      	mov	r2, r3
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008570:	005a      	lsls	r2, r3, #1
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	085b      	lsrs	r3, r3, #1
 8008578:	441a      	add	r2, r3
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	d916      	bls.n	80085b8 <UART_SetConfig+0x508>
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008590:	d212      	bcs.n	80085b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	b29b      	uxth	r3, r3
 8008596:	f023 030f 	bic.w	r3, r3, #15
 800859a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	8bfb      	ldrh	r3, [r7, #30]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	8bfa      	ldrh	r2, [r7, #30]
 80085b4:	60da      	str	r2, [r3, #12]
 80085b6:	e062      	b.n	800867e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085be:	e05e      	b.n	800867e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d828      	bhi.n	800861a <UART_SetConfig+0x56a>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <UART_SetConfig+0x520>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	080085f5 	.word	0x080085f5
 80085d4:	080085fd 	.word	0x080085fd
 80085d8:	08008605 	.word	0x08008605
 80085dc:	0800861b 	.word	0x0800861b
 80085e0:	0800860b 	.word	0x0800860b
 80085e4:	0800861b 	.word	0x0800861b
 80085e8:	0800861b 	.word	0x0800861b
 80085ec:	0800861b 	.word	0x0800861b
 80085f0:	08008613 	.word	0x08008613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085f4:	f7fc fea8 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 80085f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085fa:	e014      	b.n	8008626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085fc:	f7fc feba 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8008600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008602:	e010      	b.n	8008626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <UART_SetConfig+0x5c0>)
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008608:	e00d      	b.n	8008626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860a:	f7fc fe2f 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008610:	e009      	b.n	8008626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008618:	e005      	b.n	8008626 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008624:	bf00      	nop
    }

    if (pclk != 0U)
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d028      	beq.n	800867e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	4a10      	ldr	r2, [pc, #64]	; (8008674 <UART_SetConfig+0x5c4>)
 8008632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008636:	461a      	mov	r2, r3
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	fbb3 f2f2 	udiv	r2, r3, r2
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	441a      	add	r2, r3
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	fbb2 f3f3 	udiv	r3, r2, r3
 800864e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	2b0f      	cmp	r3, #15
 8008654:	d910      	bls.n	8008678 <UART_SetConfig+0x5c8>
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d20c      	bcs.n	8008678 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	b29a      	uxth	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60da      	str	r2, [r3, #12]
 8008668:	e009      	b.n	800867e <UART_SetConfig+0x5ce>
 800866a:	bf00      	nop
 800866c:	40008000 	.word	0x40008000
 8008670:	00f42400 	.word	0x00f42400
 8008674:	0800d190 	.word	0x0800d190
      }
      else
      {
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2201      	movs	r2, #1
 8008682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2201      	movs	r2, #1
 800868a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2200      	movs	r2, #0
 8008692:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2200      	movs	r2, #0
 8008698:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800869a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3730      	adds	r7, #48	; 0x30
 80086a2:	46bd      	mov	sp, r7
 80086a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00a      	beq.n	8008716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01a      	beq.n	80087be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a6:	d10a      	bne.n	80087be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	605a      	str	r2, [r3, #4]
  }
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087fc:	f7f9 feec 	bl	80025d8 <HAL_GetTick>
 8008800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0308 	and.w	r3, r3, #8
 800880c:	2b08      	cmp	r3, #8
 800880e:	d10e      	bne.n	800882e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f82f 	bl	8008882 <UART_WaitOnFlagUntilTimeout>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e025      	b.n	800887a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b04      	cmp	r3, #4
 800883a:	d10e      	bne.n	800885a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800883c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f819 	bl	8008882 <UART_WaitOnFlagUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e00f      	b.n	800887a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b09c      	sub	sp, #112	; 0x70
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008892:	e0a9      	b.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	f000 80a5 	beq.w	80089e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889e:	f7f9 fe9b 	bl	80025d8 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80088ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d140      	bne.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088c8:	667b      	str	r3, [r7, #100]	; 0x64
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e6      	bne.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	663b      	str	r3, [r7, #96]	; 0x60
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008906:	64ba      	str	r2, [r7, #72]	; 0x48
 8008908:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800890c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e5      	bne.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2220      	movs	r2, #32
 800891e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e069      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d051      	beq.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800894e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008952:	d149      	bne.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800895c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
 800897e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	613b      	str	r3, [r7, #16]
   return(result);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089b0:	623a      	str	r2, [r7, #32]
 80089b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	6a3a      	ldr	r2, [r7, #32]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e5      	bne.n	8008990 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e010      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4013      	ands	r3, r2
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	f43f af46 	beq.w	8008894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3770      	adds	r7, #112	; 0x70
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b0a3      	sub	sp, #140	; 0x8c
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	88fa      	ldrh	r2, [r7, #6]
 8008a34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d10e      	bne.n	8008a66 <UART_Start_Receive_IT+0x52>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d105      	bne.n	8008a5c <UART_Start_Receive_IT+0x48>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a5a:	e02d      	b.n	8008ab8 <UART_Start_Receive_IT+0xa4>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	22ff      	movs	r2, #255	; 0xff
 8008a60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a64:	e028      	b.n	8008ab8 <UART_Start_Receive_IT+0xa4>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10d      	bne.n	8008a8a <UART_Start_Receive_IT+0x76>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d104      	bne.n	8008a80 <UART_Start_Receive_IT+0x6c>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	22ff      	movs	r2, #255	; 0xff
 8008a7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a7e:	e01b      	b.n	8008ab8 <UART_Start_Receive_IT+0xa4>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	227f      	movs	r2, #127	; 0x7f
 8008a84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a88:	e016      	b.n	8008ab8 <UART_Start_Receive_IT+0xa4>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a92:	d10d      	bne.n	8008ab0 <UART_Start_Receive_IT+0x9c>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <UART_Start_Receive_IT+0x92>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	227f      	movs	r2, #127	; 0x7f
 8008aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aa4:	e008      	b.n	8008ab8 <UART_Start_Receive_IT+0xa4>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	223f      	movs	r2, #63	; 0x3f
 8008aaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aae:	e003      	b.n	8008ab8 <UART_Start_Receive_IT+0xa4>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2222      	movs	r2, #34	; 0x22
 8008ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3308      	adds	r3, #8
 8008ace:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008aec:	673a      	str	r2, [r7, #112]	; 0x70
 8008aee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008af2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e3      	bne.n	8008ac8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b08:	d153      	bne.n	8008bb2 <UART_Start_Receive_IT+0x19e>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d34d      	bcc.n	8008bb2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1e:	d107      	bne.n	8008b30 <UART_Start_Receive_IT+0x11c>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4a4b      	ldr	r2, [pc, #300]	; (8008c58 <UART_Start_Receive_IT+0x244>)
 8008b2c:	671a      	str	r2, [r3, #112]	; 0x70
 8008b2e:	e002      	b.n	8008b36 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4a4a      	ldr	r2, [pc, #296]	; (8008c5c <UART_Start_Receive_IT+0x248>)
 8008b34:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d01a      	beq.n	8008b7c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b6a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e4      	bne.n	8008b46 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b9c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e5      	bne.n	8008b7c <UART_Start_Receive_IT+0x168>
 8008bb0:	e04a      	b.n	8008c48 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bba:	d107      	bne.n	8008bcc <UART_Start_Receive_IT+0x1b8>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a26      	ldr	r2, [pc, #152]	; (8008c60 <UART_Start_Receive_IT+0x24c>)
 8008bc8:	671a      	str	r2, [r3, #112]	; 0x70
 8008bca:	e002      	b.n	8008bd2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4a25      	ldr	r2, [pc, #148]	; (8008c64 <UART_Start_Receive_IT+0x250>)
 8008bd0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d019      	beq.n	8008c16 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c00:	637b      	str	r3, [r7, #52]	; 0x34
 8008c02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e6      	bne.n	8008be2 <UART_Start_Receive_IT+0x1ce>
 8008c14:	e018      	b.n	8008c48 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	613b      	str	r3, [r7, #16]
   return(result);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f043 0320 	orr.w	r3, r3, #32
 8008c2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c34:	623b      	str	r3, [r7, #32]
 8008c36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	69f9      	ldr	r1, [r7, #28]
 8008c3a:	6a3a      	ldr	r2, [r7, #32]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	378c      	adds	r7, #140	; 0x8c
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	08009371 	.word	0x08009371
 8008c5c:	08009079 	.word	0x08009079
 8008c60:	08008f17 	.word	0x08008f17
 8008c64:	08008db7 	.word	0x08008db7

08008c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b095      	sub	sp, #84	; 0x54
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008c90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e6      	bne.n	8008c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e3      	bne.n	8008ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d118      	bne.n	8008d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0310 	bic.w	r3, r3, #16
 8008cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e6      	bne.n	8008ce2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008d28:	bf00      	nop
 8008d2a:	3754      	adds	r7, #84	; 0x54
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff f996 	bl	8008084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6979      	ldr	r1, [r7, #20]
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	613b      	str	r3, [r7, #16]
   return(result);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e6      	bne.n	8008d68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff f961 	bl	8008070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dae:	bf00      	nop
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b096      	sub	sp, #88	; 0x58
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dce:	2b22      	cmp	r3, #34	; 0x22
 8008dd0:	f040 8095 	bne.w	8008efe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dde:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008de2:	b2d9      	uxtb	r1, r3
 8008de4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dee:	400a      	ands	r2, r1
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d178      	bne.n	8008f0e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e30:	653b      	str	r3, [r7, #80]	; 0x50
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e6      	bne.n	8008e1c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3308      	adds	r3, #8
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e5      	bne.n	8008e4e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d12e      	bne.n	8008ef6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0310 	bic.w	r3, r3, #16
 8008eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	69b9      	ldr	r1, [r7, #24]
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e6      	bne.n	8008e9e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	2b10      	cmp	r3, #16
 8008edc:	d103      	bne.n	8008ee6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2210      	movs	r2, #16
 8008ee4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff f8d2 	bl	8008098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ef4:	e00b      	b.n	8008f0e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7f8 fb84 	bl	8001604 <HAL_UART_RxCpltCallback>
}
 8008efc:	e007      	b.n	8008f0e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	699a      	ldr	r2, [r3, #24]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0208 	orr.w	r2, r2, #8
 8008f0c:	619a      	str	r2, [r3, #24]
}
 8008f0e:	bf00      	nop
 8008f10:	3758      	adds	r7, #88	; 0x58
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b096      	sub	sp, #88	; 0x58
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2e:	2b22      	cmp	r3, #34	; 0x22
 8008f30:	f040 8095 	bne.w	800905e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f42:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008f48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f58:	1c9a      	adds	r2, r3, #2
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d178      	bne.n	800906e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e6      	bne.n	8008f7c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d12e      	bne.n	8009056 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	60bb      	str	r3, [r7, #8]
   return(result);
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f023 0310 	bic.w	r3, r3, #16
 8009012:	647b      	str	r3, [r7, #68]	; 0x44
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6979      	ldr	r1, [r7, #20]
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	613b      	str	r3, [r7, #16]
   return(result);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e6      	bne.n	8008ffe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b10      	cmp	r3, #16
 800903c:	d103      	bne.n	8009046 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2210      	movs	r2, #16
 8009044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff f822 	bl	8008098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009054:	e00b      	b.n	800906e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7f8 fad4 	bl	8001604 <HAL_UART_RxCpltCallback>
}
 800905c:	e007      	b.n	800906e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	699a      	ldr	r2, [r3, #24]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0208 	orr.w	r2, r2, #8
 800906c:	619a      	str	r2, [r3, #24]
}
 800906e:	bf00      	nop
 8009070:	3758      	adds	r7, #88	; 0x58
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b0a6      	sub	sp, #152	; 0x98
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009086:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ae:	2b22      	cmp	r3, #34	; 0x22
 80090b0:	f040 814f 	bne.w	8009352 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090be:	e0f6      	b.n	80092ae <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80090ce:	b2d9      	uxtb	r1, r3
 80090d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090da:	400a      	ands	r2, r1
 80090dc:	b2d2      	uxtb	r2, r2
 80090de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b00      	cmp	r3, #0
 8009110:	d053      	beq.n	80091ba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d011      	beq.n	8009142 <UART_RxISR_8BIT_FIFOEN+0xca>
 800911e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2201      	movs	r2, #1
 8009130:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009138:	f043 0201 	orr.w	r2, r3, #1
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009142:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d011      	beq.n	8009172 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800914e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00b      	beq.n	8009172 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2202      	movs	r2, #2
 8009160:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009168:	f043 0204 	orr.w	r2, r3, #4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009172:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d011      	beq.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800917e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00b      	beq.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2204      	movs	r2, #4
 8009190:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009198:	f043 0202 	orr.w	r2, r3, #2
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7fe ff69 	bl	8008084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d173      	bne.n	80092ae <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80091d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80091ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80091f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e4      	bne.n	80091c6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800920c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800920e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009212:	f023 0301 	bic.w	r3, r3, #1
 8009216:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009220:	657a      	str	r2, [r7, #84]	; 0x54
 8009222:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009226:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800922e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e3      	bne.n	80091fc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2220      	movs	r2, #32
 8009238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d12e      	bne.n	80092a8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	f023 0310 	bic.w	r3, r3, #16
 8009264:	67bb      	str	r3, [r7, #120]	; 0x78
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800926e:	643b      	str	r3, [r7, #64]	; 0x40
 8009270:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e6      	bne.n	8009250 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f003 0310 	and.w	r3, r3, #16
 800928c:	2b10      	cmp	r3, #16
 800928e:	d103      	bne.n	8009298 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2210      	movs	r2, #16
 8009296:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fe fef9 	bl	8008098 <HAL_UARTEx_RxEventCallback>
 80092a6:	e002      	b.n	80092ae <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7f8 f9ab 	bl	8001604 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80092b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f47f aefe 	bne.w	80090c0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d045      	beq.n	8009362 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d23e      	bcs.n	8009362 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092fa:	673b      	str	r3, [r7, #112]	; 0x70
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800930a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e5      	bne.n	80092e4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a14      	ldr	r2, [pc, #80]	; (800936c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800931c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	e853 3f00 	ldrex	r3, [r3]
 800932a:	60bb      	str	r3, [r7, #8]
   return(result);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f043 0320 	orr.w	r3, r3, #32
 8009332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6979      	ldr	r1, [r7, #20]
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	613b      	str	r3, [r7, #16]
   return(result);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e6      	bne.n	800931e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009350:	e007      	b.n	8009362 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0208 	orr.w	r2, r2, #8
 8009360:	619a      	str	r2, [r3, #24]
}
 8009362:	bf00      	nop
 8009364:	3798      	adds	r7, #152	; 0x98
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	08008db7 	.word	0x08008db7

08009370 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b0a8      	sub	sp, #160	; 0xa0
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800937e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a6:	2b22      	cmp	r3, #34	; 0x22
 80093a8:	f040 8153 	bne.w	8009652 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093b6:	e0fa      	b.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80093ca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80093ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80093d2:	4013      	ands	r3, r2
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e0:	1c9a      	adds	r2, r3, #2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b00      	cmp	r3, #0
 800940c:	d053      	beq.n	80094b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800940e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d011      	beq.n	800943e <UART_RxISR_16BIT_FIFOEN+0xce>
 800941a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800941e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00b      	beq.n	800943e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2201      	movs	r2, #1
 800942c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009434:	f043 0201 	orr.w	r2, r3, #1
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800943e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b00      	cmp	r3, #0
 8009448:	d011      	beq.n	800946e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800944a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2202      	movs	r2, #2
 800945c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009464:	f043 0204 	orr.w	r2, r3, #4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800946e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d011      	beq.n	800949e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800947a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2204      	movs	r2, #4
 800948c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009494:	f043 0202 	orr.w	r2, r3, #2
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d006      	beq.n	80094b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7fe fdeb 	bl	8008084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d175      	bne.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094e6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e4      	bne.n	80094c2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3308      	adds	r3, #8
 80094fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800950a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009520:	65ba      	str	r2, [r7, #88]	; 0x58
 8009522:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800952e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e1      	bne.n	80094f8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009546:	2b01      	cmp	r3, #1
 8009548:	d12e      	bne.n	80095a8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009560:	f023 0310 	bic.w	r3, r3, #16
 8009564:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800956e:	647b      	str	r3, [r7, #68]	; 0x44
 8009570:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800957c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e6      	bne.n	8009550 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b10      	cmp	r3, #16
 800958e:	d103      	bne.n	8009598 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2210      	movs	r2, #16
 8009596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7fe fd79 	bl	8008098 <HAL_UARTEx_RxEventCallback>
 80095a6:	e002      	b.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7f8 f82b 	bl	8001604 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d006      	beq.n	80095c4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80095b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f47f aefa 	bne.w	80093b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d045      	beq.n	8009662 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d23e      	bcs.n	8009662 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	623b      	str	r3, [r7, #32]
   return(result);
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095fa:	677b      	str	r3, [r7, #116]	; 0x74
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3308      	adds	r3, #8
 8009602:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009604:	633a      	str	r2, [r7, #48]	; 0x30
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800960a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e5      	bne.n	80095e4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a14      	ldr	r2, [pc, #80]	; (800966c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800961c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	60fb      	str	r3, [r7, #12]
   return(result);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f043 0320 	orr.w	r3, r3, #32
 8009632:	673b      	str	r3, [r7, #112]	; 0x70
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	617b      	str	r3, [r7, #20]
   return(result);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e6      	bne.n	800961e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009650:	e007      	b.n	8009662 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0208 	orr.w	r2, r2, #8
 8009660:	619a      	str	r2, [r3, #24]
}
 8009662:	bf00      	nop
 8009664:	37a0      	adds	r7, #160	; 0xa0
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	08008f17 	.word	0x08008f17

08009670 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80096be:	2302      	movs	r3, #2
 80096c0:	e027      	b.n	8009712 <HAL_UARTEx_DisableFifoMode+0x66>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2224      	movs	r2, #36	; 0x24
 80096ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 0201 	bic.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2220      	movs	r2, #32
 8009704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009732:	2302      	movs	r3, #2
 8009734:	e02d      	b.n	8009792 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2224      	movs	r2, #36	; 0x24
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f850 	bl	8009818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e02d      	b.n	800980e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2224      	movs	r2, #36	; 0x24
 80097be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f812 	bl	8009818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009824:	2b00      	cmp	r3, #0
 8009826:	d108      	bne.n	800983a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009838:	e031      	b.n	800989e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800983a:	2308      	movs	r3, #8
 800983c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800983e:	2308      	movs	r3, #8
 8009840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	0e5b      	lsrs	r3, r3, #25
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0307 	and.w	r3, r3, #7
 8009850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	0f5b      	lsrs	r3, r3, #29
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	7b3a      	ldrb	r2, [r7, #12]
 8009866:	4911      	ldr	r1, [pc, #68]	; (80098ac <UARTEx_SetNbDataToProcess+0x94>)
 8009868:	5c8a      	ldrb	r2, [r1, r2]
 800986a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800986e:	7b3a      	ldrb	r2, [r7, #12]
 8009870:	490f      	ldr	r1, [pc, #60]	; (80098b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009872:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009874:	fb93 f3f2 	sdiv	r3, r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	7b7a      	ldrb	r2, [r7, #13]
 8009884:	4909      	ldr	r1, [pc, #36]	; (80098ac <UARTEx_SetNbDataToProcess+0x94>)
 8009886:	5c8a      	ldrb	r2, [r1, r2]
 8009888:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800988c:	7b7a      	ldrb	r2, [r7, #13]
 800988e:	4908      	ldr	r1, [pc, #32]	; (80098b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009890:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009892:	fb93 f3f2 	sdiv	r3, r3, r2
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800989e:	bf00      	nop
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	0800d1a8 	.word	0x0800d1a8
 80098b0:	0800d1b0 	.word	0x0800d1b0

080098b4 <__cvt>:
 80098b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	ec55 4b10 	vmov	r4, r5, d0
 80098bc:	2d00      	cmp	r5, #0
 80098be:	460e      	mov	r6, r1
 80098c0:	4619      	mov	r1, r3
 80098c2:	462b      	mov	r3, r5
 80098c4:	bfbb      	ittet	lt
 80098c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098ca:	461d      	movlt	r5, r3
 80098cc:	2300      	movge	r3, #0
 80098ce:	232d      	movlt	r3, #45	; 0x2d
 80098d0:	700b      	strb	r3, [r1, #0]
 80098d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098d8:	4691      	mov	r9, r2
 80098da:	f023 0820 	bic.w	r8, r3, #32
 80098de:	bfbc      	itt	lt
 80098e0:	4622      	movlt	r2, r4
 80098e2:	4614      	movlt	r4, r2
 80098e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098e8:	d005      	beq.n	80098f6 <__cvt+0x42>
 80098ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098ee:	d100      	bne.n	80098f2 <__cvt+0x3e>
 80098f0:	3601      	adds	r6, #1
 80098f2:	2102      	movs	r1, #2
 80098f4:	e000      	b.n	80098f8 <__cvt+0x44>
 80098f6:	2103      	movs	r1, #3
 80098f8:	ab03      	add	r3, sp, #12
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	ab02      	add	r3, sp, #8
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	ec45 4b10 	vmov	d0, r4, r5
 8009904:	4653      	mov	r3, sl
 8009906:	4632      	mov	r2, r6
 8009908:	f000 feaa 	bl	800a660 <_dtoa_r>
 800990c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009910:	4607      	mov	r7, r0
 8009912:	d102      	bne.n	800991a <__cvt+0x66>
 8009914:	f019 0f01 	tst.w	r9, #1
 8009918:	d022      	beq.n	8009960 <__cvt+0xac>
 800991a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800991e:	eb07 0906 	add.w	r9, r7, r6
 8009922:	d110      	bne.n	8009946 <__cvt+0x92>
 8009924:	783b      	ldrb	r3, [r7, #0]
 8009926:	2b30      	cmp	r3, #48	; 0x30
 8009928:	d10a      	bne.n	8009940 <__cvt+0x8c>
 800992a:	2200      	movs	r2, #0
 800992c:	2300      	movs	r3, #0
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f7 f901 	bl	8000b38 <__aeabi_dcmpeq>
 8009936:	b918      	cbnz	r0, 8009940 <__cvt+0x8c>
 8009938:	f1c6 0601 	rsb	r6, r6, #1
 800993c:	f8ca 6000 	str.w	r6, [sl]
 8009940:	f8da 3000 	ldr.w	r3, [sl]
 8009944:	4499      	add	r9, r3
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f7 f8f3 	bl	8000b38 <__aeabi_dcmpeq>
 8009952:	b108      	cbz	r0, 8009958 <__cvt+0xa4>
 8009954:	f8cd 900c 	str.w	r9, [sp, #12]
 8009958:	2230      	movs	r2, #48	; 0x30
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	454b      	cmp	r3, r9
 800995e:	d307      	bcc.n	8009970 <__cvt+0xbc>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009964:	1bdb      	subs	r3, r3, r7
 8009966:	4638      	mov	r0, r7
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	b004      	add	sp, #16
 800996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009970:	1c59      	adds	r1, r3, #1
 8009972:	9103      	str	r1, [sp, #12]
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e7f0      	b.n	800995a <__cvt+0xa6>

08009978 <__exponent>:
 8009978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800997a:	4603      	mov	r3, r0
 800997c:	2900      	cmp	r1, #0
 800997e:	bfb8      	it	lt
 8009980:	4249      	neglt	r1, r1
 8009982:	f803 2b02 	strb.w	r2, [r3], #2
 8009986:	bfb4      	ite	lt
 8009988:	222d      	movlt	r2, #45	; 0x2d
 800998a:	222b      	movge	r2, #43	; 0x2b
 800998c:	2909      	cmp	r1, #9
 800998e:	7042      	strb	r2, [r0, #1]
 8009990:	dd2a      	ble.n	80099e8 <__exponent+0x70>
 8009992:	f10d 0207 	add.w	r2, sp, #7
 8009996:	4617      	mov	r7, r2
 8009998:	260a      	movs	r6, #10
 800999a:	4694      	mov	ip, r2
 800999c:	fb91 f5f6 	sdiv	r5, r1, r6
 80099a0:	fb06 1415 	mls	r4, r6, r5, r1
 80099a4:	3430      	adds	r4, #48	; 0x30
 80099a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80099aa:	460c      	mov	r4, r1
 80099ac:	2c63      	cmp	r4, #99	; 0x63
 80099ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80099b2:	4629      	mov	r1, r5
 80099b4:	dcf1      	bgt.n	800999a <__exponent+0x22>
 80099b6:	3130      	adds	r1, #48	; 0x30
 80099b8:	f1ac 0402 	sub.w	r4, ip, #2
 80099bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80099c0:	1c41      	adds	r1, r0, #1
 80099c2:	4622      	mov	r2, r4
 80099c4:	42ba      	cmp	r2, r7
 80099c6:	d30a      	bcc.n	80099de <__exponent+0x66>
 80099c8:	f10d 0209 	add.w	r2, sp, #9
 80099cc:	eba2 020c 	sub.w	r2, r2, ip
 80099d0:	42bc      	cmp	r4, r7
 80099d2:	bf88      	it	hi
 80099d4:	2200      	movhi	r2, #0
 80099d6:	4413      	add	r3, r2
 80099d8:	1a18      	subs	r0, r3, r0
 80099da:	b003      	add	sp, #12
 80099dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80099e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80099e6:	e7ed      	b.n	80099c4 <__exponent+0x4c>
 80099e8:	2330      	movs	r3, #48	; 0x30
 80099ea:	3130      	adds	r1, #48	; 0x30
 80099ec:	7083      	strb	r3, [r0, #2]
 80099ee:	70c1      	strb	r1, [r0, #3]
 80099f0:	1d03      	adds	r3, r0, #4
 80099f2:	e7f1      	b.n	80099d8 <__exponent+0x60>

080099f4 <_printf_float>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	ed2d 8b02 	vpush	{d8}
 80099fc:	b08d      	sub	sp, #52	; 0x34
 80099fe:	460c      	mov	r4, r1
 8009a00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a04:	4616      	mov	r6, r2
 8009a06:	461f      	mov	r7, r3
 8009a08:	4605      	mov	r5, r0
 8009a0a:	f000 fd29 	bl	800a460 <_localeconv_r>
 8009a0e:	f8d0 a000 	ldr.w	sl, [r0]
 8009a12:	4650      	mov	r0, sl
 8009a14:	f7f6 fc64 	bl	80002e0 <strlen>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	f8d8 3000 	ldr.w	r3, [r8]
 8009a24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a28:	3307      	adds	r3, #7
 8009a2a:	f023 0307 	bic.w	r3, r3, #7
 8009a2e:	f103 0208 	add.w	r2, r3, #8
 8009a32:	f8c8 2000 	str.w	r2, [r8]
 8009a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a3e:	9307      	str	r3, [sp, #28]
 8009a40:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a44:	ee08 0a10 	vmov	s16, r0
 8009a48:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009a4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a50:	4b9e      	ldr	r3, [pc, #632]	; (8009ccc <_printf_float+0x2d8>)
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	f7f7 f8a1 	bl	8000b9c <__aeabi_dcmpun>
 8009a5a:	bb88      	cbnz	r0, 8009ac0 <_printf_float+0xcc>
 8009a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a60:	4b9a      	ldr	r3, [pc, #616]	; (8009ccc <_printf_float+0x2d8>)
 8009a62:	f04f 32ff 	mov.w	r2, #4294967295
 8009a66:	f7f7 f87b 	bl	8000b60 <__aeabi_dcmple>
 8009a6a:	bb48      	cbnz	r0, 8009ac0 <_printf_float+0xcc>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	f7f7 f86a 	bl	8000b4c <__aeabi_dcmplt>
 8009a78:	b110      	cbz	r0, 8009a80 <_printf_float+0x8c>
 8009a7a:	232d      	movs	r3, #45	; 0x2d
 8009a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a80:	4a93      	ldr	r2, [pc, #588]	; (8009cd0 <_printf_float+0x2dc>)
 8009a82:	4b94      	ldr	r3, [pc, #592]	; (8009cd4 <_printf_float+0x2e0>)
 8009a84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a88:	bf94      	ite	ls
 8009a8a:	4690      	movls	r8, r2
 8009a8c:	4698      	movhi	r8, r3
 8009a8e:	2303      	movs	r3, #3
 8009a90:	6123      	str	r3, [r4, #16]
 8009a92:	9b05      	ldr	r3, [sp, #20]
 8009a94:	f023 0304 	bic.w	r3, r3, #4
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	f04f 0900 	mov.w	r9, #0
 8009a9e:	9700      	str	r7, [sp, #0]
 8009aa0:	4633      	mov	r3, r6
 8009aa2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f9da 	bl	8009e60 <_printf_common>
 8009aac:	3001      	adds	r0, #1
 8009aae:	f040 8090 	bne.w	8009bd2 <_printf_float+0x1de>
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	b00d      	add	sp, #52	; 0x34
 8009ab8:	ecbd 8b02 	vpop	{d8}
 8009abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f7 f868 	bl	8000b9c <__aeabi_dcmpun>
 8009acc:	b140      	cbz	r0, 8009ae0 <_printf_float+0xec>
 8009ace:	464b      	mov	r3, r9
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bfbc      	itt	lt
 8009ad4:	232d      	movlt	r3, #45	; 0x2d
 8009ad6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ada:	4a7f      	ldr	r2, [pc, #508]	; (8009cd8 <_printf_float+0x2e4>)
 8009adc:	4b7f      	ldr	r3, [pc, #508]	; (8009cdc <_printf_float+0x2e8>)
 8009ade:	e7d1      	b.n	8009a84 <_printf_float+0x90>
 8009ae0:	6863      	ldr	r3, [r4, #4]
 8009ae2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ae6:	9206      	str	r2, [sp, #24]
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	d13f      	bne.n	8009b6c <_printf_float+0x178>
 8009aec:	2306      	movs	r3, #6
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	9b05      	ldr	r3, [sp, #20]
 8009af2:	6861      	ldr	r1, [r4, #4]
 8009af4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009af8:	2300      	movs	r3, #0
 8009afa:	9303      	str	r3, [sp, #12]
 8009afc:	ab0a      	add	r3, sp, #40	; 0x28
 8009afe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b02:	ab09      	add	r3, sp, #36	; 0x24
 8009b04:	ec49 8b10 	vmov	d0, r8, r9
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	6022      	str	r2, [r4, #0]
 8009b0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7ff fecf 	bl	80098b4 <__cvt>
 8009b16:	9b06      	ldr	r3, [sp, #24]
 8009b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b1a:	2b47      	cmp	r3, #71	; 0x47
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	d108      	bne.n	8009b32 <_printf_float+0x13e>
 8009b20:	1cc8      	adds	r0, r1, #3
 8009b22:	db02      	blt.n	8009b2a <_printf_float+0x136>
 8009b24:	6863      	ldr	r3, [r4, #4]
 8009b26:	4299      	cmp	r1, r3
 8009b28:	dd41      	ble.n	8009bae <_printf_float+0x1ba>
 8009b2a:	f1ab 0302 	sub.w	r3, fp, #2
 8009b2e:	fa5f fb83 	uxtb.w	fp, r3
 8009b32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b36:	d820      	bhi.n	8009b7a <_printf_float+0x186>
 8009b38:	3901      	subs	r1, #1
 8009b3a:	465a      	mov	r2, fp
 8009b3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b40:	9109      	str	r1, [sp, #36]	; 0x24
 8009b42:	f7ff ff19 	bl	8009978 <__exponent>
 8009b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b48:	1813      	adds	r3, r2, r0
 8009b4a:	2a01      	cmp	r2, #1
 8009b4c:	4681      	mov	r9, r0
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	dc02      	bgt.n	8009b58 <_printf_float+0x164>
 8009b52:	6822      	ldr	r2, [r4, #0]
 8009b54:	07d2      	lsls	r2, r2, #31
 8009b56:	d501      	bpl.n	8009b5c <_printf_float+0x168>
 8009b58:	3301      	adds	r3, #1
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d09c      	beq.n	8009a9e <_printf_float+0xaa>
 8009b64:	232d      	movs	r3, #45	; 0x2d
 8009b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6a:	e798      	b.n	8009a9e <_printf_float+0xaa>
 8009b6c:	9a06      	ldr	r2, [sp, #24]
 8009b6e:	2a47      	cmp	r2, #71	; 0x47
 8009b70:	d1be      	bne.n	8009af0 <_printf_float+0xfc>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1bc      	bne.n	8009af0 <_printf_float+0xfc>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e7b9      	b.n	8009aee <_printf_float+0xfa>
 8009b7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b7e:	d118      	bne.n	8009bb2 <_printf_float+0x1be>
 8009b80:	2900      	cmp	r1, #0
 8009b82:	6863      	ldr	r3, [r4, #4]
 8009b84:	dd0b      	ble.n	8009b9e <_printf_float+0x1aa>
 8009b86:	6121      	str	r1, [r4, #16]
 8009b88:	b913      	cbnz	r3, 8009b90 <_printf_float+0x19c>
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	07d0      	lsls	r0, r2, #31
 8009b8e:	d502      	bpl.n	8009b96 <_printf_float+0x1a2>
 8009b90:	3301      	adds	r3, #1
 8009b92:	440b      	add	r3, r1
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b98:	f04f 0900 	mov.w	r9, #0
 8009b9c:	e7de      	b.n	8009b5c <_printf_float+0x168>
 8009b9e:	b913      	cbnz	r3, 8009ba6 <_printf_float+0x1b2>
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	07d2      	lsls	r2, r2, #31
 8009ba4:	d501      	bpl.n	8009baa <_printf_float+0x1b6>
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	e7f4      	b.n	8009b94 <_printf_float+0x1a0>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e7f2      	b.n	8009b94 <_printf_float+0x1a0>
 8009bae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb4:	4299      	cmp	r1, r3
 8009bb6:	db05      	blt.n	8009bc4 <_printf_float+0x1d0>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	6121      	str	r1, [r4, #16]
 8009bbc:	07d8      	lsls	r0, r3, #31
 8009bbe:	d5ea      	bpl.n	8009b96 <_printf_float+0x1a2>
 8009bc0:	1c4b      	adds	r3, r1, #1
 8009bc2:	e7e7      	b.n	8009b94 <_printf_float+0x1a0>
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	bfd4      	ite	le
 8009bc8:	f1c1 0202 	rsble	r2, r1, #2
 8009bcc:	2201      	movgt	r2, #1
 8009bce:	4413      	add	r3, r2
 8009bd0:	e7e0      	b.n	8009b94 <_printf_float+0x1a0>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	055a      	lsls	r2, r3, #21
 8009bd6:	d407      	bmi.n	8009be8 <_printf_float+0x1f4>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	4642      	mov	r2, r8
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4628      	mov	r0, r5
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	d12c      	bne.n	8009c40 <_printf_float+0x24c>
 8009be6:	e764      	b.n	8009ab2 <_printf_float+0xbe>
 8009be8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bec:	f240 80e0 	bls.w	8009db0 <_printf_float+0x3bc>
 8009bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f7f6 ff9e 	bl	8000b38 <__aeabi_dcmpeq>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d034      	beq.n	8009c6a <_printf_float+0x276>
 8009c00:	4a37      	ldr	r2, [pc, #220]	; (8009ce0 <_printf_float+0x2ec>)
 8009c02:	2301      	movs	r3, #1
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	f43f af51 	beq.w	8009ab2 <_printf_float+0xbe>
 8009c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c14:	429a      	cmp	r2, r3
 8009c16:	db02      	blt.n	8009c1e <_printf_float+0x22a>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	07d8      	lsls	r0, r3, #31
 8009c1c:	d510      	bpl.n	8009c40 <_printf_float+0x24c>
 8009c1e:	ee18 3a10 	vmov	r3, s16
 8009c22:	4652      	mov	r2, sl
 8009c24:	4631      	mov	r1, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b8      	blx	r7
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	f43f af41 	beq.w	8009ab2 <_printf_float+0xbe>
 8009c30:	f04f 0800 	mov.w	r8, #0
 8009c34:	f104 091a 	add.w	r9, r4, #26
 8009c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	4543      	cmp	r3, r8
 8009c3e:	dc09      	bgt.n	8009c54 <_printf_float+0x260>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	079b      	lsls	r3, r3, #30
 8009c44:	f100 8107 	bmi.w	8009e56 <_printf_float+0x462>
 8009c48:	68e0      	ldr	r0, [r4, #12]
 8009c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c4c:	4298      	cmp	r0, r3
 8009c4e:	bfb8      	it	lt
 8009c50:	4618      	movlt	r0, r3
 8009c52:	e730      	b.n	8009ab6 <_printf_float+0xc2>
 8009c54:	2301      	movs	r3, #1
 8009c56:	464a      	mov	r2, r9
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f af27 	beq.w	8009ab2 <_printf_float+0xbe>
 8009c64:	f108 0801 	add.w	r8, r8, #1
 8009c68:	e7e6      	b.n	8009c38 <_printf_float+0x244>
 8009c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dc39      	bgt.n	8009ce4 <_printf_float+0x2f0>
 8009c70:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <_printf_float+0x2ec>)
 8009c72:	2301      	movs	r3, #1
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f af19 	beq.w	8009ab2 <_printf_float+0xbe>
 8009c80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c84:	4313      	orrs	r3, r2
 8009c86:	d102      	bne.n	8009c8e <_printf_float+0x29a>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	07d9      	lsls	r1, r3, #31
 8009c8c:	d5d8      	bpl.n	8009c40 <_printf_float+0x24c>
 8009c8e:	ee18 3a10 	vmov	r3, s16
 8009c92:	4652      	mov	r2, sl
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b8      	blx	r7
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f af09 	beq.w	8009ab2 <_printf_float+0xbe>
 8009ca0:	f04f 0900 	mov.w	r9, #0
 8009ca4:	f104 0a1a 	add.w	sl, r4, #26
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	425b      	negs	r3, r3
 8009cac:	454b      	cmp	r3, r9
 8009cae:	dc01      	bgt.n	8009cb4 <_printf_float+0x2c0>
 8009cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb2:	e792      	b.n	8009bda <_printf_float+0x1e6>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4652      	mov	r2, sl
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f43f aef7 	beq.w	8009ab2 <_printf_float+0xbe>
 8009cc4:	f109 0901 	add.w	r9, r9, #1
 8009cc8:	e7ee      	b.n	8009ca8 <_printf_float+0x2b4>
 8009cca:	bf00      	nop
 8009ccc:	7fefffff 	.word	0x7fefffff
 8009cd0:	0800d1b8 	.word	0x0800d1b8
 8009cd4:	0800d1bc 	.word	0x0800d1bc
 8009cd8:	0800d1c0 	.word	0x0800d1c0
 8009cdc:	0800d1c4 	.word	0x0800d1c4
 8009ce0:	0800d3f3 	.word	0x0800d3f3
 8009ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	bfa8      	it	ge
 8009cec:	461a      	movge	r2, r3
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	4691      	mov	r9, r2
 8009cf2:	dc37      	bgt.n	8009d64 <_printf_float+0x370>
 8009cf4:	f04f 0b00 	mov.w	fp, #0
 8009cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cfc:	f104 021a 	add.w	r2, r4, #26
 8009d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d02:	9305      	str	r3, [sp, #20]
 8009d04:	eba3 0309 	sub.w	r3, r3, r9
 8009d08:	455b      	cmp	r3, fp
 8009d0a:	dc33      	bgt.n	8009d74 <_printf_float+0x380>
 8009d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d10:	429a      	cmp	r2, r3
 8009d12:	db3b      	blt.n	8009d8c <_printf_float+0x398>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	07da      	lsls	r2, r3, #31
 8009d18:	d438      	bmi.n	8009d8c <_printf_float+0x398>
 8009d1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d1e:	eba2 0903 	sub.w	r9, r2, r3
 8009d22:	9b05      	ldr	r3, [sp, #20]
 8009d24:	1ad2      	subs	r2, r2, r3
 8009d26:	4591      	cmp	r9, r2
 8009d28:	bfa8      	it	ge
 8009d2a:	4691      	movge	r9, r2
 8009d2c:	f1b9 0f00 	cmp.w	r9, #0
 8009d30:	dc35      	bgt.n	8009d9e <_printf_float+0x3aa>
 8009d32:	f04f 0800 	mov.w	r8, #0
 8009d36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d3a:	f104 0a1a 	add.w	sl, r4, #26
 8009d3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d42:	1a9b      	subs	r3, r3, r2
 8009d44:	eba3 0309 	sub.w	r3, r3, r9
 8009d48:	4543      	cmp	r3, r8
 8009d4a:	f77f af79 	ble.w	8009c40 <_printf_float+0x24c>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4652      	mov	r2, sl
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f aeaa 	beq.w	8009ab2 <_printf_float+0xbe>
 8009d5e:	f108 0801 	add.w	r8, r8, #1
 8009d62:	e7ec      	b.n	8009d3e <_printf_float+0x34a>
 8009d64:	4613      	mov	r3, r2
 8009d66:	4631      	mov	r1, r6
 8009d68:	4642      	mov	r2, r8
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d1c0      	bne.n	8009cf4 <_printf_float+0x300>
 8009d72:	e69e      	b.n	8009ab2 <_printf_float+0xbe>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	9205      	str	r2, [sp, #20]
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f ae97 	beq.w	8009ab2 <_printf_float+0xbe>
 8009d84:	9a05      	ldr	r2, [sp, #20]
 8009d86:	f10b 0b01 	add.w	fp, fp, #1
 8009d8a:	e7b9      	b.n	8009d00 <_printf_float+0x30c>
 8009d8c:	ee18 3a10 	vmov	r3, s16
 8009d90:	4652      	mov	r2, sl
 8009d92:	4631      	mov	r1, r6
 8009d94:	4628      	mov	r0, r5
 8009d96:	47b8      	blx	r7
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d1be      	bne.n	8009d1a <_printf_float+0x326>
 8009d9c:	e689      	b.n	8009ab2 <_printf_float+0xbe>
 8009d9e:	9a05      	ldr	r2, [sp, #20]
 8009da0:	464b      	mov	r3, r9
 8009da2:	4442      	add	r2, r8
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	d1c1      	bne.n	8009d32 <_printf_float+0x33e>
 8009dae:	e680      	b.n	8009ab2 <_printf_float+0xbe>
 8009db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009db2:	2a01      	cmp	r2, #1
 8009db4:	dc01      	bgt.n	8009dba <_printf_float+0x3c6>
 8009db6:	07db      	lsls	r3, r3, #31
 8009db8:	d53a      	bpl.n	8009e30 <_printf_float+0x43c>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f ae74 	beq.w	8009ab2 <_printf_float+0xbe>
 8009dca:	ee18 3a10 	vmov	r3, s16
 8009dce:	4652      	mov	r2, sl
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	47b8      	blx	r7
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	f43f ae6b 	beq.w	8009ab2 <_printf_float+0xbe>
 8009ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009de0:	2200      	movs	r2, #0
 8009de2:	2300      	movs	r3, #0
 8009de4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009de8:	f7f6 fea6 	bl	8000b38 <__aeabi_dcmpeq>
 8009dec:	b9d8      	cbnz	r0, 8009e26 <_printf_float+0x432>
 8009dee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009df2:	f108 0201 	add.w	r2, r8, #1
 8009df6:	4631      	mov	r1, r6
 8009df8:	4628      	mov	r0, r5
 8009dfa:	47b8      	blx	r7
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d10e      	bne.n	8009e1e <_printf_float+0x42a>
 8009e00:	e657      	b.n	8009ab2 <_printf_float+0xbe>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4652      	mov	r2, sl
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f ae50 	beq.w	8009ab2 <_printf_float+0xbe>
 8009e12:	f108 0801 	add.w	r8, r8, #1
 8009e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	4543      	cmp	r3, r8
 8009e1c:	dcf1      	bgt.n	8009e02 <_printf_float+0x40e>
 8009e1e:	464b      	mov	r3, r9
 8009e20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e24:	e6da      	b.n	8009bdc <_printf_float+0x1e8>
 8009e26:	f04f 0800 	mov.w	r8, #0
 8009e2a:	f104 0a1a 	add.w	sl, r4, #26
 8009e2e:	e7f2      	b.n	8009e16 <_printf_float+0x422>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4642      	mov	r2, r8
 8009e34:	e7df      	b.n	8009df6 <_printf_float+0x402>
 8009e36:	2301      	movs	r3, #1
 8009e38:	464a      	mov	r2, r9
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae36 	beq.w	8009ab2 <_printf_float+0xbe>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	68e3      	ldr	r3, [r4, #12]
 8009e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e4e:	1a5b      	subs	r3, r3, r1
 8009e50:	4543      	cmp	r3, r8
 8009e52:	dcf0      	bgt.n	8009e36 <_printf_float+0x442>
 8009e54:	e6f8      	b.n	8009c48 <_printf_float+0x254>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	f104 0919 	add.w	r9, r4, #25
 8009e5e:	e7f4      	b.n	8009e4a <_printf_float+0x456>

08009e60 <_printf_common>:
 8009e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e64:	4616      	mov	r6, r2
 8009e66:	4699      	mov	r9, r3
 8009e68:	688a      	ldr	r2, [r1, #8]
 8009e6a:	690b      	ldr	r3, [r1, #16]
 8009e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	bfb8      	it	lt
 8009e74:	4613      	movlt	r3, r2
 8009e76:	6033      	str	r3, [r6, #0]
 8009e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	b10a      	cbz	r2, 8009e86 <_printf_common+0x26>
 8009e82:	3301      	adds	r3, #1
 8009e84:	6033      	str	r3, [r6, #0]
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	0699      	lsls	r1, r3, #26
 8009e8a:	bf42      	ittt	mi
 8009e8c:	6833      	ldrmi	r3, [r6, #0]
 8009e8e:	3302      	addmi	r3, #2
 8009e90:	6033      	strmi	r3, [r6, #0]
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	f015 0506 	ands.w	r5, r5, #6
 8009e98:	d106      	bne.n	8009ea8 <_printf_common+0x48>
 8009e9a:	f104 0a19 	add.w	sl, r4, #25
 8009e9e:	68e3      	ldr	r3, [r4, #12]
 8009ea0:	6832      	ldr	r2, [r6, #0]
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	42ab      	cmp	r3, r5
 8009ea6:	dc26      	bgt.n	8009ef6 <_printf_common+0x96>
 8009ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009eac:	1e13      	subs	r3, r2, #0
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	bf18      	it	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	0692      	lsls	r2, r2, #26
 8009eb6:	d42b      	bmi.n	8009f10 <_printf_common+0xb0>
 8009eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	47c0      	blx	r8
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	d01e      	beq.n	8009f04 <_printf_common+0xa4>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	6922      	ldr	r2, [r4, #16]
 8009eca:	f003 0306 	and.w	r3, r3, #6
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	bf02      	ittt	eq
 8009ed2:	68e5      	ldreq	r5, [r4, #12]
 8009ed4:	6833      	ldreq	r3, [r6, #0]
 8009ed6:	1aed      	subeq	r5, r5, r3
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	bf0c      	ite	eq
 8009edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ee0:	2500      	movne	r5, #0
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	bfc4      	itt	gt
 8009ee6:	1a9b      	subgt	r3, r3, r2
 8009ee8:	18ed      	addgt	r5, r5, r3
 8009eea:	2600      	movs	r6, #0
 8009eec:	341a      	adds	r4, #26
 8009eee:	42b5      	cmp	r5, r6
 8009ef0:	d11a      	bne.n	8009f28 <_printf_common+0xc8>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e008      	b.n	8009f08 <_printf_common+0xa8>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4652      	mov	r2, sl
 8009efa:	4649      	mov	r1, r9
 8009efc:	4638      	mov	r0, r7
 8009efe:	47c0      	blx	r8
 8009f00:	3001      	adds	r0, #1
 8009f02:	d103      	bne.n	8009f0c <_printf_common+0xac>
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0c:	3501      	adds	r5, #1
 8009f0e:	e7c6      	b.n	8009e9e <_printf_common+0x3e>
 8009f10:	18e1      	adds	r1, r4, r3
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	2030      	movs	r0, #48	; 0x30
 8009f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f1a:	4422      	add	r2, r4
 8009f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f24:	3302      	adds	r3, #2
 8009f26:	e7c7      	b.n	8009eb8 <_printf_common+0x58>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	4638      	mov	r0, r7
 8009f30:	47c0      	blx	r8
 8009f32:	3001      	adds	r0, #1
 8009f34:	d0e6      	beq.n	8009f04 <_printf_common+0xa4>
 8009f36:	3601      	adds	r6, #1
 8009f38:	e7d9      	b.n	8009eee <_printf_common+0x8e>
	...

08009f3c <_printf_i>:
 8009f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	7e0f      	ldrb	r7, [r1, #24]
 8009f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f44:	2f78      	cmp	r7, #120	; 0x78
 8009f46:	4691      	mov	r9, r2
 8009f48:	4680      	mov	r8, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	469a      	mov	sl, r3
 8009f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f52:	d807      	bhi.n	8009f64 <_printf_i+0x28>
 8009f54:	2f62      	cmp	r7, #98	; 0x62
 8009f56:	d80a      	bhi.n	8009f6e <_printf_i+0x32>
 8009f58:	2f00      	cmp	r7, #0
 8009f5a:	f000 80d4 	beq.w	800a106 <_printf_i+0x1ca>
 8009f5e:	2f58      	cmp	r7, #88	; 0x58
 8009f60:	f000 80c0 	beq.w	800a0e4 <_printf_i+0x1a8>
 8009f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f6c:	e03a      	b.n	8009fe4 <_printf_i+0xa8>
 8009f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f72:	2b15      	cmp	r3, #21
 8009f74:	d8f6      	bhi.n	8009f64 <_printf_i+0x28>
 8009f76:	a101      	add	r1, pc, #4	; (adr r1, 8009f7c <_printf_i+0x40>)
 8009f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f7c:	08009fd5 	.word	0x08009fd5
 8009f80:	08009fe9 	.word	0x08009fe9
 8009f84:	08009f65 	.word	0x08009f65
 8009f88:	08009f65 	.word	0x08009f65
 8009f8c:	08009f65 	.word	0x08009f65
 8009f90:	08009f65 	.word	0x08009f65
 8009f94:	08009fe9 	.word	0x08009fe9
 8009f98:	08009f65 	.word	0x08009f65
 8009f9c:	08009f65 	.word	0x08009f65
 8009fa0:	08009f65 	.word	0x08009f65
 8009fa4:	08009f65 	.word	0x08009f65
 8009fa8:	0800a0ed 	.word	0x0800a0ed
 8009fac:	0800a015 	.word	0x0800a015
 8009fb0:	0800a0a7 	.word	0x0800a0a7
 8009fb4:	08009f65 	.word	0x08009f65
 8009fb8:	08009f65 	.word	0x08009f65
 8009fbc:	0800a10f 	.word	0x0800a10f
 8009fc0:	08009f65 	.word	0x08009f65
 8009fc4:	0800a015 	.word	0x0800a015
 8009fc8:	08009f65 	.word	0x08009f65
 8009fcc:	08009f65 	.word	0x08009f65
 8009fd0:	0800a0af 	.word	0x0800a0af
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	1d1a      	adds	r2, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	602a      	str	r2, [r5, #0]
 8009fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e09f      	b.n	800a128 <_printf_i+0x1ec>
 8009fe8:	6820      	ldr	r0, [r4, #0]
 8009fea:	682b      	ldr	r3, [r5, #0]
 8009fec:	0607      	lsls	r7, r0, #24
 8009fee:	f103 0104 	add.w	r1, r3, #4
 8009ff2:	6029      	str	r1, [r5, #0]
 8009ff4:	d501      	bpl.n	8009ffa <_printf_i+0xbe>
 8009ff6:	681e      	ldr	r6, [r3, #0]
 8009ff8:	e003      	b.n	800a002 <_printf_i+0xc6>
 8009ffa:	0646      	lsls	r6, r0, #25
 8009ffc:	d5fb      	bpl.n	8009ff6 <_printf_i+0xba>
 8009ffe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a002:	2e00      	cmp	r6, #0
 800a004:	da03      	bge.n	800a00e <_printf_i+0xd2>
 800a006:	232d      	movs	r3, #45	; 0x2d
 800a008:	4276      	negs	r6, r6
 800a00a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a00e:	485a      	ldr	r0, [pc, #360]	; (800a178 <_printf_i+0x23c>)
 800a010:	230a      	movs	r3, #10
 800a012:	e012      	b.n	800a03a <_printf_i+0xfe>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	6820      	ldr	r0, [r4, #0]
 800a018:	1d19      	adds	r1, r3, #4
 800a01a:	6029      	str	r1, [r5, #0]
 800a01c:	0605      	lsls	r5, r0, #24
 800a01e:	d501      	bpl.n	800a024 <_printf_i+0xe8>
 800a020:	681e      	ldr	r6, [r3, #0]
 800a022:	e002      	b.n	800a02a <_printf_i+0xee>
 800a024:	0641      	lsls	r1, r0, #25
 800a026:	d5fb      	bpl.n	800a020 <_printf_i+0xe4>
 800a028:	881e      	ldrh	r6, [r3, #0]
 800a02a:	4853      	ldr	r0, [pc, #332]	; (800a178 <_printf_i+0x23c>)
 800a02c:	2f6f      	cmp	r7, #111	; 0x6f
 800a02e:	bf0c      	ite	eq
 800a030:	2308      	moveq	r3, #8
 800a032:	230a      	movne	r3, #10
 800a034:	2100      	movs	r1, #0
 800a036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a03a:	6865      	ldr	r5, [r4, #4]
 800a03c:	60a5      	str	r5, [r4, #8]
 800a03e:	2d00      	cmp	r5, #0
 800a040:	bfa2      	ittt	ge
 800a042:	6821      	ldrge	r1, [r4, #0]
 800a044:	f021 0104 	bicge.w	r1, r1, #4
 800a048:	6021      	strge	r1, [r4, #0]
 800a04a:	b90e      	cbnz	r6, 800a050 <_printf_i+0x114>
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	d04b      	beq.n	800a0e8 <_printf_i+0x1ac>
 800a050:	4615      	mov	r5, r2
 800a052:	fbb6 f1f3 	udiv	r1, r6, r3
 800a056:	fb03 6711 	mls	r7, r3, r1, r6
 800a05a:	5dc7      	ldrb	r7, [r0, r7]
 800a05c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a060:	4637      	mov	r7, r6
 800a062:	42bb      	cmp	r3, r7
 800a064:	460e      	mov	r6, r1
 800a066:	d9f4      	bls.n	800a052 <_printf_i+0x116>
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d10b      	bne.n	800a084 <_printf_i+0x148>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	07de      	lsls	r6, r3, #31
 800a070:	d508      	bpl.n	800a084 <_printf_i+0x148>
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	6861      	ldr	r1, [r4, #4]
 800a076:	4299      	cmp	r1, r3
 800a078:	bfde      	ittt	le
 800a07a:	2330      	movle	r3, #48	; 0x30
 800a07c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a080:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a084:	1b52      	subs	r2, r2, r5
 800a086:	6122      	str	r2, [r4, #16]
 800a088:	f8cd a000 	str.w	sl, [sp]
 800a08c:	464b      	mov	r3, r9
 800a08e:	aa03      	add	r2, sp, #12
 800a090:	4621      	mov	r1, r4
 800a092:	4640      	mov	r0, r8
 800a094:	f7ff fee4 	bl	8009e60 <_printf_common>
 800a098:	3001      	adds	r0, #1
 800a09a:	d14a      	bne.n	800a132 <_printf_i+0x1f6>
 800a09c:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a0:	b004      	add	sp, #16
 800a0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	f043 0320 	orr.w	r3, r3, #32
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	4833      	ldr	r0, [pc, #204]	; (800a17c <_printf_i+0x240>)
 800a0b0:	2778      	movs	r7, #120	; 0x78
 800a0b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	6829      	ldr	r1, [r5, #0]
 800a0ba:	061f      	lsls	r7, r3, #24
 800a0bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0c0:	d402      	bmi.n	800a0c8 <_printf_i+0x18c>
 800a0c2:	065f      	lsls	r7, r3, #25
 800a0c4:	bf48      	it	mi
 800a0c6:	b2b6      	uxthmi	r6, r6
 800a0c8:	07df      	lsls	r7, r3, #31
 800a0ca:	bf48      	it	mi
 800a0cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a0d0:	6029      	str	r1, [r5, #0]
 800a0d2:	bf48      	it	mi
 800a0d4:	6023      	strmi	r3, [r4, #0]
 800a0d6:	b91e      	cbnz	r6, 800a0e0 <_printf_i+0x1a4>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	f023 0320 	bic.w	r3, r3, #32
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	e7a7      	b.n	800a034 <_printf_i+0xf8>
 800a0e4:	4824      	ldr	r0, [pc, #144]	; (800a178 <_printf_i+0x23c>)
 800a0e6:	e7e4      	b.n	800a0b2 <_printf_i+0x176>
 800a0e8:	4615      	mov	r5, r2
 800a0ea:	e7bd      	b.n	800a068 <_printf_i+0x12c>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	6826      	ldr	r6, [r4, #0]
 800a0f0:	6961      	ldr	r1, [r4, #20]
 800a0f2:	1d18      	adds	r0, r3, #4
 800a0f4:	6028      	str	r0, [r5, #0]
 800a0f6:	0635      	lsls	r5, r6, #24
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	d501      	bpl.n	800a100 <_printf_i+0x1c4>
 800a0fc:	6019      	str	r1, [r3, #0]
 800a0fe:	e002      	b.n	800a106 <_printf_i+0x1ca>
 800a100:	0670      	lsls	r0, r6, #25
 800a102:	d5fb      	bpl.n	800a0fc <_printf_i+0x1c0>
 800a104:	8019      	strh	r1, [r3, #0]
 800a106:	2300      	movs	r3, #0
 800a108:	6123      	str	r3, [r4, #16]
 800a10a:	4615      	mov	r5, r2
 800a10c:	e7bc      	b.n	800a088 <_printf_i+0x14c>
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	1d1a      	adds	r2, r3, #4
 800a112:	602a      	str	r2, [r5, #0]
 800a114:	681d      	ldr	r5, [r3, #0]
 800a116:	6862      	ldr	r2, [r4, #4]
 800a118:	2100      	movs	r1, #0
 800a11a:	4628      	mov	r0, r5
 800a11c:	f7f6 f890 	bl	8000240 <memchr>
 800a120:	b108      	cbz	r0, 800a126 <_printf_i+0x1ea>
 800a122:	1b40      	subs	r0, r0, r5
 800a124:	6060      	str	r0, [r4, #4]
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	2300      	movs	r3, #0
 800a12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a130:	e7aa      	b.n	800a088 <_printf_i+0x14c>
 800a132:	6923      	ldr	r3, [r4, #16]
 800a134:	462a      	mov	r2, r5
 800a136:	4649      	mov	r1, r9
 800a138:	4640      	mov	r0, r8
 800a13a:	47d0      	blx	sl
 800a13c:	3001      	adds	r0, #1
 800a13e:	d0ad      	beq.n	800a09c <_printf_i+0x160>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	079b      	lsls	r3, r3, #30
 800a144:	d413      	bmi.n	800a16e <_printf_i+0x232>
 800a146:	68e0      	ldr	r0, [r4, #12]
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	4298      	cmp	r0, r3
 800a14c:	bfb8      	it	lt
 800a14e:	4618      	movlt	r0, r3
 800a150:	e7a6      	b.n	800a0a0 <_printf_i+0x164>
 800a152:	2301      	movs	r3, #1
 800a154:	4632      	mov	r2, r6
 800a156:	4649      	mov	r1, r9
 800a158:	4640      	mov	r0, r8
 800a15a:	47d0      	blx	sl
 800a15c:	3001      	adds	r0, #1
 800a15e:	d09d      	beq.n	800a09c <_printf_i+0x160>
 800a160:	3501      	adds	r5, #1
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	9903      	ldr	r1, [sp, #12]
 800a166:	1a5b      	subs	r3, r3, r1
 800a168:	42ab      	cmp	r3, r5
 800a16a:	dcf2      	bgt.n	800a152 <_printf_i+0x216>
 800a16c:	e7eb      	b.n	800a146 <_printf_i+0x20a>
 800a16e:	2500      	movs	r5, #0
 800a170:	f104 0619 	add.w	r6, r4, #25
 800a174:	e7f5      	b.n	800a162 <_printf_i+0x226>
 800a176:	bf00      	nop
 800a178:	0800d1c8 	.word	0x0800d1c8
 800a17c:	0800d1d9 	.word	0x0800d1d9

0800a180 <std>:
 800a180:	2300      	movs	r3, #0
 800a182:	b510      	push	{r4, lr}
 800a184:	4604      	mov	r4, r0
 800a186:	e9c0 3300 	strd	r3, r3, [r0]
 800a18a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a18e:	6083      	str	r3, [r0, #8]
 800a190:	8181      	strh	r1, [r0, #12]
 800a192:	6643      	str	r3, [r0, #100]	; 0x64
 800a194:	81c2      	strh	r2, [r0, #14]
 800a196:	6183      	str	r3, [r0, #24]
 800a198:	4619      	mov	r1, r3
 800a19a:	2208      	movs	r2, #8
 800a19c:	305c      	adds	r0, #92	; 0x5c
 800a19e:	f000 f944 	bl	800a42a <memset>
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <std+0x38>)
 800a1a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a1a6:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <std+0x3c>)
 800a1a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1aa:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <std+0x40>)
 800a1ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1ae:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <std+0x44>)
 800a1b0:	6224      	str	r4, [r4, #32]
 800a1b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800a3a1 	.word	0x0800a3a1
 800a1bc:	0800a3c7 	.word	0x0800a3c7
 800a1c0:	0800a3ff 	.word	0x0800a3ff
 800a1c4:	0800a423 	.word	0x0800a423

0800a1c8 <stdio_exit_handler>:
 800a1c8:	4a02      	ldr	r2, [pc, #8]	; (800a1d4 <stdio_exit_handler+0xc>)
 800a1ca:	4903      	ldr	r1, [pc, #12]	; (800a1d8 <stdio_exit_handler+0x10>)
 800a1cc:	4803      	ldr	r0, [pc, #12]	; (800a1dc <stdio_exit_handler+0x14>)
 800a1ce:	f000 b869 	b.w	800a2a4 <_fwalk_sglue>
 800a1d2:	bf00      	nop
 800a1d4:	20000088 	.word	0x20000088
 800a1d8:	0800c539 	.word	0x0800c539
 800a1dc:	20000094 	.word	0x20000094

0800a1e0 <cleanup_stdio>:
 800a1e0:	6841      	ldr	r1, [r0, #4]
 800a1e2:	4b0c      	ldr	r3, [pc, #48]	; (800a214 <cleanup_stdio+0x34>)
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	d001      	beq.n	800a1f0 <cleanup_stdio+0x10>
 800a1ec:	f002 f9a4 	bl	800c538 <_fflush_r>
 800a1f0:	68a1      	ldr	r1, [r4, #8]
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <cleanup_stdio+0x38>)
 800a1f4:	4299      	cmp	r1, r3
 800a1f6:	d002      	beq.n	800a1fe <cleanup_stdio+0x1e>
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f002 f99d 	bl	800c538 <_fflush_r>
 800a1fe:	68e1      	ldr	r1, [r4, #12]
 800a200:	4b06      	ldr	r3, [pc, #24]	; (800a21c <cleanup_stdio+0x3c>)
 800a202:	4299      	cmp	r1, r3
 800a204:	d004      	beq.n	800a210 <cleanup_stdio+0x30>
 800a206:	4620      	mov	r0, r4
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	f002 b994 	b.w	800c538 <_fflush_r>
 800a210:	bd10      	pop	{r4, pc}
 800a212:	bf00      	nop
 800a214:	200005e0 	.word	0x200005e0
 800a218:	20000648 	.word	0x20000648
 800a21c:	200006b0 	.word	0x200006b0

0800a220 <global_stdio_init.part.0>:
 800a220:	b510      	push	{r4, lr}
 800a222:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <global_stdio_init.part.0+0x30>)
 800a224:	4c0b      	ldr	r4, [pc, #44]	; (800a254 <global_stdio_init.part.0+0x34>)
 800a226:	4a0c      	ldr	r2, [pc, #48]	; (800a258 <global_stdio_init.part.0+0x38>)
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	4620      	mov	r0, r4
 800a22c:	2200      	movs	r2, #0
 800a22e:	2104      	movs	r1, #4
 800a230:	f7ff ffa6 	bl	800a180 <std>
 800a234:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a238:	2201      	movs	r2, #1
 800a23a:	2109      	movs	r1, #9
 800a23c:	f7ff ffa0 	bl	800a180 <std>
 800a240:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a244:	2202      	movs	r2, #2
 800a246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a24a:	2112      	movs	r1, #18
 800a24c:	f7ff bf98 	b.w	800a180 <std>
 800a250:	20000718 	.word	0x20000718
 800a254:	200005e0 	.word	0x200005e0
 800a258:	0800a1c9 	.word	0x0800a1c9

0800a25c <__sfp_lock_acquire>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__sfp_lock_acquire+0x8>)
 800a25e:	f000 b973 	b.w	800a548 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	20000721 	.word	0x20000721

0800a268 <__sfp_lock_release>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__sfp_lock_release+0x8>)
 800a26a:	f000 b96e 	b.w	800a54a <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	20000721 	.word	0x20000721

0800a274 <__sinit>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	f7ff fff0 	bl	800a25c <__sfp_lock_acquire>
 800a27c:	6a23      	ldr	r3, [r4, #32]
 800a27e:	b11b      	cbz	r3, 800a288 <__sinit+0x14>
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f7ff bff0 	b.w	800a268 <__sfp_lock_release>
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <__sinit+0x28>)
 800a28a:	6223      	str	r3, [r4, #32]
 800a28c:	4b04      	ldr	r3, [pc, #16]	; (800a2a0 <__sinit+0x2c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f5      	bne.n	800a280 <__sinit+0xc>
 800a294:	f7ff ffc4 	bl	800a220 <global_stdio_init.part.0>
 800a298:	e7f2      	b.n	800a280 <__sinit+0xc>
 800a29a:	bf00      	nop
 800a29c:	0800a1e1 	.word	0x0800a1e1
 800a2a0:	20000718 	.word	0x20000718

0800a2a4 <_fwalk_sglue>:
 800a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	4688      	mov	r8, r1
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	2600      	movs	r6, #0
 800a2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a2b8:	d505      	bpl.n	800a2c6 <_fwalk_sglue+0x22>
 800a2ba:	6824      	ldr	r4, [r4, #0]
 800a2bc:	2c00      	cmp	r4, #0
 800a2be:	d1f7      	bne.n	800a2b0 <_fwalk_sglue+0xc>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d907      	bls.n	800a2dc <_fwalk_sglue+0x38>
 800a2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	d003      	beq.n	800a2dc <_fwalk_sglue+0x38>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	47c0      	blx	r8
 800a2da:	4306      	orrs	r6, r0
 800a2dc:	3568      	adds	r5, #104	; 0x68
 800a2de:	e7e9      	b.n	800a2b4 <_fwalk_sglue+0x10>

0800a2e0 <sniprintf>:
 800a2e0:	b40c      	push	{r2, r3}
 800a2e2:	b530      	push	{r4, r5, lr}
 800a2e4:	4b17      	ldr	r3, [pc, #92]	; (800a344 <sniprintf+0x64>)
 800a2e6:	1e0c      	subs	r4, r1, #0
 800a2e8:	681d      	ldr	r5, [r3, #0]
 800a2ea:	b09d      	sub	sp, #116	; 0x74
 800a2ec:	da08      	bge.n	800a300 <sniprintf+0x20>
 800a2ee:	238b      	movs	r3, #139	; 0x8b
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	b01d      	add	sp, #116	; 0x74
 800a2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2fc:	b002      	add	sp, #8
 800a2fe:	4770      	bx	lr
 800a300:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a304:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a308:	bf14      	ite	ne
 800a30a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a30e:	4623      	moveq	r3, r4
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	9307      	str	r3, [sp, #28]
 800a314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a318:	9002      	str	r0, [sp, #8]
 800a31a:	9006      	str	r0, [sp, #24]
 800a31c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a320:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a322:	ab21      	add	r3, sp, #132	; 0x84
 800a324:	a902      	add	r1, sp, #8
 800a326:	4628      	mov	r0, r5
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	f001 fc61 	bl	800bbf0 <_svfiprintf_r>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	bfbc      	itt	lt
 800a332:	238b      	movlt	r3, #139	; 0x8b
 800a334:	602b      	strlt	r3, [r5, #0]
 800a336:	2c00      	cmp	r4, #0
 800a338:	d0dd      	beq.n	800a2f6 <sniprintf+0x16>
 800a33a:	9b02      	ldr	r3, [sp, #8]
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e7d9      	b.n	800a2f6 <sniprintf+0x16>
 800a342:	bf00      	nop
 800a344:	200000e0 	.word	0x200000e0

0800a348 <siscanf>:
 800a348:	b40e      	push	{r1, r2, r3}
 800a34a:	b510      	push	{r4, lr}
 800a34c:	b09f      	sub	sp, #124	; 0x7c
 800a34e:	ac21      	add	r4, sp, #132	; 0x84
 800a350:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a354:	f854 2b04 	ldr.w	r2, [r4], #4
 800a358:	9201      	str	r2, [sp, #4]
 800a35a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a35e:	9004      	str	r0, [sp, #16]
 800a360:	9008      	str	r0, [sp, #32]
 800a362:	f7f5 ffbd 	bl	80002e0 <strlen>
 800a366:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <siscanf+0x50>)
 800a368:	9005      	str	r0, [sp, #20]
 800a36a:	9009      	str	r0, [sp, #36]	; 0x24
 800a36c:	930d      	str	r3, [sp, #52]	; 0x34
 800a36e:	480b      	ldr	r0, [pc, #44]	; (800a39c <siscanf+0x54>)
 800a370:	9a01      	ldr	r2, [sp, #4]
 800a372:	6800      	ldr	r0, [r0, #0]
 800a374:	9403      	str	r4, [sp, #12]
 800a376:	2300      	movs	r3, #0
 800a378:	9311      	str	r3, [sp, #68]	; 0x44
 800a37a:	9316      	str	r3, [sp, #88]	; 0x58
 800a37c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a380:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a384:	a904      	add	r1, sp, #16
 800a386:	4623      	mov	r3, r4
 800a388:	f001 fd8a 	bl	800bea0 <__ssvfiscanf_r>
 800a38c:	b01f      	add	sp, #124	; 0x7c
 800a38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a392:	b003      	add	sp, #12
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	0800a3c3 	.word	0x0800a3c3
 800a39c:	200000e0 	.word	0x200000e0

0800a3a0 <__sread>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 f880 	bl	800a4ac <_read_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	bfab      	itete	ge
 800a3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b4:	181b      	addge	r3, r3, r0
 800a3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ba:	bfac      	ite	ge
 800a3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3be:	81a3      	strhlt	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__seofread>:
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	4770      	bx	lr

0800a3c6 <__swrite>:
 800a3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ca:	461f      	mov	r7, r3
 800a3cc:	898b      	ldrh	r3, [r1, #12]
 800a3ce:	05db      	lsls	r3, r3, #23
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	4616      	mov	r6, r2
 800a3d6:	d505      	bpl.n	800a3e4 <__swrite+0x1e>
 800a3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3dc:	2302      	movs	r3, #2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f000 f852 	bl	800a488 <_lseek_r>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fa:	f000 b869 	b.w	800a4d0 <_write_r>

0800a3fe <__sseek>:
 800a3fe:	b510      	push	{r4, lr}
 800a400:	460c      	mov	r4, r1
 800a402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a406:	f000 f83f 	bl	800a488 <_lseek_r>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	bf15      	itete	ne
 800a410:	6560      	strne	r0, [r4, #84]	; 0x54
 800a412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a41a:	81a3      	strheq	r3, [r4, #12]
 800a41c:	bf18      	it	ne
 800a41e:	81a3      	strhne	r3, [r4, #12]
 800a420:	bd10      	pop	{r4, pc}

0800a422 <__sclose>:
 800a422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a426:	f000 b81f 	b.w	800a468 <_close_r>

0800a42a <memset>:
 800a42a:	4402      	add	r2, r0
 800a42c:	4603      	mov	r3, r0
 800a42e:	4293      	cmp	r3, r2
 800a430:	d100      	bne.n	800a434 <memset+0xa>
 800a432:	4770      	bx	lr
 800a434:	f803 1b01 	strb.w	r1, [r3], #1
 800a438:	e7f9      	b.n	800a42e <memset+0x4>

0800a43a <strncmp>:
 800a43a:	b510      	push	{r4, lr}
 800a43c:	b16a      	cbz	r2, 800a45a <strncmp+0x20>
 800a43e:	3901      	subs	r1, #1
 800a440:	1884      	adds	r4, r0, r2
 800a442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a446:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d103      	bne.n	800a456 <strncmp+0x1c>
 800a44e:	42a0      	cmp	r0, r4
 800a450:	d001      	beq.n	800a456 <strncmp+0x1c>
 800a452:	2a00      	cmp	r2, #0
 800a454:	d1f5      	bne.n	800a442 <strncmp+0x8>
 800a456:	1ad0      	subs	r0, r2, r3
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	4610      	mov	r0, r2
 800a45c:	e7fc      	b.n	800a458 <strncmp+0x1e>
	...

0800a460 <_localeconv_r>:
 800a460:	4800      	ldr	r0, [pc, #0]	; (800a464 <_localeconv_r+0x4>)
 800a462:	4770      	bx	lr
 800a464:	200001d4 	.word	0x200001d4

0800a468 <_close_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	; (800a484 <_close_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f7 fc85 	bl	8001d82 <_close>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_close_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_close_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	2000071c 	.word	0x2000071c

0800a488 <_lseek_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d07      	ldr	r5, [pc, #28]	; (800a4a8 <_lseek_r+0x20>)
 800a48c:	4604      	mov	r4, r0
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	2200      	movs	r2, #0
 800a494:	602a      	str	r2, [r5, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	f7f7 fc9a 	bl	8001dd0 <_lseek>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_lseek_r+0x1e>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_lseek_r+0x1e>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	2000071c 	.word	0x2000071c

0800a4ac <_read_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_read_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 fc28 	bl	8001d10 <_read>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_read_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_read_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	2000071c 	.word	0x2000071c

0800a4d0 <_write_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d07      	ldr	r5, [pc, #28]	; (800a4f0 <_write_r+0x20>)
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	602a      	str	r2, [r5, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f7 fc33 	bl	8001d4a <_write>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_write_r+0x1e>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_write_r+0x1e>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	2000071c 	.word	0x2000071c

0800a4f4 <__errno>:
 800a4f4:	4b01      	ldr	r3, [pc, #4]	; (800a4fc <__errno+0x8>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	200000e0 	.word	0x200000e0

0800a500 <__libc_init_array>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4d0d      	ldr	r5, [pc, #52]	; (800a538 <__libc_init_array+0x38>)
 800a504:	4c0d      	ldr	r4, [pc, #52]	; (800a53c <__libc_init_array+0x3c>)
 800a506:	1b64      	subs	r4, r4, r5
 800a508:	10a4      	asrs	r4, r4, #2
 800a50a:	2600      	movs	r6, #0
 800a50c:	42a6      	cmp	r6, r4
 800a50e:	d109      	bne.n	800a524 <__libc_init_array+0x24>
 800a510:	4d0b      	ldr	r5, [pc, #44]	; (800a540 <__libc_init_array+0x40>)
 800a512:	4c0c      	ldr	r4, [pc, #48]	; (800a544 <__libc_init_array+0x44>)
 800a514:	f002 fd22 	bl	800cf5c <_init>
 800a518:	1b64      	subs	r4, r4, r5
 800a51a:	10a4      	asrs	r4, r4, #2
 800a51c:	2600      	movs	r6, #0
 800a51e:	42a6      	cmp	r6, r4
 800a520:	d105      	bne.n	800a52e <__libc_init_array+0x2e>
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	f855 3b04 	ldr.w	r3, [r5], #4
 800a528:	4798      	blx	r3
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7ee      	b.n	800a50c <__libc_init_array+0xc>
 800a52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a532:	4798      	blx	r3
 800a534:	3601      	adds	r6, #1
 800a536:	e7f2      	b.n	800a51e <__libc_init_array+0x1e>
 800a538:	0800d548 	.word	0x0800d548
 800a53c:	0800d548 	.word	0x0800d548
 800a540:	0800d548 	.word	0x0800d548
 800a544:	0800d54c 	.word	0x0800d54c

0800a548 <__retarget_lock_acquire_recursive>:
 800a548:	4770      	bx	lr

0800a54a <__retarget_lock_release_recursive>:
 800a54a:	4770      	bx	lr

0800a54c <quorem>:
 800a54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	6903      	ldr	r3, [r0, #16]
 800a552:	690c      	ldr	r4, [r1, #16]
 800a554:	42a3      	cmp	r3, r4
 800a556:	4607      	mov	r7, r0
 800a558:	db7e      	blt.n	800a658 <quorem+0x10c>
 800a55a:	3c01      	subs	r4, #1
 800a55c:	f101 0814 	add.w	r8, r1, #20
 800a560:	f100 0514 	add.w	r5, r0, #20
 800a564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a56e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a572:	3301      	adds	r3, #1
 800a574:	429a      	cmp	r2, r3
 800a576:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a57a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a57e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a582:	d331      	bcc.n	800a5e8 <quorem+0x9c>
 800a584:	f04f 0e00 	mov.w	lr, #0
 800a588:	4640      	mov	r0, r8
 800a58a:	46ac      	mov	ip, r5
 800a58c:	46f2      	mov	sl, lr
 800a58e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a592:	b293      	uxth	r3, r2
 800a594:	fb06 e303 	mla	r3, r6, r3, lr
 800a598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a59c:	0c1a      	lsrs	r2, r3, #16
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a5a4:	f8dc a000 	ldr.w	sl, [ip]
 800a5a8:	fa13 f38a 	uxtah	r3, r3, sl
 800a5ac:	fb06 220e 	mla	r2, r6, lr, r2
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5c6:	4581      	cmp	r9, r0
 800a5c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5cc:	f84c 3b04 	str.w	r3, [ip], #4
 800a5d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5d4:	d2db      	bcs.n	800a58e <quorem+0x42>
 800a5d6:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5da:	b92b      	cbnz	r3, 800a5e8 <quorem+0x9c>
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	3b04      	subs	r3, #4
 800a5e0:	429d      	cmp	r5, r3
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	d32c      	bcc.n	800a640 <quorem+0xf4>
 800a5e6:	613c      	str	r4, [r7, #16]
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f001 f9a7 	bl	800b93c <__mcmp>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	db22      	blt.n	800a638 <quorem+0xec>
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5fc:	f8d1 c000 	ldr.w	ip, [r1]
 800a600:	b293      	uxth	r3, r2
 800a602:	1ac3      	subs	r3, r0, r3
 800a604:	0c12      	lsrs	r2, r2, #16
 800a606:	fa13 f38c 	uxtah	r3, r3, ip
 800a60a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a60e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a612:	b29b      	uxth	r3, r3
 800a614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a618:	45c1      	cmp	r9, r8
 800a61a:	f841 3b04 	str.w	r3, [r1], #4
 800a61e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a622:	d2e9      	bcs.n	800a5f8 <quorem+0xac>
 800a624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a62c:	b922      	cbnz	r2, 800a638 <quorem+0xec>
 800a62e:	3b04      	subs	r3, #4
 800a630:	429d      	cmp	r5, r3
 800a632:	461a      	mov	r2, r3
 800a634:	d30a      	bcc.n	800a64c <quorem+0x100>
 800a636:	613c      	str	r4, [r7, #16]
 800a638:	4630      	mov	r0, r6
 800a63a:	b003      	add	sp, #12
 800a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a640:	6812      	ldr	r2, [r2, #0]
 800a642:	3b04      	subs	r3, #4
 800a644:	2a00      	cmp	r2, #0
 800a646:	d1ce      	bne.n	800a5e6 <quorem+0x9a>
 800a648:	3c01      	subs	r4, #1
 800a64a:	e7c9      	b.n	800a5e0 <quorem+0x94>
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	3b04      	subs	r3, #4
 800a650:	2a00      	cmp	r2, #0
 800a652:	d1f0      	bne.n	800a636 <quorem+0xea>
 800a654:	3c01      	subs	r4, #1
 800a656:	e7eb      	b.n	800a630 <quorem+0xe4>
 800a658:	2000      	movs	r0, #0
 800a65a:	e7ee      	b.n	800a63a <quorem+0xee>
 800a65c:	0000      	movs	r0, r0
	...

0800a660 <_dtoa_r>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	ed2d 8b04 	vpush	{d8-d9}
 800a668:	69c5      	ldr	r5, [r0, #28]
 800a66a:	b093      	sub	sp, #76	; 0x4c
 800a66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a670:	ec57 6b10 	vmov	r6, r7, d0
 800a674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a678:	9107      	str	r1, [sp, #28]
 800a67a:	4604      	mov	r4, r0
 800a67c:	920a      	str	r2, [sp, #40]	; 0x28
 800a67e:	930d      	str	r3, [sp, #52]	; 0x34
 800a680:	b975      	cbnz	r5, 800a6a0 <_dtoa_r+0x40>
 800a682:	2010      	movs	r0, #16
 800a684:	f000 fe2a 	bl	800b2dc <malloc>
 800a688:	4602      	mov	r2, r0
 800a68a:	61e0      	str	r0, [r4, #28]
 800a68c:	b920      	cbnz	r0, 800a698 <_dtoa_r+0x38>
 800a68e:	4bae      	ldr	r3, [pc, #696]	; (800a948 <_dtoa_r+0x2e8>)
 800a690:	21ef      	movs	r1, #239	; 0xef
 800a692:	48ae      	ldr	r0, [pc, #696]	; (800a94c <_dtoa_r+0x2ec>)
 800a694:	f002 f824 	bl	800c6e0 <__assert_func>
 800a698:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a69c:	6005      	str	r5, [r0, #0]
 800a69e:	60c5      	str	r5, [r0, #12]
 800a6a0:	69e3      	ldr	r3, [r4, #28]
 800a6a2:	6819      	ldr	r1, [r3, #0]
 800a6a4:	b151      	cbz	r1, 800a6bc <_dtoa_r+0x5c>
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	604a      	str	r2, [r1, #4]
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4093      	lsls	r3, r2
 800a6ae:	608b      	str	r3, [r1, #8]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 ff07 	bl	800b4c4 <_Bfree>
 800a6b6:	69e3      	ldr	r3, [r4, #28]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	1e3b      	subs	r3, r7, #0
 800a6be:	bfbb      	ittet	lt
 800a6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6c4:	9303      	strlt	r3, [sp, #12]
 800a6c6:	2300      	movge	r3, #0
 800a6c8:	2201      	movlt	r2, #1
 800a6ca:	bfac      	ite	ge
 800a6cc:	f8c8 3000 	strge.w	r3, [r8]
 800a6d0:	f8c8 2000 	strlt.w	r2, [r8]
 800a6d4:	4b9e      	ldr	r3, [pc, #632]	; (800a950 <_dtoa_r+0x2f0>)
 800a6d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a6da:	ea33 0308 	bics.w	r3, r3, r8
 800a6de:	d11b      	bne.n	800a718 <_dtoa_r+0xb8>
 800a6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a6ec:	4333      	orrs	r3, r6
 800a6ee:	f000 8593 	beq.w	800b218 <_dtoa_r+0xbb8>
 800a6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f4:	b963      	cbnz	r3, 800a710 <_dtoa_r+0xb0>
 800a6f6:	4b97      	ldr	r3, [pc, #604]	; (800a954 <_dtoa_r+0x2f4>)
 800a6f8:	e027      	b.n	800a74a <_dtoa_r+0xea>
 800a6fa:	4b97      	ldr	r3, [pc, #604]	; (800a958 <_dtoa_r+0x2f8>)
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	3308      	adds	r3, #8
 800a700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	9800      	ldr	r0, [sp, #0]
 800a706:	b013      	add	sp, #76	; 0x4c
 800a708:	ecbd 8b04 	vpop	{d8-d9}
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a710:	4b90      	ldr	r3, [pc, #576]	; (800a954 <_dtoa_r+0x2f4>)
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	3303      	adds	r3, #3
 800a716:	e7f3      	b.n	800a700 <_dtoa_r+0xa0>
 800a718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a71c:	2200      	movs	r2, #0
 800a71e:	ec51 0b17 	vmov	r0, r1, d7
 800a722:	eeb0 8a47 	vmov.f32	s16, s14
 800a726:	eef0 8a67 	vmov.f32	s17, s15
 800a72a:	2300      	movs	r3, #0
 800a72c:	f7f6 fa04 	bl	8000b38 <__aeabi_dcmpeq>
 800a730:	4681      	mov	r9, r0
 800a732:	b160      	cbz	r0, 800a74e <_dtoa_r+0xee>
 800a734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a736:	2301      	movs	r3, #1
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 8568 	beq.w	800b212 <_dtoa_r+0xbb2>
 800a742:	4b86      	ldr	r3, [pc, #536]	; (800a95c <_dtoa_r+0x2fc>)
 800a744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	3b01      	subs	r3, #1
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	e7da      	b.n	800a704 <_dtoa_r+0xa4>
 800a74e:	aa10      	add	r2, sp, #64	; 0x40
 800a750:	a911      	add	r1, sp, #68	; 0x44
 800a752:	4620      	mov	r0, r4
 800a754:	eeb0 0a48 	vmov.f32	s0, s16
 800a758:	eef0 0a68 	vmov.f32	s1, s17
 800a75c:	f001 f994 	bl	800ba88 <__d2b>
 800a760:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a764:	4682      	mov	sl, r0
 800a766:	2d00      	cmp	r5, #0
 800a768:	d07f      	beq.n	800a86a <_dtoa_r+0x20a>
 800a76a:	ee18 3a90 	vmov	r3, s17
 800a76e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a772:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a776:	ec51 0b18 	vmov	r0, r1, d8
 800a77a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a782:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a786:	4619      	mov	r1, r3
 800a788:	2200      	movs	r2, #0
 800a78a:	4b75      	ldr	r3, [pc, #468]	; (800a960 <_dtoa_r+0x300>)
 800a78c:	f7f5 fdb4 	bl	80002f8 <__aeabi_dsub>
 800a790:	a367      	add	r3, pc, #412	; (adr r3, 800a930 <_dtoa_r+0x2d0>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f7f5 ff67 	bl	8000668 <__aeabi_dmul>
 800a79a:	a367      	add	r3, pc, #412	; (adr r3, 800a938 <_dtoa_r+0x2d8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 fdac 	bl	80002fc <__adddf3>
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	f7f5 fef3 	bl	8000594 <__aeabi_i2d>
 800a7ae:	a364      	add	r3, pc, #400	; (adr r3, 800a940 <_dtoa_r+0x2e0>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f7f5 ff58 	bl	8000668 <__aeabi_dmul>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4630      	mov	r0, r6
 800a7be:	4639      	mov	r1, r7
 800a7c0:	f7f5 fd9c 	bl	80002fc <__adddf3>
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	f7f6 f9fe 	bl	8000bc8 <__aeabi_d2iz>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	4683      	mov	fp, r0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f9b9 	bl	8000b4c <__aeabi_dcmplt>
 800a7da:	b148      	cbz	r0, 800a7f0 <_dtoa_r+0x190>
 800a7dc:	4658      	mov	r0, fp
 800a7de:	f7f5 fed9 	bl	8000594 <__aeabi_i2d>
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	f7f6 f9a7 	bl	8000b38 <__aeabi_dcmpeq>
 800a7ea:	b908      	cbnz	r0, 800a7f0 <_dtoa_r+0x190>
 800a7ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7f0:	f1bb 0f16 	cmp.w	fp, #22
 800a7f4:	d857      	bhi.n	800a8a6 <_dtoa_r+0x246>
 800a7f6:	4b5b      	ldr	r3, [pc, #364]	; (800a964 <_dtoa_r+0x304>)
 800a7f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	ec51 0b18 	vmov	r0, r1, d8
 800a804:	f7f6 f9a2 	bl	8000b4c <__aeabi_dcmplt>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d04e      	beq.n	800a8aa <_dtoa_r+0x24a>
 800a80c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a810:	2300      	movs	r3, #0
 800a812:	930c      	str	r3, [sp, #48]	; 0x30
 800a814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a816:	1b5b      	subs	r3, r3, r5
 800a818:	1e5a      	subs	r2, r3, #1
 800a81a:	bf45      	ittet	mi
 800a81c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a820:	9305      	strmi	r3, [sp, #20]
 800a822:	2300      	movpl	r3, #0
 800a824:	2300      	movmi	r3, #0
 800a826:	9206      	str	r2, [sp, #24]
 800a828:	bf54      	ite	pl
 800a82a:	9305      	strpl	r3, [sp, #20]
 800a82c:	9306      	strmi	r3, [sp, #24]
 800a82e:	f1bb 0f00 	cmp.w	fp, #0
 800a832:	db3c      	blt.n	800a8ae <_dtoa_r+0x24e>
 800a834:	9b06      	ldr	r3, [sp, #24]
 800a836:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a83a:	445b      	add	r3, fp
 800a83c:	9306      	str	r3, [sp, #24]
 800a83e:	2300      	movs	r3, #0
 800a840:	9308      	str	r3, [sp, #32]
 800a842:	9b07      	ldr	r3, [sp, #28]
 800a844:	2b09      	cmp	r3, #9
 800a846:	d868      	bhi.n	800a91a <_dtoa_r+0x2ba>
 800a848:	2b05      	cmp	r3, #5
 800a84a:	bfc4      	itt	gt
 800a84c:	3b04      	subgt	r3, #4
 800a84e:	9307      	strgt	r3, [sp, #28]
 800a850:	9b07      	ldr	r3, [sp, #28]
 800a852:	f1a3 0302 	sub.w	r3, r3, #2
 800a856:	bfcc      	ite	gt
 800a858:	2500      	movgt	r5, #0
 800a85a:	2501      	movle	r5, #1
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	f200 8085 	bhi.w	800a96c <_dtoa_r+0x30c>
 800a862:	e8df f003 	tbb	[pc, r3]
 800a866:	3b2e      	.short	0x3b2e
 800a868:	5839      	.short	0x5839
 800a86a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a86e:	441d      	add	r5, r3
 800a870:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a874:	2b20      	cmp	r3, #32
 800a876:	bfc1      	itttt	gt
 800a878:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a87c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a880:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a884:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a888:	bfd6      	itet	le
 800a88a:	f1c3 0320 	rsble	r3, r3, #32
 800a88e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a892:	fa06 f003 	lslle.w	r0, r6, r3
 800a896:	f7f5 fe6d 	bl	8000574 <__aeabi_ui2d>
 800a89a:	2201      	movs	r2, #1
 800a89c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a8a0:	3d01      	subs	r5, #1
 800a8a2:	920e      	str	r2, [sp, #56]	; 0x38
 800a8a4:	e76f      	b.n	800a786 <_dtoa_r+0x126>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e7b3      	b.n	800a812 <_dtoa_r+0x1b2>
 800a8aa:	900c      	str	r0, [sp, #48]	; 0x30
 800a8ac:	e7b2      	b.n	800a814 <_dtoa_r+0x1b4>
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	eba3 030b 	sub.w	r3, r3, fp
 800a8b4:	9305      	str	r3, [sp, #20]
 800a8b6:	f1cb 0300 	rsb	r3, fp, #0
 800a8ba:	9308      	str	r3, [sp, #32]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c0:	e7bf      	b.n	800a842 <_dtoa_r+0x1e2>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dc52      	bgt.n	800a972 <_dtoa_r+0x312>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a8d6:	e00b      	b.n	800a8f0 <_dtoa_r+0x290>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e7f3      	b.n	800a8c4 <_dtoa_r+0x264>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e2:	445b      	add	r3, fp
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	bfb8      	it	lt
 800a8ee:	2301      	movlt	r3, #1
 800a8f0:	69e0      	ldr	r0, [r4, #28]
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	2204      	movs	r2, #4
 800a8f6:	f102 0614 	add.w	r6, r2, #20
 800a8fa:	429e      	cmp	r6, r3
 800a8fc:	d93d      	bls.n	800a97a <_dtoa_r+0x31a>
 800a8fe:	6041      	str	r1, [r0, #4]
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fd9f 	bl	800b444 <_Balloc>
 800a906:	9000      	str	r0, [sp, #0]
 800a908:	2800      	cmp	r0, #0
 800a90a:	d139      	bne.n	800a980 <_dtoa_r+0x320>
 800a90c:	4b16      	ldr	r3, [pc, #88]	; (800a968 <_dtoa_r+0x308>)
 800a90e:	4602      	mov	r2, r0
 800a910:	f240 11af 	movw	r1, #431	; 0x1af
 800a914:	e6bd      	b.n	800a692 <_dtoa_r+0x32>
 800a916:	2301      	movs	r3, #1
 800a918:	e7e1      	b.n	800a8de <_dtoa_r+0x27e>
 800a91a:	2501      	movs	r5, #1
 800a91c:	2300      	movs	r3, #0
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	9509      	str	r5, [sp, #36]	; 0x24
 800a922:	f04f 33ff 	mov.w	r3, #4294967295
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	2200      	movs	r2, #0
 800a92c:	2312      	movs	r3, #18
 800a92e:	e7d1      	b.n	800a8d4 <_dtoa_r+0x274>
 800a930:	636f4361 	.word	0x636f4361
 800a934:	3fd287a7 	.word	0x3fd287a7
 800a938:	8b60c8b3 	.word	0x8b60c8b3
 800a93c:	3fc68a28 	.word	0x3fc68a28
 800a940:	509f79fb 	.word	0x509f79fb
 800a944:	3fd34413 	.word	0x3fd34413
 800a948:	0800d1f7 	.word	0x0800d1f7
 800a94c:	0800d20e 	.word	0x0800d20e
 800a950:	7ff00000 	.word	0x7ff00000
 800a954:	0800d1f3 	.word	0x0800d1f3
 800a958:	0800d1ea 	.word	0x0800d1ea
 800a95c:	0800d3f4 	.word	0x0800d3f4
 800a960:	3ff80000 	.word	0x3ff80000
 800a964:	0800d2f8 	.word	0x0800d2f8
 800a968:	0800d266 	.word	0x0800d266
 800a96c:	2301      	movs	r3, #1
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	e7d7      	b.n	800a922 <_dtoa_r+0x2c2>
 800a972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	9304      	str	r3, [sp, #16]
 800a978:	e7ba      	b.n	800a8f0 <_dtoa_r+0x290>
 800a97a:	3101      	adds	r1, #1
 800a97c:	0052      	lsls	r2, r2, #1
 800a97e:	e7ba      	b.n	800a8f6 <_dtoa_r+0x296>
 800a980:	69e3      	ldr	r3, [r4, #28]
 800a982:	9a00      	ldr	r2, [sp, #0]
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	2b0e      	cmp	r3, #14
 800a98a:	f200 80a8 	bhi.w	800aade <_dtoa_r+0x47e>
 800a98e:	2d00      	cmp	r5, #0
 800a990:	f000 80a5 	beq.w	800aade <_dtoa_r+0x47e>
 800a994:	f1bb 0f00 	cmp.w	fp, #0
 800a998:	dd38      	ble.n	800aa0c <_dtoa_r+0x3ac>
 800a99a:	4bc0      	ldr	r3, [pc, #768]	; (800ac9c <_dtoa_r+0x63c>)
 800a99c:	f00b 020f 	and.w	r2, fp, #15
 800a9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a9a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a9ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a9b0:	d019      	beq.n	800a9e6 <_dtoa_r+0x386>
 800a9b2:	4bbb      	ldr	r3, [pc, #748]	; (800aca0 <_dtoa_r+0x640>)
 800a9b4:	ec51 0b18 	vmov	r0, r1, d8
 800a9b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9bc:	f7f5 ff7e 	bl	80008bc <__aeabi_ddiv>
 800a9c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9c4:	f008 080f 	and.w	r8, r8, #15
 800a9c8:	2503      	movs	r5, #3
 800a9ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aca0 <_dtoa_r+0x640>
 800a9ce:	f1b8 0f00 	cmp.w	r8, #0
 800a9d2:	d10a      	bne.n	800a9ea <_dtoa_r+0x38a>
 800a9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d8:	4632      	mov	r2, r6
 800a9da:	463b      	mov	r3, r7
 800a9dc:	f7f5 ff6e 	bl	80008bc <__aeabi_ddiv>
 800a9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e4:	e02b      	b.n	800aa3e <_dtoa_r+0x3de>
 800a9e6:	2502      	movs	r5, #2
 800a9e8:	e7ef      	b.n	800a9ca <_dtoa_r+0x36a>
 800a9ea:	f018 0f01 	tst.w	r8, #1
 800a9ee:	d008      	beq.n	800aa02 <_dtoa_r+0x3a2>
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a9f8:	f7f5 fe36 	bl	8000668 <__aeabi_dmul>
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa06:	f109 0908 	add.w	r9, r9, #8
 800aa0a:	e7e0      	b.n	800a9ce <_dtoa_r+0x36e>
 800aa0c:	f000 809f 	beq.w	800ab4e <_dtoa_r+0x4ee>
 800aa10:	f1cb 0600 	rsb	r6, fp, #0
 800aa14:	4ba1      	ldr	r3, [pc, #644]	; (800ac9c <_dtoa_r+0x63c>)
 800aa16:	4fa2      	ldr	r7, [pc, #648]	; (800aca0 <_dtoa_r+0x640>)
 800aa18:	f006 020f 	and.w	r2, r6, #15
 800aa1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	ec51 0b18 	vmov	r0, r1, d8
 800aa28:	f7f5 fe1e 	bl	8000668 <__aeabi_dmul>
 800aa2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa30:	1136      	asrs	r6, r6, #4
 800aa32:	2300      	movs	r3, #0
 800aa34:	2502      	movs	r5, #2
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	d17e      	bne.n	800ab38 <_dtoa_r+0x4d8>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1d0      	bne.n	800a9e0 <_dtoa_r+0x380>
 800aa3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 8084 	beq.w	800ab52 <_dtoa_r+0x4f2>
 800aa4a:	4b96      	ldr	r3, [pc, #600]	; (800aca4 <_dtoa_r+0x644>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	4640      	mov	r0, r8
 800aa50:	4649      	mov	r1, r9
 800aa52:	f7f6 f87b 	bl	8000b4c <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d07b      	beq.n	800ab52 <_dtoa_r+0x4f2>
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d078      	beq.n	800ab52 <_dtoa_r+0x4f2>
 800aa60:	9b01      	ldr	r3, [sp, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd39      	ble.n	800aada <_dtoa_r+0x47a>
 800aa66:	4b90      	ldr	r3, [pc, #576]	; (800aca8 <_dtoa_r+0x648>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f5 fdfb 	bl	8000668 <__aeabi_dmul>
 800aa72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa76:	9e01      	ldr	r6, [sp, #4]
 800aa78:	f10b 37ff 	add.w	r7, fp, #4294967295
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7f5 fd86 	bl	8000594 <__aeabi_i2d>
 800aa88:	4642      	mov	r2, r8
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	f7f5 fdec 	bl	8000668 <__aeabi_dmul>
 800aa90:	4b86      	ldr	r3, [pc, #536]	; (800acac <_dtoa_r+0x64c>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	f7f5 fc32 	bl	80002fc <__adddf3>
 800aa98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aa9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa0:	9303      	str	r3, [sp, #12]
 800aaa2:	2e00      	cmp	r6, #0
 800aaa4:	d158      	bne.n	800ab58 <_dtoa_r+0x4f8>
 800aaa6:	4b82      	ldr	r3, [pc, #520]	; (800acb0 <_dtoa_r+0x650>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f5 fc23 	bl	80002f8 <__aeabi_dsub>
 800aab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aab6:	4680      	mov	r8, r0
 800aab8:	4689      	mov	r9, r1
 800aaba:	f7f6 f865 	bl	8000b88 <__aeabi_dcmpgt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f040 8296 	bne.w	800aff0 <_dtoa_r+0x990>
 800aac4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aac8:	4640      	mov	r0, r8
 800aaca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aace:	4649      	mov	r1, r9
 800aad0:	f7f6 f83c 	bl	8000b4c <__aeabi_dcmplt>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	f040 8289 	bne.w	800afec <_dtoa_r+0x98c>
 800aada:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f2c0 814e 	blt.w	800ad82 <_dtoa_r+0x722>
 800aae6:	f1bb 0f0e 	cmp.w	fp, #14
 800aaea:	f300 814a 	bgt.w	800ad82 <_dtoa_r+0x722>
 800aaee:	4b6b      	ldr	r3, [pc, #428]	; (800ac9c <_dtoa_r+0x63c>)
 800aaf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aaf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f280 80dc 	bge.w	800acb8 <_dtoa_r+0x658>
 800ab00:	9b04      	ldr	r3, [sp, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f300 80d8 	bgt.w	800acb8 <_dtoa_r+0x658>
 800ab08:	f040 826f 	bne.w	800afea <_dtoa_r+0x98a>
 800ab0c:	4b68      	ldr	r3, [pc, #416]	; (800acb0 <_dtoa_r+0x650>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4640      	mov	r0, r8
 800ab12:	4649      	mov	r1, r9
 800ab14:	f7f5 fda8 	bl	8000668 <__aeabi_dmul>
 800ab18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab1c:	f7f6 f82a 	bl	8000b74 <__aeabi_dcmpge>
 800ab20:	9e04      	ldr	r6, [sp, #16]
 800ab22:	4637      	mov	r7, r6
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f040 8245 	bne.w	800afb4 <_dtoa_r+0x954>
 800ab2a:	9d00      	ldr	r5, [sp, #0]
 800ab2c:	2331      	movs	r3, #49	; 0x31
 800ab2e:	f805 3b01 	strb.w	r3, [r5], #1
 800ab32:	f10b 0b01 	add.w	fp, fp, #1
 800ab36:	e241      	b.n	800afbc <_dtoa_r+0x95c>
 800ab38:	07f2      	lsls	r2, r6, #31
 800ab3a:	d505      	bpl.n	800ab48 <_dtoa_r+0x4e8>
 800ab3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab40:	f7f5 fd92 	bl	8000668 <__aeabi_dmul>
 800ab44:	3501      	adds	r5, #1
 800ab46:	2301      	movs	r3, #1
 800ab48:	1076      	asrs	r6, r6, #1
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	e773      	b.n	800aa36 <_dtoa_r+0x3d6>
 800ab4e:	2502      	movs	r5, #2
 800ab50:	e775      	b.n	800aa3e <_dtoa_r+0x3de>
 800ab52:	9e04      	ldr	r6, [sp, #16]
 800ab54:	465f      	mov	r7, fp
 800ab56:	e792      	b.n	800aa7e <_dtoa_r+0x41e>
 800ab58:	9900      	ldr	r1, [sp, #0]
 800ab5a:	4b50      	ldr	r3, [pc, #320]	; (800ac9c <_dtoa_r+0x63c>)
 800ab5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab60:	4431      	add	r1, r6
 800ab62:	9102      	str	r1, [sp, #8]
 800ab64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab66:	eeb0 9a47 	vmov.f32	s18, s14
 800ab6a:	eef0 9a67 	vmov.f32	s19, s15
 800ab6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab76:	2900      	cmp	r1, #0
 800ab78:	d044      	beq.n	800ac04 <_dtoa_r+0x5a4>
 800ab7a:	494e      	ldr	r1, [pc, #312]	; (800acb4 <_dtoa_r+0x654>)
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	f7f5 fe9d 	bl	80008bc <__aeabi_ddiv>
 800ab82:	ec53 2b19 	vmov	r2, r3, d9
 800ab86:	f7f5 fbb7 	bl	80002f8 <__aeabi_dsub>
 800ab8a:	9d00      	ldr	r5, [sp, #0]
 800ab8c:	ec41 0b19 	vmov	d9, r0, r1
 800ab90:	4649      	mov	r1, r9
 800ab92:	4640      	mov	r0, r8
 800ab94:	f7f6 f818 	bl	8000bc8 <__aeabi_d2iz>
 800ab98:	4606      	mov	r6, r0
 800ab9a:	f7f5 fcfb 	bl	8000594 <__aeabi_i2d>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	f7f5 fba7 	bl	80002f8 <__aeabi_dsub>
 800abaa:	3630      	adds	r6, #48	; 0x30
 800abac:	f805 6b01 	strb.w	r6, [r5], #1
 800abb0:	ec53 2b19 	vmov	r2, r3, d9
 800abb4:	4680      	mov	r8, r0
 800abb6:	4689      	mov	r9, r1
 800abb8:	f7f5 ffc8 	bl	8000b4c <__aeabi_dcmplt>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d164      	bne.n	800ac8a <_dtoa_r+0x62a>
 800abc0:	4642      	mov	r2, r8
 800abc2:	464b      	mov	r3, r9
 800abc4:	4937      	ldr	r1, [pc, #220]	; (800aca4 <_dtoa_r+0x644>)
 800abc6:	2000      	movs	r0, #0
 800abc8:	f7f5 fb96 	bl	80002f8 <__aeabi_dsub>
 800abcc:	ec53 2b19 	vmov	r2, r3, d9
 800abd0:	f7f5 ffbc 	bl	8000b4c <__aeabi_dcmplt>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	f040 80b6 	bne.w	800ad46 <_dtoa_r+0x6e6>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	429d      	cmp	r5, r3
 800abde:	f43f af7c 	beq.w	800aada <_dtoa_r+0x47a>
 800abe2:	4b31      	ldr	r3, [pc, #196]	; (800aca8 <_dtoa_r+0x648>)
 800abe4:	ec51 0b19 	vmov	r0, r1, d9
 800abe8:	2200      	movs	r2, #0
 800abea:	f7f5 fd3d 	bl	8000668 <__aeabi_dmul>
 800abee:	4b2e      	ldr	r3, [pc, #184]	; (800aca8 <_dtoa_r+0x648>)
 800abf0:	ec41 0b19 	vmov	d9, r0, r1
 800abf4:	2200      	movs	r2, #0
 800abf6:	4640      	mov	r0, r8
 800abf8:	4649      	mov	r1, r9
 800abfa:	f7f5 fd35 	bl	8000668 <__aeabi_dmul>
 800abfe:	4680      	mov	r8, r0
 800ac00:	4689      	mov	r9, r1
 800ac02:	e7c5      	b.n	800ab90 <_dtoa_r+0x530>
 800ac04:	ec51 0b17 	vmov	r0, r1, d7
 800ac08:	f7f5 fd2e 	bl	8000668 <__aeabi_dmul>
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	9d00      	ldr	r5, [sp, #0]
 800ac10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac12:	ec41 0b19 	vmov	d9, r0, r1
 800ac16:	4649      	mov	r1, r9
 800ac18:	4640      	mov	r0, r8
 800ac1a:	f7f5 ffd5 	bl	8000bc8 <__aeabi_d2iz>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	f7f5 fcb8 	bl	8000594 <__aeabi_i2d>
 800ac24:	3630      	adds	r6, #48	; 0x30
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	f7f5 fb63 	bl	80002f8 <__aeabi_dsub>
 800ac32:	f805 6b01 	strb.w	r6, [r5], #1
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	429d      	cmp	r5, r3
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	4689      	mov	r9, r1
 800ac3e:	f04f 0200 	mov.w	r2, #0
 800ac42:	d124      	bne.n	800ac8e <_dtoa_r+0x62e>
 800ac44:	4b1b      	ldr	r3, [pc, #108]	; (800acb4 <_dtoa_r+0x654>)
 800ac46:	ec51 0b19 	vmov	r0, r1, d9
 800ac4a:	f7f5 fb57 	bl	80002fc <__adddf3>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 ff97 	bl	8000b88 <__aeabi_dcmpgt>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d173      	bne.n	800ad46 <_dtoa_r+0x6e6>
 800ac5e:	ec53 2b19 	vmov	r2, r3, d9
 800ac62:	4914      	ldr	r1, [pc, #80]	; (800acb4 <_dtoa_r+0x654>)
 800ac64:	2000      	movs	r0, #0
 800ac66:	f7f5 fb47 	bl	80002f8 <__aeabi_dsub>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	f7f5 ff6b 	bl	8000b4c <__aeabi_dcmplt>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f af2f 	beq.w	800aada <_dtoa_r+0x47a>
 800ac7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac7e:	1e6b      	subs	r3, r5, #1
 800ac80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac86:	2b30      	cmp	r3, #48	; 0x30
 800ac88:	d0f8      	beq.n	800ac7c <_dtoa_r+0x61c>
 800ac8a:	46bb      	mov	fp, r7
 800ac8c:	e04a      	b.n	800ad24 <_dtoa_r+0x6c4>
 800ac8e:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <_dtoa_r+0x648>)
 800ac90:	f7f5 fcea 	bl	8000668 <__aeabi_dmul>
 800ac94:	4680      	mov	r8, r0
 800ac96:	4689      	mov	r9, r1
 800ac98:	e7bd      	b.n	800ac16 <_dtoa_r+0x5b6>
 800ac9a:	bf00      	nop
 800ac9c:	0800d2f8 	.word	0x0800d2f8
 800aca0:	0800d2d0 	.word	0x0800d2d0
 800aca4:	3ff00000 	.word	0x3ff00000
 800aca8:	40240000 	.word	0x40240000
 800acac:	401c0000 	.word	0x401c0000
 800acb0:	40140000 	.word	0x40140000
 800acb4:	3fe00000 	.word	0x3fe00000
 800acb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acbc:	9d00      	ldr	r5, [sp, #0]
 800acbe:	4642      	mov	r2, r8
 800acc0:	464b      	mov	r3, r9
 800acc2:	4630      	mov	r0, r6
 800acc4:	4639      	mov	r1, r7
 800acc6:	f7f5 fdf9 	bl	80008bc <__aeabi_ddiv>
 800acca:	f7f5 ff7d 	bl	8000bc8 <__aeabi_d2iz>
 800acce:	9001      	str	r0, [sp, #4]
 800acd0:	f7f5 fc60 	bl	8000594 <__aeabi_i2d>
 800acd4:	4642      	mov	r2, r8
 800acd6:	464b      	mov	r3, r9
 800acd8:	f7f5 fcc6 	bl	8000668 <__aeabi_dmul>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4630      	mov	r0, r6
 800ace2:	4639      	mov	r1, r7
 800ace4:	f7f5 fb08 	bl	80002f8 <__aeabi_dsub>
 800ace8:	9e01      	ldr	r6, [sp, #4]
 800acea:	9f04      	ldr	r7, [sp, #16]
 800acec:	3630      	adds	r6, #48	; 0x30
 800acee:	f805 6b01 	strb.w	r6, [r5], #1
 800acf2:	9e00      	ldr	r6, [sp, #0]
 800acf4:	1bae      	subs	r6, r5, r6
 800acf6:	42b7      	cmp	r7, r6
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	d134      	bne.n	800ad68 <_dtoa_r+0x708>
 800acfe:	f7f5 fafd 	bl	80002fc <__adddf3>
 800ad02:	4642      	mov	r2, r8
 800ad04:	464b      	mov	r3, r9
 800ad06:	4606      	mov	r6, r0
 800ad08:	460f      	mov	r7, r1
 800ad0a:	f7f5 ff3d 	bl	8000b88 <__aeabi_dcmpgt>
 800ad0e:	b9c8      	cbnz	r0, 800ad44 <_dtoa_r+0x6e4>
 800ad10:	4642      	mov	r2, r8
 800ad12:	464b      	mov	r3, r9
 800ad14:	4630      	mov	r0, r6
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 ff0e 	bl	8000b38 <__aeabi_dcmpeq>
 800ad1c:	b110      	cbz	r0, 800ad24 <_dtoa_r+0x6c4>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	07db      	lsls	r3, r3, #31
 800ad22:	d40f      	bmi.n	800ad44 <_dtoa_r+0x6e4>
 800ad24:	4651      	mov	r1, sl
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 fbcc 	bl	800b4c4 <_Bfree>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad30:	702b      	strb	r3, [r5, #0]
 800ad32:	f10b 0301 	add.w	r3, fp, #1
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f43f ace2 	beq.w	800a704 <_dtoa_r+0xa4>
 800ad40:	601d      	str	r5, [r3, #0]
 800ad42:	e4df      	b.n	800a704 <_dtoa_r+0xa4>
 800ad44:	465f      	mov	r7, fp
 800ad46:	462b      	mov	r3, r5
 800ad48:	461d      	mov	r5, r3
 800ad4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad4e:	2a39      	cmp	r2, #57	; 0x39
 800ad50:	d106      	bne.n	800ad60 <_dtoa_r+0x700>
 800ad52:	9a00      	ldr	r2, [sp, #0]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d1f7      	bne.n	800ad48 <_dtoa_r+0x6e8>
 800ad58:	9900      	ldr	r1, [sp, #0]
 800ad5a:	2230      	movs	r2, #48	; 0x30
 800ad5c:	3701      	adds	r7, #1
 800ad5e:	700a      	strb	r2, [r1, #0]
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	3201      	adds	r2, #1
 800ad64:	701a      	strb	r2, [r3, #0]
 800ad66:	e790      	b.n	800ac8a <_dtoa_r+0x62a>
 800ad68:	4ba3      	ldr	r3, [pc, #652]	; (800aff8 <_dtoa_r+0x998>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f7f5 fc7c 	bl	8000668 <__aeabi_dmul>
 800ad70:	2200      	movs	r2, #0
 800ad72:	2300      	movs	r3, #0
 800ad74:	4606      	mov	r6, r0
 800ad76:	460f      	mov	r7, r1
 800ad78:	f7f5 fede 	bl	8000b38 <__aeabi_dcmpeq>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d09e      	beq.n	800acbe <_dtoa_r+0x65e>
 800ad80:	e7d0      	b.n	800ad24 <_dtoa_r+0x6c4>
 800ad82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad84:	2a00      	cmp	r2, #0
 800ad86:	f000 80ca 	beq.w	800af1e <_dtoa_r+0x8be>
 800ad8a:	9a07      	ldr	r2, [sp, #28]
 800ad8c:	2a01      	cmp	r2, #1
 800ad8e:	f300 80ad 	bgt.w	800aeec <_dtoa_r+0x88c>
 800ad92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	f000 80a5 	beq.w	800aee4 <_dtoa_r+0x884>
 800ad9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad9e:	9e08      	ldr	r6, [sp, #32]
 800ada0:	9d05      	ldr	r5, [sp, #20]
 800ada2:	9a05      	ldr	r2, [sp, #20]
 800ada4:	441a      	add	r2, r3
 800ada6:	9205      	str	r2, [sp, #20]
 800ada8:	9a06      	ldr	r2, [sp, #24]
 800adaa:	2101      	movs	r1, #1
 800adac:	441a      	add	r2, r3
 800adae:	4620      	mov	r0, r4
 800adb0:	9206      	str	r2, [sp, #24]
 800adb2:	f000 fc3d 	bl	800b630 <__i2b>
 800adb6:	4607      	mov	r7, r0
 800adb8:	b165      	cbz	r5, 800add4 <_dtoa_r+0x774>
 800adba:	9b06      	ldr	r3, [sp, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd09      	ble.n	800add4 <_dtoa_r+0x774>
 800adc0:	42ab      	cmp	r3, r5
 800adc2:	9a05      	ldr	r2, [sp, #20]
 800adc4:	bfa8      	it	ge
 800adc6:	462b      	movge	r3, r5
 800adc8:	1ad2      	subs	r2, r2, r3
 800adca:	9205      	str	r2, [sp, #20]
 800adcc:	9a06      	ldr	r2, [sp, #24]
 800adce:	1aed      	subs	r5, r5, r3
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	9b08      	ldr	r3, [sp, #32]
 800add6:	b1f3      	cbz	r3, 800ae16 <_dtoa_r+0x7b6>
 800add8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 80a3 	beq.w	800af26 <_dtoa_r+0x8c6>
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	dd10      	ble.n	800ae06 <_dtoa_r+0x7a6>
 800ade4:	4639      	mov	r1, r7
 800ade6:	4632      	mov	r2, r6
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fce1 	bl	800b7b0 <__pow5mult>
 800adee:	4652      	mov	r2, sl
 800adf0:	4601      	mov	r1, r0
 800adf2:	4607      	mov	r7, r0
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fc31 	bl	800b65c <__multiply>
 800adfa:	4651      	mov	r1, sl
 800adfc:	4680      	mov	r8, r0
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 fb60 	bl	800b4c4 <_Bfree>
 800ae04:	46c2      	mov	sl, r8
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	1b9a      	subs	r2, r3, r6
 800ae0a:	d004      	beq.n	800ae16 <_dtoa_r+0x7b6>
 800ae0c:	4651      	mov	r1, sl
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 fcce 	bl	800b7b0 <__pow5mult>
 800ae14:	4682      	mov	sl, r0
 800ae16:	2101      	movs	r1, #1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 fc09 	bl	800b630 <__i2b>
 800ae1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	4606      	mov	r6, r0
 800ae24:	f340 8081 	ble.w	800af2a <_dtoa_r+0x8ca>
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 fcbf 	bl	800b7b0 <__pow5mult>
 800ae32:	9b07      	ldr	r3, [sp, #28]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	4606      	mov	r6, r0
 800ae38:	dd7a      	ble.n	800af30 <_dtoa_r+0x8d0>
 800ae3a:	f04f 0800 	mov.w	r8, #0
 800ae3e:	6933      	ldr	r3, [r6, #16]
 800ae40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae44:	6918      	ldr	r0, [r3, #16]
 800ae46:	f000 fba5 	bl	800b594 <__hi0bits>
 800ae4a:	f1c0 0020 	rsb	r0, r0, #32
 800ae4e:	9b06      	ldr	r3, [sp, #24]
 800ae50:	4418      	add	r0, r3
 800ae52:	f010 001f 	ands.w	r0, r0, #31
 800ae56:	f000 8094 	beq.w	800af82 <_dtoa_r+0x922>
 800ae5a:	f1c0 0320 	rsb	r3, r0, #32
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	f340 8085 	ble.w	800af6e <_dtoa_r+0x90e>
 800ae64:	9b05      	ldr	r3, [sp, #20]
 800ae66:	f1c0 001c 	rsb	r0, r0, #28
 800ae6a:	4403      	add	r3, r0
 800ae6c:	9305      	str	r3, [sp, #20]
 800ae6e:	9b06      	ldr	r3, [sp, #24]
 800ae70:	4403      	add	r3, r0
 800ae72:	4405      	add	r5, r0
 800ae74:	9306      	str	r3, [sp, #24]
 800ae76:	9b05      	ldr	r3, [sp, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd05      	ble.n	800ae88 <_dtoa_r+0x828>
 800ae7c:	4651      	mov	r1, sl
 800ae7e:	461a      	mov	r2, r3
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fcef 	bl	800b864 <__lshift>
 800ae86:	4682      	mov	sl, r0
 800ae88:	9b06      	ldr	r3, [sp, #24]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	dd05      	ble.n	800ae9a <_dtoa_r+0x83a>
 800ae8e:	4631      	mov	r1, r6
 800ae90:	461a      	mov	r2, r3
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 fce6 	bl	800b864 <__lshift>
 800ae98:	4606      	mov	r6, r0
 800ae9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d072      	beq.n	800af86 <_dtoa_r+0x926>
 800aea0:	4631      	mov	r1, r6
 800aea2:	4650      	mov	r0, sl
 800aea4:	f000 fd4a 	bl	800b93c <__mcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	da6c      	bge.n	800af86 <_dtoa_r+0x926>
 800aeac:	2300      	movs	r3, #0
 800aeae:	4651      	mov	r1, sl
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fb28 	bl	800b508 <__multadd>
 800aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aebe:	4682      	mov	sl, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 81b0 	beq.w	800b226 <_dtoa_r+0xbc6>
 800aec6:	2300      	movs	r3, #0
 800aec8:	4639      	mov	r1, r7
 800aeca:	220a      	movs	r2, #10
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fb1b 	bl	800b508 <__multadd>
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	4607      	mov	r7, r0
 800aed8:	f300 8096 	bgt.w	800b008 <_dtoa_r+0x9a8>
 800aedc:	9b07      	ldr	r3, [sp, #28]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	dc59      	bgt.n	800af96 <_dtoa_r+0x936>
 800aee2:	e091      	b.n	800b008 <_dtoa_r+0x9a8>
 800aee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeea:	e758      	b.n	800ad9e <_dtoa_r+0x73e>
 800aeec:	9b04      	ldr	r3, [sp, #16]
 800aeee:	1e5e      	subs	r6, r3, #1
 800aef0:	9b08      	ldr	r3, [sp, #32]
 800aef2:	42b3      	cmp	r3, r6
 800aef4:	bfbf      	itttt	lt
 800aef6:	9b08      	ldrlt	r3, [sp, #32]
 800aef8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aefa:	9608      	strlt	r6, [sp, #32]
 800aefc:	1af3      	sublt	r3, r6, r3
 800aefe:	bfb4      	ite	lt
 800af00:	18d2      	addlt	r2, r2, r3
 800af02:	1b9e      	subge	r6, r3, r6
 800af04:	9b04      	ldr	r3, [sp, #16]
 800af06:	bfbc      	itt	lt
 800af08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800af0a:	2600      	movlt	r6, #0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bfb7      	itett	lt
 800af10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800af14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800af18:	1a9d      	sublt	r5, r3, r2
 800af1a:	2300      	movlt	r3, #0
 800af1c:	e741      	b.n	800ada2 <_dtoa_r+0x742>
 800af1e:	9e08      	ldr	r6, [sp, #32]
 800af20:	9d05      	ldr	r5, [sp, #20]
 800af22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af24:	e748      	b.n	800adb8 <_dtoa_r+0x758>
 800af26:	9a08      	ldr	r2, [sp, #32]
 800af28:	e770      	b.n	800ae0c <_dtoa_r+0x7ac>
 800af2a:	9b07      	ldr	r3, [sp, #28]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	dc19      	bgt.n	800af64 <_dtoa_r+0x904>
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	b9bb      	cbnz	r3, 800af64 <_dtoa_r+0x904>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af3a:	b99b      	cbnz	r3, 800af64 <_dtoa_r+0x904>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af42:	0d1b      	lsrs	r3, r3, #20
 800af44:	051b      	lsls	r3, r3, #20
 800af46:	b183      	cbz	r3, 800af6a <_dtoa_r+0x90a>
 800af48:	9b05      	ldr	r3, [sp, #20]
 800af4a:	3301      	adds	r3, #1
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	3301      	adds	r3, #1
 800af52:	9306      	str	r3, [sp, #24]
 800af54:	f04f 0801 	mov.w	r8, #1
 800af58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f47f af6f 	bne.w	800ae3e <_dtoa_r+0x7de>
 800af60:	2001      	movs	r0, #1
 800af62:	e774      	b.n	800ae4e <_dtoa_r+0x7ee>
 800af64:	f04f 0800 	mov.w	r8, #0
 800af68:	e7f6      	b.n	800af58 <_dtoa_r+0x8f8>
 800af6a:	4698      	mov	r8, r3
 800af6c:	e7f4      	b.n	800af58 <_dtoa_r+0x8f8>
 800af6e:	d082      	beq.n	800ae76 <_dtoa_r+0x816>
 800af70:	9a05      	ldr	r2, [sp, #20]
 800af72:	331c      	adds	r3, #28
 800af74:	441a      	add	r2, r3
 800af76:	9205      	str	r2, [sp, #20]
 800af78:	9a06      	ldr	r2, [sp, #24]
 800af7a:	441a      	add	r2, r3
 800af7c:	441d      	add	r5, r3
 800af7e:	9206      	str	r2, [sp, #24]
 800af80:	e779      	b.n	800ae76 <_dtoa_r+0x816>
 800af82:	4603      	mov	r3, r0
 800af84:	e7f4      	b.n	800af70 <_dtoa_r+0x910>
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dc37      	bgt.n	800affc <_dtoa_r+0x99c>
 800af8c:	9b07      	ldr	r3, [sp, #28]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	dd34      	ble.n	800affc <_dtoa_r+0x99c>
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	b963      	cbnz	r3, 800afb4 <_dtoa_r+0x954>
 800af9a:	4631      	mov	r1, r6
 800af9c:	2205      	movs	r2, #5
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 fab2 	bl	800b508 <__multadd>
 800afa4:	4601      	mov	r1, r0
 800afa6:	4606      	mov	r6, r0
 800afa8:	4650      	mov	r0, sl
 800afaa:	f000 fcc7 	bl	800b93c <__mcmp>
 800afae:	2800      	cmp	r0, #0
 800afb0:	f73f adbb 	bgt.w	800ab2a <_dtoa_r+0x4ca>
 800afb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb6:	9d00      	ldr	r5, [sp, #0]
 800afb8:	ea6f 0b03 	mvn.w	fp, r3
 800afbc:	f04f 0800 	mov.w	r8, #0
 800afc0:	4631      	mov	r1, r6
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 fa7e 	bl	800b4c4 <_Bfree>
 800afc8:	2f00      	cmp	r7, #0
 800afca:	f43f aeab 	beq.w	800ad24 <_dtoa_r+0x6c4>
 800afce:	f1b8 0f00 	cmp.w	r8, #0
 800afd2:	d005      	beq.n	800afe0 <_dtoa_r+0x980>
 800afd4:	45b8      	cmp	r8, r7
 800afd6:	d003      	beq.n	800afe0 <_dtoa_r+0x980>
 800afd8:	4641      	mov	r1, r8
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 fa72 	bl	800b4c4 <_Bfree>
 800afe0:	4639      	mov	r1, r7
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 fa6e 	bl	800b4c4 <_Bfree>
 800afe8:	e69c      	b.n	800ad24 <_dtoa_r+0x6c4>
 800afea:	2600      	movs	r6, #0
 800afec:	4637      	mov	r7, r6
 800afee:	e7e1      	b.n	800afb4 <_dtoa_r+0x954>
 800aff0:	46bb      	mov	fp, r7
 800aff2:	4637      	mov	r7, r6
 800aff4:	e599      	b.n	800ab2a <_dtoa_r+0x4ca>
 800aff6:	bf00      	nop
 800aff8:	40240000 	.word	0x40240000
 800affc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 80c8 	beq.w	800b194 <_dtoa_r+0xb34>
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	2d00      	cmp	r5, #0
 800b00a:	dd05      	ble.n	800b018 <_dtoa_r+0x9b8>
 800b00c:	4639      	mov	r1, r7
 800b00e:	462a      	mov	r2, r5
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fc27 	bl	800b864 <__lshift>
 800b016:	4607      	mov	r7, r0
 800b018:	f1b8 0f00 	cmp.w	r8, #0
 800b01c:	d05b      	beq.n	800b0d6 <_dtoa_r+0xa76>
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fa0f 	bl	800b444 <_Balloc>
 800b026:	4605      	mov	r5, r0
 800b028:	b928      	cbnz	r0, 800b036 <_dtoa_r+0x9d6>
 800b02a:	4b83      	ldr	r3, [pc, #524]	; (800b238 <_dtoa_r+0xbd8>)
 800b02c:	4602      	mov	r2, r0
 800b02e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b032:	f7ff bb2e 	b.w	800a692 <_dtoa_r+0x32>
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	3202      	adds	r2, #2
 800b03a:	0092      	lsls	r2, r2, #2
 800b03c:	f107 010c 	add.w	r1, r7, #12
 800b040:	300c      	adds	r0, #12
 800b042:	f001 fb3f 	bl	800c6c4 <memcpy>
 800b046:	2201      	movs	r2, #1
 800b048:	4629      	mov	r1, r5
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 fc0a 	bl	800b864 <__lshift>
 800b050:	9b00      	ldr	r3, [sp, #0]
 800b052:	3301      	adds	r3, #1
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b05a:	4413      	add	r3, r2
 800b05c:	9308      	str	r3, [sp, #32]
 800b05e:	9b02      	ldr	r3, [sp, #8]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	46b8      	mov	r8, r7
 800b066:	9306      	str	r3, [sp, #24]
 800b068:	4607      	mov	r7, r0
 800b06a:	9b04      	ldr	r3, [sp, #16]
 800b06c:	4631      	mov	r1, r6
 800b06e:	3b01      	subs	r3, #1
 800b070:	4650      	mov	r0, sl
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	f7ff fa6a 	bl	800a54c <quorem>
 800b078:	4641      	mov	r1, r8
 800b07a:	9002      	str	r0, [sp, #8]
 800b07c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b080:	4650      	mov	r0, sl
 800b082:	f000 fc5b 	bl	800b93c <__mcmp>
 800b086:	463a      	mov	r2, r7
 800b088:	9005      	str	r0, [sp, #20]
 800b08a:	4631      	mov	r1, r6
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fc71 	bl	800b974 <__mdiff>
 800b092:	68c2      	ldr	r2, [r0, #12]
 800b094:	4605      	mov	r5, r0
 800b096:	bb02      	cbnz	r2, 800b0da <_dtoa_r+0xa7a>
 800b098:	4601      	mov	r1, r0
 800b09a:	4650      	mov	r0, sl
 800b09c:	f000 fc4e 	bl	800b93c <__mcmp>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0a8:	f000 fa0c 	bl	800b4c4 <_Bfree>
 800b0ac:	9b07      	ldr	r3, [sp, #28]
 800b0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b0:	9d04      	ldr	r5, [sp, #16]
 800b0b2:	ea43 0102 	orr.w	r1, r3, r2
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	4319      	orrs	r1, r3
 800b0ba:	d110      	bne.n	800b0de <_dtoa_r+0xa7e>
 800b0bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b0c0:	d029      	beq.n	800b116 <_dtoa_r+0xab6>
 800b0c2:	9b05      	ldr	r3, [sp, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd02      	ble.n	800b0ce <_dtoa_r+0xa6e>
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	f883 9000 	strb.w	r9, [r3]
 800b0d4:	e774      	b.n	800afc0 <_dtoa_r+0x960>
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	e7ba      	b.n	800b050 <_dtoa_r+0x9f0>
 800b0da:	2201      	movs	r2, #1
 800b0dc:	e7e1      	b.n	800b0a2 <_dtoa_r+0xa42>
 800b0de:	9b05      	ldr	r3, [sp, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	db04      	blt.n	800b0ee <_dtoa_r+0xa8e>
 800b0e4:	9907      	ldr	r1, [sp, #28]
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	9906      	ldr	r1, [sp, #24]
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	d120      	bne.n	800b130 <_dtoa_r+0xad0>
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	dded      	ble.n	800b0ce <_dtoa_r+0xa6e>
 800b0f2:	4651      	mov	r1, sl
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 fbb4 	bl	800b864 <__lshift>
 800b0fc:	4631      	mov	r1, r6
 800b0fe:	4682      	mov	sl, r0
 800b100:	f000 fc1c 	bl	800b93c <__mcmp>
 800b104:	2800      	cmp	r0, #0
 800b106:	dc03      	bgt.n	800b110 <_dtoa_r+0xab0>
 800b108:	d1e1      	bne.n	800b0ce <_dtoa_r+0xa6e>
 800b10a:	f019 0f01 	tst.w	r9, #1
 800b10e:	d0de      	beq.n	800b0ce <_dtoa_r+0xa6e>
 800b110:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b114:	d1d8      	bne.n	800b0c8 <_dtoa_r+0xa68>
 800b116:	9a01      	ldr	r2, [sp, #4]
 800b118:	2339      	movs	r3, #57	; 0x39
 800b11a:	7013      	strb	r3, [r2, #0]
 800b11c:	462b      	mov	r3, r5
 800b11e:	461d      	mov	r5, r3
 800b120:	3b01      	subs	r3, #1
 800b122:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b126:	2a39      	cmp	r2, #57	; 0x39
 800b128:	d06c      	beq.n	800b204 <_dtoa_r+0xba4>
 800b12a:	3201      	adds	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	e747      	b.n	800afc0 <_dtoa_r+0x960>
 800b130:	2a00      	cmp	r2, #0
 800b132:	dd07      	ble.n	800b144 <_dtoa_r+0xae4>
 800b134:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b138:	d0ed      	beq.n	800b116 <_dtoa_r+0xab6>
 800b13a:	9a01      	ldr	r2, [sp, #4]
 800b13c:	f109 0301 	add.w	r3, r9, #1
 800b140:	7013      	strb	r3, [r2, #0]
 800b142:	e73d      	b.n	800afc0 <_dtoa_r+0x960>
 800b144:	9b04      	ldr	r3, [sp, #16]
 800b146:	9a08      	ldr	r2, [sp, #32]
 800b148:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d043      	beq.n	800b1d8 <_dtoa_r+0xb78>
 800b150:	4651      	mov	r1, sl
 800b152:	2300      	movs	r3, #0
 800b154:	220a      	movs	r2, #10
 800b156:	4620      	mov	r0, r4
 800b158:	f000 f9d6 	bl	800b508 <__multadd>
 800b15c:	45b8      	cmp	r8, r7
 800b15e:	4682      	mov	sl, r0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	f04f 020a 	mov.w	r2, #10
 800b168:	4641      	mov	r1, r8
 800b16a:	4620      	mov	r0, r4
 800b16c:	d107      	bne.n	800b17e <_dtoa_r+0xb1e>
 800b16e:	f000 f9cb 	bl	800b508 <__multadd>
 800b172:	4680      	mov	r8, r0
 800b174:	4607      	mov	r7, r0
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	e775      	b.n	800b06a <_dtoa_r+0xa0a>
 800b17e:	f000 f9c3 	bl	800b508 <__multadd>
 800b182:	4639      	mov	r1, r7
 800b184:	4680      	mov	r8, r0
 800b186:	2300      	movs	r3, #0
 800b188:	220a      	movs	r2, #10
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 f9bc 	bl	800b508 <__multadd>
 800b190:	4607      	mov	r7, r0
 800b192:	e7f0      	b.n	800b176 <_dtoa_r+0xb16>
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	9d00      	ldr	r5, [sp, #0]
 800b19a:	4631      	mov	r1, r6
 800b19c:	4650      	mov	r0, sl
 800b19e:	f7ff f9d5 	bl	800a54c <quorem>
 800b1a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	f805 9b01 	strb.w	r9, [r5], #1
 800b1ac:	1aea      	subs	r2, r5, r3
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	dd07      	ble.n	800b1c4 <_dtoa_r+0xb64>
 800b1b4:	4651      	mov	r1, sl
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	220a      	movs	r2, #10
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f9a4 	bl	800b508 <__multadd>
 800b1c0:	4682      	mov	sl, r0
 800b1c2:	e7ea      	b.n	800b19a <_dtoa_r+0xb3a>
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bfc8      	it	gt
 800b1ca:	461d      	movgt	r5, r3
 800b1cc:	9b00      	ldr	r3, [sp, #0]
 800b1ce:	bfd8      	it	le
 800b1d0:	2501      	movle	r5, #1
 800b1d2:	441d      	add	r5, r3
 800b1d4:	f04f 0800 	mov.w	r8, #0
 800b1d8:	4651      	mov	r1, sl
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 fb41 	bl	800b864 <__lshift>
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	f000 fba9 	bl	800b93c <__mcmp>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	dc96      	bgt.n	800b11c <_dtoa_r+0xabc>
 800b1ee:	d102      	bne.n	800b1f6 <_dtoa_r+0xb96>
 800b1f0:	f019 0f01 	tst.w	r9, #1
 800b1f4:	d192      	bne.n	800b11c <_dtoa_r+0xabc>
 800b1f6:	462b      	mov	r3, r5
 800b1f8:	461d      	mov	r5, r3
 800b1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1fe:	2a30      	cmp	r2, #48	; 0x30
 800b200:	d0fa      	beq.n	800b1f8 <_dtoa_r+0xb98>
 800b202:	e6dd      	b.n	800afc0 <_dtoa_r+0x960>
 800b204:	9a00      	ldr	r2, [sp, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d189      	bne.n	800b11e <_dtoa_r+0xabe>
 800b20a:	f10b 0b01 	add.w	fp, fp, #1
 800b20e:	2331      	movs	r3, #49	; 0x31
 800b210:	e796      	b.n	800b140 <_dtoa_r+0xae0>
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <_dtoa_r+0xbdc>)
 800b214:	f7ff ba99 	b.w	800a74a <_dtoa_r+0xea>
 800b218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f47f aa6d 	bne.w	800a6fa <_dtoa_r+0x9a>
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <_dtoa_r+0xbe0>)
 800b222:	f7ff ba92 	b.w	800a74a <_dtoa_r+0xea>
 800b226:	9b01      	ldr	r3, [sp, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dcb5      	bgt.n	800b198 <_dtoa_r+0xb38>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	f73f aeb1 	bgt.w	800af96 <_dtoa_r+0x936>
 800b234:	e7b0      	b.n	800b198 <_dtoa_r+0xb38>
 800b236:	bf00      	nop
 800b238:	0800d266 	.word	0x0800d266
 800b23c:	0800d3f3 	.word	0x0800d3f3
 800b240:	0800d1ea 	.word	0x0800d1ea

0800b244 <_free_r>:
 800b244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b246:	2900      	cmp	r1, #0
 800b248:	d044      	beq.n	800b2d4 <_free_r+0x90>
 800b24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b24e:	9001      	str	r0, [sp, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f1a1 0404 	sub.w	r4, r1, #4
 800b256:	bfb8      	it	lt
 800b258:	18e4      	addlt	r4, r4, r3
 800b25a:	f000 f8e7 	bl	800b42c <__malloc_lock>
 800b25e:	4a1e      	ldr	r2, [pc, #120]	; (800b2d8 <_free_r+0x94>)
 800b260:	9801      	ldr	r0, [sp, #4]
 800b262:	6813      	ldr	r3, [r2, #0]
 800b264:	b933      	cbnz	r3, 800b274 <_free_r+0x30>
 800b266:	6063      	str	r3, [r4, #4]
 800b268:	6014      	str	r4, [r2, #0]
 800b26a:	b003      	add	sp, #12
 800b26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b270:	f000 b8e2 	b.w	800b438 <__malloc_unlock>
 800b274:	42a3      	cmp	r3, r4
 800b276:	d908      	bls.n	800b28a <_free_r+0x46>
 800b278:	6825      	ldr	r5, [r4, #0]
 800b27a:	1961      	adds	r1, r4, r5
 800b27c:	428b      	cmp	r3, r1
 800b27e:	bf01      	itttt	eq
 800b280:	6819      	ldreq	r1, [r3, #0]
 800b282:	685b      	ldreq	r3, [r3, #4]
 800b284:	1949      	addeq	r1, r1, r5
 800b286:	6021      	streq	r1, [r4, #0]
 800b288:	e7ed      	b.n	800b266 <_free_r+0x22>
 800b28a:	461a      	mov	r2, r3
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	b10b      	cbz	r3, 800b294 <_free_r+0x50>
 800b290:	42a3      	cmp	r3, r4
 800b292:	d9fa      	bls.n	800b28a <_free_r+0x46>
 800b294:	6811      	ldr	r1, [r2, #0]
 800b296:	1855      	adds	r5, r2, r1
 800b298:	42a5      	cmp	r5, r4
 800b29a:	d10b      	bne.n	800b2b4 <_free_r+0x70>
 800b29c:	6824      	ldr	r4, [r4, #0]
 800b29e:	4421      	add	r1, r4
 800b2a0:	1854      	adds	r4, r2, r1
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	6011      	str	r1, [r2, #0]
 800b2a6:	d1e0      	bne.n	800b26a <_free_r+0x26>
 800b2a8:	681c      	ldr	r4, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	6053      	str	r3, [r2, #4]
 800b2ae:	440c      	add	r4, r1
 800b2b0:	6014      	str	r4, [r2, #0]
 800b2b2:	e7da      	b.n	800b26a <_free_r+0x26>
 800b2b4:	d902      	bls.n	800b2bc <_free_r+0x78>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	e7d6      	b.n	800b26a <_free_r+0x26>
 800b2bc:	6825      	ldr	r5, [r4, #0]
 800b2be:	1961      	adds	r1, r4, r5
 800b2c0:	428b      	cmp	r3, r1
 800b2c2:	bf04      	itt	eq
 800b2c4:	6819      	ldreq	r1, [r3, #0]
 800b2c6:	685b      	ldreq	r3, [r3, #4]
 800b2c8:	6063      	str	r3, [r4, #4]
 800b2ca:	bf04      	itt	eq
 800b2cc:	1949      	addeq	r1, r1, r5
 800b2ce:	6021      	streq	r1, [r4, #0]
 800b2d0:	6054      	str	r4, [r2, #4]
 800b2d2:	e7ca      	b.n	800b26a <_free_r+0x26>
 800b2d4:	b003      	add	sp, #12
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	20000724 	.word	0x20000724

0800b2dc <malloc>:
 800b2dc:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <malloc+0xc>)
 800b2de:	4601      	mov	r1, r0
 800b2e0:	6818      	ldr	r0, [r3, #0]
 800b2e2:	f000 b823 	b.w	800b32c <_malloc_r>
 800b2e6:	bf00      	nop
 800b2e8:	200000e0 	.word	0x200000e0

0800b2ec <sbrk_aligned>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	4e0e      	ldr	r6, [pc, #56]	; (800b328 <sbrk_aligned+0x3c>)
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	6831      	ldr	r1, [r6, #0]
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	b911      	cbnz	r1, 800b2fe <sbrk_aligned+0x12>
 800b2f8:	f001 f9d4 	bl	800c6a4 <_sbrk_r>
 800b2fc:	6030      	str	r0, [r6, #0]
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f001 f9cf 	bl	800c6a4 <_sbrk_r>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d00a      	beq.n	800b320 <sbrk_aligned+0x34>
 800b30a:	1cc4      	adds	r4, r0, #3
 800b30c:	f024 0403 	bic.w	r4, r4, #3
 800b310:	42a0      	cmp	r0, r4
 800b312:	d007      	beq.n	800b324 <sbrk_aligned+0x38>
 800b314:	1a21      	subs	r1, r4, r0
 800b316:	4628      	mov	r0, r5
 800b318:	f001 f9c4 	bl	800c6a4 <_sbrk_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	d101      	bne.n	800b324 <sbrk_aligned+0x38>
 800b320:	f04f 34ff 	mov.w	r4, #4294967295
 800b324:	4620      	mov	r0, r4
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	20000728 	.word	0x20000728

0800b32c <_malloc_r>:
 800b32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b330:	1ccd      	adds	r5, r1, #3
 800b332:	f025 0503 	bic.w	r5, r5, #3
 800b336:	3508      	adds	r5, #8
 800b338:	2d0c      	cmp	r5, #12
 800b33a:	bf38      	it	cc
 800b33c:	250c      	movcc	r5, #12
 800b33e:	2d00      	cmp	r5, #0
 800b340:	4607      	mov	r7, r0
 800b342:	db01      	blt.n	800b348 <_malloc_r+0x1c>
 800b344:	42a9      	cmp	r1, r5
 800b346:	d905      	bls.n	800b354 <_malloc_r+0x28>
 800b348:	230c      	movs	r3, #12
 800b34a:	603b      	str	r3, [r7, #0]
 800b34c:	2600      	movs	r6, #0
 800b34e:	4630      	mov	r0, r6
 800b350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b428 <_malloc_r+0xfc>
 800b358:	f000 f868 	bl	800b42c <__malloc_lock>
 800b35c:	f8d8 3000 	ldr.w	r3, [r8]
 800b360:	461c      	mov	r4, r3
 800b362:	bb5c      	cbnz	r4, 800b3bc <_malloc_r+0x90>
 800b364:	4629      	mov	r1, r5
 800b366:	4638      	mov	r0, r7
 800b368:	f7ff ffc0 	bl	800b2ec <sbrk_aligned>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	4604      	mov	r4, r0
 800b370:	d155      	bne.n	800b41e <_malloc_r+0xf2>
 800b372:	f8d8 4000 	ldr.w	r4, [r8]
 800b376:	4626      	mov	r6, r4
 800b378:	2e00      	cmp	r6, #0
 800b37a:	d145      	bne.n	800b408 <_malloc_r+0xdc>
 800b37c:	2c00      	cmp	r4, #0
 800b37e:	d048      	beq.n	800b412 <_malloc_r+0xe6>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	4631      	mov	r1, r6
 800b384:	4638      	mov	r0, r7
 800b386:	eb04 0903 	add.w	r9, r4, r3
 800b38a:	f001 f98b 	bl	800c6a4 <_sbrk_r>
 800b38e:	4581      	cmp	r9, r0
 800b390:	d13f      	bne.n	800b412 <_malloc_r+0xe6>
 800b392:	6821      	ldr	r1, [r4, #0]
 800b394:	1a6d      	subs	r5, r5, r1
 800b396:	4629      	mov	r1, r5
 800b398:	4638      	mov	r0, r7
 800b39a:	f7ff ffa7 	bl	800b2ec <sbrk_aligned>
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d037      	beq.n	800b412 <_malloc_r+0xe6>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	442b      	add	r3, r5
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d038      	beq.n	800b422 <_malloc_r+0xf6>
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	42a2      	cmp	r2, r4
 800b3b4:	d12b      	bne.n	800b40e <_malloc_r+0xe2>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	605a      	str	r2, [r3, #4]
 800b3ba:	e00f      	b.n	800b3dc <_malloc_r+0xb0>
 800b3bc:	6822      	ldr	r2, [r4, #0]
 800b3be:	1b52      	subs	r2, r2, r5
 800b3c0:	d41f      	bmi.n	800b402 <_malloc_r+0xd6>
 800b3c2:	2a0b      	cmp	r2, #11
 800b3c4:	d917      	bls.n	800b3f6 <_malloc_r+0xca>
 800b3c6:	1961      	adds	r1, r4, r5
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	6025      	str	r5, [r4, #0]
 800b3cc:	bf18      	it	ne
 800b3ce:	6059      	strne	r1, [r3, #4]
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	bf08      	it	eq
 800b3d4:	f8c8 1000 	streq.w	r1, [r8]
 800b3d8:	5162      	str	r2, [r4, r5]
 800b3da:	604b      	str	r3, [r1, #4]
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f104 060b 	add.w	r6, r4, #11
 800b3e2:	f000 f829 	bl	800b438 <__malloc_unlock>
 800b3e6:	f026 0607 	bic.w	r6, r6, #7
 800b3ea:	1d23      	adds	r3, r4, #4
 800b3ec:	1af2      	subs	r2, r6, r3
 800b3ee:	d0ae      	beq.n	800b34e <_malloc_r+0x22>
 800b3f0:	1b9b      	subs	r3, r3, r6
 800b3f2:	50a3      	str	r3, [r4, r2]
 800b3f4:	e7ab      	b.n	800b34e <_malloc_r+0x22>
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	6862      	ldr	r2, [r4, #4]
 800b3fa:	d1dd      	bne.n	800b3b8 <_malloc_r+0x8c>
 800b3fc:	f8c8 2000 	str.w	r2, [r8]
 800b400:	e7ec      	b.n	800b3dc <_malloc_r+0xb0>
 800b402:	4623      	mov	r3, r4
 800b404:	6864      	ldr	r4, [r4, #4]
 800b406:	e7ac      	b.n	800b362 <_malloc_r+0x36>
 800b408:	4634      	mov	r4, r6
 800b40a:	6876      	ldr	r6, [r6, #4]
 800b40c:	e7b4      	b.n	800b378 <_malloc_r+0x4c>
 800b40e:	4613      	mov	r3, r2
 800b410:	e7cc      	b.n	800b3ac <_malloc_r+0x80>
 800b412:	230c      	movs	r3, #12
 800b414:	603b      	str	r3, [r7, #0]
 800b416:	4638      	mov	r0, r7
 800b418:	f000 f80e 	bl	800b438 <__malloc_unlock>
 800b41c:	e797      	b.n	800b34e <_malloc_r+0x22>
 800b41e:	6025      	str	r5, [r4, #0]
 800b420:	e7dc      	b.n	800b3dc <_malloc_r+0xb0>
 800b422:	605b      	str	r3, [r3, #4]
 800b424:	deff      	udf	#255	; 0xff
 800b426:	bf00      	nop
 800b428:	20000724 	.word	0x20000724

0800b42c <__malloc_lock>:
 800b42c:	4801      	ldr	r0, [pc, #4]	; (800b434 <__malloc_lock+0x8>)
 800b42e:	f7ff b88b 	b.w	800a548 <__retarget_lock_acquire_recursive>
 800b432:	bf00      	nop
 800b434:	20000720 	.word	0x20000720

0800b438 <__malloc_unlock>:
 800b438:	4801      	ldr	r0, [pc, #4]	; (800b440 <__malloc_unlock+0x8>)
 800b43a:	f7ff b886 	b.w	800a54a <__retarget_lock_release_recursive>
 800b43e:	bf00      	nop
 800b440:	20000720 	.word	0x20000720

0800b444 <_Balloc>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	69c6      	ldr	r6, [r0, #28]
 800b448:	4604      	mov	r4, r0
 800b44a:	460d      	mov	r5, r1
 800b44c:	b976      	cbnz	r6, 800b46c <_Balloc+0x28>
 800b44e:	2010      	movs	r0, #16
 800b450:	f7ff ff44 	bl	800b2dc <malloc>
 800b454:	4602      	mov	r2, r0
 800b456:	61e0      	str	r0, [r4, #28]
 800b458:	b920      	cbnz	r0, 800b464 <_Balloc+0x20>
 800b45a:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <_Balloc+0x78>)
 800b45c:	4818      	ldr	r0, [pc, #96]	; (800b4c0 <_Balloc+0x7c>)
 800b45e:	216b      	movs	r1, #107	; 0x6b
 800b460:	f001 f93e 	bl	800c6e0 <__assert_func>
 800b464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b468:	6006      	str	r6, [r0, #0]
 800b46a:	60c6      	str	r6, [r0, #12]
 800b46c:	69e6      	ldr	r6, [r4, #28]
 800b46e:	68f3      	ldr	r3, [r6, #12]
 800b470:	b183      	cbz	r3, 800b494 <_Balloc+0x50>
 800b472:	69e3      	ldr	r3, [r4, #28]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b47a:	b9b8      	cbnz	r0, 800b4ac <_Balloc+0x68>
 800b47c:	2101      	movs	r1, #1
 800b47e:	fa01 f605 	lsl.w	r6, r1, r5
 800b482:	1d72      	adds	r2, r6, #5
 800b484:	0092      	lsls	r2, r2, #2
 800b486:	4620      	mov	r0, r4
 800b488:	f001 f948 	bl	800c71c <_calloc_r>
 800b48c:	b160      	cbz	r0, 800b4a8 <_Balloc+0x64>
 800b48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b492:	e00e      	b.n	800b4b2 <_Balloc+0x6e>
 800b494:	2221      	movs	r2, #33	; 0x21
 800b496:	2104      	movs	r1, #4
 800b498:	4620      	mov	r0, r4
 800b49a:	f001 f93f 	bl	800c71c <_calloc_r>
 800b49e:	69e3      	ldr	r3, [r4, #28]
 800b4a0:	60f0      	str	r0, [r6, #12]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e4      	bne.n	800b472 <_Balloc+0x2e>
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}
 800b4ac:	6802      	ldr	r2, [r0, #0]
 800b4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4b8:	e7f7      	b.n	800b4aa <_Balloc+0x66>
 800b4ba:	bf00      	nop
 800b4bc:	0800d1f7 	.word	0x0800d1f7
 800b4c0:	0800d277 	.word	0x0800d277

0800b4c4 <_Bfree>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	69c6      	ldr	r6, [r0, #28]
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	b976      	cbnz	r6, 800b4ec <_Bfree+0x28>
 800b4ce:	2010      	movs	r0, #16
 800b4d0:	f7ff ff04 	bl	800b2dc <malloc>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	61e8      	str	r0, [r5, #28]
 800b4d8:	b920      	cbnz	r0, 800b4e4 <_Bfree+0x20>
 800b4da:	4b09      	ldr	r3, [pc, #36]	; (800b500 <_Bfree+0x3c>)
 800b4dc:	4809      	ldr	r0, [pc, #36]	; (800b504 <_Bfree+0x40>)
 800b4de:	218f      	movs	r1, #143	; 0x8f
 800b4e0:	f001 f8fe 	bl	800c6e0 <__assert_func>
 800b4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4e8:	6006      	str	r6, [r0, #0]
 800b4ea:	60c6      	str	r6, [r0, #12]
 800b4ec:	b13c      	cbz	r4, 800b4fe <_Bfree+0x3a>
 800b4ee:	69eb      	ldr	r3, [r5, #28]
 800b4f0:	6862      	ldr	r2, [r4, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4f8:	6021      	str	r1, [r4, #0]
 800b4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	0800d1f7 	.word	0x0800d1f7
 800b504:	0800d277 	.word	0x0800d277

0800b508 <__multadd>:
 800b508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b50c:	690d      	ldr	r5, [r1, #16]
 800b50e:	4607      	mov	r7, r0
 800b510:	460c      	mov	r4, r1
 800b512:	461e      	mov	r6, r3
 800b514:	f101 0c14 	add.w	ip, r1, #20
 800b518:	2000      	movs	r0, #0
 800b51a:	f8dc 3000 	ldr.w	r3, [ip]
 800b51e:	b299      	uxth	r1, r3
 800b520:	fb02 6101 	mla	r1, r2, r1, r6
 800b524:	0c1e      	lsrs	r6, r3, #16
 800b526:	0c0b      	lsrs	r3, r1, #16
 800b528:	fb02 3306 	mla	r3, r2, r6, r3
 800b52c:	b289      	uxth	r1, r1
 800b52e:	3001      	adds	r0, #1
 800b530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b534:	4285      	cmp	r5, r0
 800b536:	f84c 1b04 	str.w	r1, [ip], #4
 800b53a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b53e:	dcec      	bgt.n	800b51a <__multadd+0x12>
 800b540:	b30e      	cbz	r6, 800b586 <__multadd+0x7e>
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	42ab      	cmp	r3, r5
 800b546:	dc19      	bgt.n	800b57c <__multadd+0x74>
 800b548:	6861      	ldr	r1, [r4, #4]
 800b54a:	4638      	mov	r0, r7
 800b54c:	3101      	adds	r1, #1
 800b54e:	f7ff ff79 	bl	800b444 <_Balloc>
 800b552:	4680      	mov	r8, r0
 800b554:	b928      	cbnz	r0, 800b562 <__multadd+0x5a>
 800b556:	4602      	mov	r2, r0
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <__multadd+0x84>)
 800b55a:	480d      	ldr	r0, [pc, #52]	; (800b590 <__multadd+0x88>)
 800b55c:	21ba      	movs	r1, #186	; 0xba
 800b55e:	f001 f8bf 	bl	800c6e0 <__assert_func>
 800b562:	6922      	ldr	r2, [r4, #16]
 800b564:	3202      	adds	r2, #2
 800b566:	f104 010c 	add.w	r1, r4, #12
 800b56a:	0092      	lsls	r2, r2, #2
 800b56c:	300c      	adds	r0, #12
 800b56e:	f001 f8a9 	bl	800c6c4 <memcpy>
 800b572:	4621      	mov	r1, r4
 800b574:	4638      	mov	r0, r7
 800b576:	f7ff ffa5 	bl	800b4c4 <_Bfree>
 800b57a:	4644      	mov	r4, r8
 800b57c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b580:	3501      	adds	r5, #1
 800b582:	615e      	str	r6, [r3, #20]
 800b584:	6125      	str	r5, [r4, #16]
 800b586:	4620      	mov	r0, r4
 800b588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b58c:	0800d266 	.word	0x0800d266
 800b590:	0800d277 	.word	0x0800d277

0800b594 <__hi0bits>:
 800b594:	0c03      	lsrs	r3, r0, #16
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	b9d3      	cbnz	r3, 800b5d0 <__hi0bits+0x3c>
 800b59a:	0400      	lsls	r0, r0, #16
 800b59c:	2310      	movs	r3, #16
 800b59e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5a2:	bf04      	itt	eq
 800b5a4:	0200      	lsleq	r0, r0, #8
 800b5a6:	3308      	addeq	r3, #8
 800b5a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5ac:	bf04      	itt	eq
 800b5ae:	0100      	lsleq	r0, r0, #4
 800b5b0:	3304      	addeq	r3, #4
 800b5b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5b6:	bf04      	itt	eq
 800b5b8:	0080      	lsleq	r0, r0, #2
 800b5ba:	3302      	addeq	r3, #2
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	db05      	blt.n	800b5cc <__hi0bits+0x38>
 800b5c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5c4:	f103 0301 	add.w	r3, r3, #1
 800b5c8:	bf08      	it	eq
 800b5ca:	2320      	moveq	r3, #32
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	4770      	bx	lr
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e7e4      	b.n	800b59e <__hi0bits+0xa>

0800b5d4 <__lo0bits>:
 800b5d4:	6803      	ldr	r3, [r0, #0]
 800b5d6:	f013 0207 	ands.w	r2, r3, #7
 800b5da:	d00c      	beq.n	800b5f6 <__lo0bits+0x22>
 800b5dc:	07d9      	lsls	r1, r3, #31
 800b5de:	d422      	bmi.n	800b626 <__lo0bits+0x52>
 800b5e0:	079a      	lsls	r2, r3, #30
 800b5e2:	bf49      	itett	mi
 800b5e4:	085b      	lsrmi	r3, r3, #1
 800b5e6:	089b      	lsrpl	r3, r3, #2
 800b5e8:	6003      	strmi	r3, [r0, #0]
 800b5ea:	2201      	movmi	r2, #1
 800b5ec:	bf5c      	itt	pl
 800b5ee:	6003      	strpl	r3, [r0, #0]
 800b5f0:	2202      	movpl	r2, #2
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	4770      	bx	lr
 800b5f6:	b299      	uxth	r1, r3
 800b5f8:	b909      	cbnz	r1, 800b5fe <__lo0bits+0x2a>
 800b5fa:	0c1b      	lsrs	r3, r3, #16
 800b5fc:	2210      	movs	r2, #16
 800b5fe:	b2d9      	uxtb	r1, r3
 800b600:	b909      	cbnz	r1, 800b606 <__lo0bits+0x32>
 800b602:	3208      	adds	r2, #8
 800b604:	0a1b      	lsrs	r3, r3, #8
 800b606:	0719      	lsls	r1, r3, #28
 800b608:	bf04      	itt	eq
 800b60a:	091b      	lsreq	r3, r3, #4
 800b60c:	3204      	addeq	r2, #4
 800b60e:	0799      	lsls	r1, r3, #30
 800b610:	bf04      	itt	eq
 800b612:	089b      	lsreq	r3, r3, #2
 800b614:	3202      	addeq	r2, #2
 800b616:	07d9      	lsls	r1, r3, #31
 800b618:	d403      	bmi.n	800b622 <__lo0bits+0x4e>
 800b61a:	085b      	lsrs	r3, r3, #1
 800b61c:	f102 0201 	add.w	r2, r2, #1
 800b620:	d003      	beq.n	800b62a <__lo0bits+0x56>
 800b622:	6003      	str	r3, [r0, #0]
 800b624:	e7e5      	b.n	800b5f2 <__lo0bits+0x1e>
 800b626:	2200      	movs	r2, #0
 800b628:	e7e3      	b.n	800b5f2 <__lo0bits+0x1e>
 800b62a:	2220      	movs	r2, #32
 800b62c:	e7e1      	b.n	800b5f2 <__lo0bits+0x1e>
	...

0800b630 <__i2b>:
 800b630:	b510      	push	{r4, lr}
 800b632:	460c      	mov	r4, r1
 800b634:	2101      	movs	r1, #1
 800b636:	f7ff ff05 	bl	800b444 <_Balloc>
 800b63a:	4602      	mov	r2, r0
 800b63c:	b928      	cbnz	r0, 800b64a <__i2b+0x1a>
 800b63e:	4b05      	ldr	r3, [pc, #20]	; (800b654 <__i2b+0x24>)
 800b640:	4805      	ldr	r0, [pc, #20]	; (800b658 <__i2b+0x28>)
 800b642:	f240 1145 	movw	r1, #325	; 0x145
 800b646:	f001 f84b 	bl	800c6e0 <__assert_func>
 800b64a:	2301      	movs	r3, #1
 800b64c:	6144      	str	r4, [r0, #20]
 800b64e:	6103      	str	r3, [r0, #16]
 800b650:	bd10      	pop	{r4, pc}
 800b652:	bf00      	nop
 800b654:	0800d266 	.word	0x0800d266
 800b658:	0800d277 	.word	0x0800d277

0800b65c <__multiply>:
 800b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b660:	4691      	mov	r9, r2
 800b662:	690a      	ldr	r2, [r1, #16]
 800b664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b668:	429a      	cmp	r2, r3
 800b66a:	bfb8      	it	lt
 800b66c:	460b      	movlt	r3, r1
 800b66e:	460c      	mov	r4, r1
 800b670:	bfbc      	itt	lt
 800b672:	464c      	movlt	r4, r9
 800b674:	4699      	movlt	r9, r3
 800b676:	6927      	ldr	r7, [r4, #16]
 800b678:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b67c:	68a3      	ldr	r3, [r4, #8]
 800b67e:	6861      	ldr	r1, [r4, #4]
 800b680:	eb07 060a 	add.w	r6, r7, sl
 800b684:	42b3      	cmp	r3, r6
 800b686:	b085      	sub	sp, #20
 800b688:	bfb8      	it	lt
 800b68a:	3101      	addlt	r1, #1
 800b68c:	f7ff feda 	bl	800b444 <_Balloc>
 800b690:	b930      	cbnz	r0, 800b6a0 <__multiply+0x44>
 800b692:	4602      	mov	r2, r0
 800b694:	4b44      	ldr	r3, [pc, #272]	; (800b7a8 <__multiply+0x14c>)
 800b696:	4845      	ldr	r0, [pc, #276]	; (800b7ac <__multiply+0x150>)
 800b698:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b69c:	f001 f820 	bl	800c6e0 <__assert_func>
 800b6a0:	f100 0514 	add.w	r5, r0, #20
 800b6a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	4543      	cmp	r3, r8
 800b6ae:	d321      	bcc.n	800b6f4 <__multiply+0x98>
 800b6b0:	f104 0314 	add.w	r3, r4, #20
 800b6b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6b8:	f109 0314 	add.w	r3, r9, #20
 800b6bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6c0:	9202      	str	r2, [sp, #8]
 800b6c2:	1b3a      	subs	r2, r7, r4
 800b6c4:	3a15      	subs	r2, #21
 800b6c6:	f022 0203 	bic.w	r2, r2, #3
 800b6ca:	3204      	adds	r2, #4
 800b6cc:	f104 0115 	add.w	r1, r4, #21
 800b6d0:	428f      	cmp	r7, r1
 800b6d2:	bf38      	it	cc
 800b6d4:	2204      	movcc	r2, #4
 800b6d6:	9201      	str	r2, [sp, #4]
 800b6d8:	9a02      	ldr	r2, [sp, #8]
 800b6da:	9303      	str	r3, [sp, #12]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d80c      	bhi.n	800b6fa <__multiply+0x9e>
 800b6e0:	2e00      	cmp	r6, #0
 800b6e2:	dd03      	ble.n	800b6ec <__multiply+0x90>
 800b6e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d05b      	beq.n	800b7a4 <__multiply+0x148>
 800b6ec:	6106      	str	r6, [r0, #16]
 800b6ee:	b005      	add	sp, #20
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	f843 2b04 	str.w	r2, [r3], #4
 800b6f8:	e7d8      	b.n	800b6ac <__multiply+0x50>
 800b6fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6fe:	f1ba 0f00 	cmp.w	sl, #0
 800b702:	d024      	beq.n	800b74e <__multiply+0xf2>
 800b704:	f104 0e14 	add.w	lr, r4, #20
 800b708:	46a9      	mov	r9, r5
 800b70a:	f04f 0c00 	mov.w	ip, #0
 800b70e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b712:	f8d9 1000 	ldr.w	r1, [r9]
 800b716:	fa1f fb82 	uxth.w	fp, r2
 800b71a:	b289      	uxth	r1, r1
 800b71c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b720:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b724:	f8d9 2000 	ldr.w	r2, [r9]
 800b728:	4461      	add	r1, ip
 800b72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b72e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b736:	b289      	uxth	r1, r1
 800b738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b73c:	4577      	cmp	r7, lr
 800b73e:	f849 1b04 	str.w	r1, [r9], #4
 800b742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b746:	d8e2      	bhi.n	800b70e <__multiply+0xb2>
 800b748:	9a01      	ldr	r2, [sp, #4]
 800b74a:	f845 c002 	str.w	ip, [r5, r2]
 800b74e:	9a03      	ldr	r2, [sp, #12]
 800b750:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b754:	3304      	adds	r3, #4
 800b756:	f1b9 0f00 	cmp.w	r9, #0
 800b75a:	d021      	beq.n	800b7a0 <__multiply+0x144>
 800b75c:	6829      	ldr	r1, [r5, #0]
 800b75e:	f104 0c14 	add.w	ip, r4, #20
 800b762:	46ae      	mov	lr, r5
 800b764:	f04f 0a00 	mov.w	sl, #0
 800b768:	f8bc b000 	ldrh.w	fp, [ip]
 800b76c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b770:	fb09 220b 	mla	r2, r9, fp, r2
 800b774:	4452      	add	r2, sl
 800b776:	b289      	uxth	r1, r1
 800b778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b77c:	f84e 1b04 	str.w	r1, [lr], #4
 800b780:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b788:	f8be 1000 	ldrh.w	r1, [lr]
 800b78c:	fb09 110a 	mla	r1, r9, sl, r1
 800b790:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b794:	4567      	cmp	r7, ip
 800b796:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b79a:	d8e5      	bhi.n	800b768 <__multiply+0x10c>
 800b79c:	9a01      	ldr	r2, [sp, #4]
 800b79e:	50a9      	str	r1, [r5, r2]
 800b7a0:	3504      	adds	r5, #4
 800b7a2:	e799      	b.n	800b6d8 <__multiply+0x7c>
 800b7a4:	3e01      	subs	r6, #1
 800b7a6:	e79b      	b.n	800b6e0 <__multiply+0x84>
 800b7a8:	0800d266 	.word	0x0800d266
 800b7ac:	0800d277 	.word	0x0800d277

0800b7b0 <__pow5mult>:
 800b7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	f012 0203 	ands.w	r2, r2, #3
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460f      	mov	r7, r1
 800b7be:	d007      	beq.n	800b7d0 <__pow5mult+0x20>
 800b7c0:	4c25      	ldr	r4, [pc, #148]	; (800b858 <__pow5mult+0xa8>)
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7ca:	f7ff fe9d 	bl	800b508 <__multadd>
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	10ad      	asrs	r5, r5, #2
 800b7d2:	d03d      	beq.n	800b850 <__pow5mult+0xa0>
 800b7d4:	69f4      	ldr	r4, [r6, #28]
 800b7d6:	b97c      	cbnz	r4, 800b7f8 <__pow5mult+0x48>
 800b7d8:	2010      	movs	r0, #16
 800b7da:	f7ff fd7f 	bl	800b2dc <malloc>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	61f0      	str	r0, [r6, #28]
 800b7e2:	b928      	cbnz	r0, 800b7f0 <__pow5mult+0x40>
 800b7e4:	4b1d      	ldr	r3, [pc, #116]	; (800b85c <__pow5mult+0xac>)
 800b7e6:	481e      	ldr	r0, [pc, #120]	; (800b860 <__pow5mult+0xb0>)
 800b7e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7ec:	f000 ff78 	bl	800c6e0 <__assert_func>
 800b7f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f4:	6004      	str	r4, [r0, #0]
 800b7f6:	60c4      	str	r4, [r0, #12]
 800b7f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b800:	b94c      	cbnz	r4, 800b816 <__pow5mult+0x66>
 800b802:	f240 2171 	movw	r1, #625	; 0x271
 800b806:	4630      	mov	r0, r6
 800b808:	f7ff ff12 	bl	800b630 <__i2b>
 800b80c:	2300      	movs	r3, #0
 800b80e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b812:	4604      	mov	r4, r0
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	f04f 0900 	mov.w	r9, #0
 800b81a:	07eb      	lsls	r3, r5, #31
 800b81c:	d50a      	bpl.n	800b834 <__pow5mult+0x84>
 800b81e:	4639      	mov	r1, r7
 800b820:	4622      	mov	r2, r4
 800b822:	4630      	mov	r0, r6
 800b824:	f7ff ff1a 	bl	800b65c <__multiply>
 800b828:	4639      	mov	r1, r7
 800b82a:	4680      	mov	r8, r0
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7ff fe49 	bl	800b4c4 <_Bfree>
 800b832:	4647      	mov	r7, r8
 800b834:	106d      	asrs	r5, r5, #1
 800b836:	d00b      	beq.n	800b850 <__pow5mult+0xa0>
 800b838:	6820      	ldr	r0, [r4, #0]
 800b83a:	b938      	cbnz	r0, 800b84c <__pow5mult+0x9c>
 800b83c:	4622      	mov	r2, r4
 800b83e:	4621      	mov	r1, r4
 800b840:	4630      	mov	r0, r6
 800b842:	f7ff ff0b 	bl	800b65c <__multiply>
 800b846:	6020      	str	r0, [r4, #0]
 800b848:	f8c0 9000 	str.w	r9, [r0]
 800b84c:	4604      	mov	r4, r0
 800b84e:	e7e4      	b.n	800b81a <__pow5mult+0x6a>
 800b850:	4638      	mov	r0, r7
 800b852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b856:	bf00      	nop
 800b858:	0800d3c0 	.word	0x0800d3c0
 800b85c:	0800d1f7 	.word	0x0800d1f7
 800b860:	0800d277 	.word	0x0800d277

0800b864 <__lshift>:
 800b864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	6849      	ldr	r1, [r1, #4]
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	4607      	mov	r7, r0
 800b876:	4691      	mov	r9, r2
 800b878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b87c:	f108 0601 	add.w	r6, r8, #1
 800b880:	42b3      	cmp	r3, r6
 800b882:	db0b      	blt.n	800b89c <__lshift+0x38>
 800b884:	4638      	mov	r0, r7
 800b886:	f7ff fddd 	bl	800b444 <_Balloc>
 800b88a:	4605      	mov	r5, r0
 800b88c:	b948      	cbnz	r0, 800b8a2 <__lshift+0x3e>
 800b88e:	4602      	mov	r2, r0
 800b890:	4b28      	ldr	r3, [pc, #160]	; (800b934 <__lshift+0xd0>)
 800b892:	4829      	ldr	r0, [pc, #164]	; (800b938 <__lshift+0xd4>)
 800b894:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b898:	f000 ff22 	bl	800c6e0 <__assert_func>
 800b89c:	3101      	adds	r1, #1
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	e7ee      	b.n	800b880 <__lshift+0x1c>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f100 0114 	add.w	r1, r0, #20
 800b8a8:	f100 0210 	add.w	r2, r0, #16
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	4553      	cmp	r3, sl
 800b8b0:	db33      	blt.n	800b91a <__lshift+0xb6>
 800b8b2:	6920      	ldr	r0, [r4, #16]
 800b8b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b8:	f104 0314 	add.w	r3, r4, #20
 800b8bc:	f019 091f 	ands.w	r9, r9, #31
 800b8c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c8:	d02b      	beq.n	800b922 <__lshift+0xbe>
 800b8ca:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ce:	468a      	mov	sl, r1
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d8:	4310      	orrs	r0, r2
 800b8da:	f84a 0b04 	str.w	r0, [sl], #4
 800b8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e2:	459c      	cmp	ip, r3
 800b8e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e8:	d8f3      	bhi.n	800b8d2 <__lshift+0x6e>
 800b8ea:	ebac 0304 	sub.w	r3, ip, r4
 800b8ee:	3b15      	subs	r3, #21
 800b8f0:	f023 0303 	bic.w	r3, r3, #3
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	f104 0015 	add.w	r0, r4, #21
 800b8fa:	4584      	cmp	ip, r0
 800b8fc:	bf38      	it	cc
 800b8fe:	2304      	movcc	r3, #4
 800b900:	50ca      	str	r2, [r1, r3]
 800b902:	b10a      	cbz	r2, 800b908 <__lshift+0xa4>
 800b904:	f108 0602 	add.w	r6, r8, #2
 800b908:	3e01      	subs	r6, #1
 800b90a:	4638      	mov	r0, r7
 800b90c:	612e      	str	r6, [r5, #16]
 800b90e:	4621      	mov	r1, r4
 800b910:	f7ff fdd8 	bl	800b4c4 <_Bfree>
 800b914:	4628      	mov	r0, r5
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b91e:	3301      	adds	r3, #1
 800b920:	e7c5      	b.n	800b8ae <__lshift+0x4a>
 800b922:	3904      	subs	r1, #4
 800b924:	f853 2b04 	ldr.w	r2, [r3], #4
 800b928:	f841 2f04 	str.w	r2, [r1, #4]!
 800b92c:	459c      	cmp	ip, r3
 800b92e:	d8f9      	bhi.n	800b924 <__lshift+0xc0>
 800b930:	e7ea      	b.n	800b908 <__lshift+0xa4>
 800b932:	bf00      	nop
 800b934:	0800d266 	.word	0x0800d266
 800b938:	0800d277 	.word	0x0800d277

0800b93c <__mcmp>:
 800b93c:	b530      	push	{r4, r5, lr}
 800b93e:	6902      	ldr	r2, [r0, #16]
 800b940:	690c      	ldr	r4, [r1, #16]
 800b942:	1b12      	subs	r2, r2, r4
 800b944:	d10e      	bne.n	800b964 <__mcmp+0x28>
 800b946:	f100 0314 	add.w	r3, r0, #20
 800b94a:	3114      	adds	r1, #20
 800b94c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b95c:	42a5      	cmp	r5, r4
 800b95e:	d003      	beq.n	800b968 <__mcmp+0x2c>
 800b960:	d305      	bcc.n	800b96e <__mcmp+0x32>
 800b962:	2201      	movs	r2, #1
 800b964:	4610      	mov	r0, r2
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	4283      	cmp	r3, r0
 800b96a:	d3f3      	bcc.n	800b954 <__mcmp+0x18>
 800b96c:	e7fa      	b.n	800b964 <__mcmp+0x28>
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295
 800b972:	e7f7      	b.n	800b964 <__mcmp+0x28>

0800b974 <__mdiff>:
 800b974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b978:	460c      	mov	r4, r1
 800b97a:	4606      	mov	r6, r0
 800b97c:	4611      	mov	r1, r2
 800b97e:	4620      	mov	r0, r4
 800b980:	4690      	mov	r8, r2
 800b982:	f7ff ffdb 	bl	800b93c <__mcmp>
 800b986:	1e05      	subs	r5, r0, #0
 800b988:	d110      	bne.n	800b9ac <__mdiff+0x38>
 800b98a:	4629      	mov	r1, r5
 800b98c:	4630      	mov	r0, r6
 800b98e:	f7ff fd59 	bl	800b444 <_Balloc>
 800b992:	b930      	cbnz	r0, 800b9a2 <__mdiff+0x2e>
 800b994:	4b3a      	ldr	r3, [pc, #232]	; (800ba80 <__mdiff+0x10c>)
 800b996:	4602      	mov	r2, r0
 800b998:	f240 2137 	movw	r1, #567	; 0x237
 800b99c:	4839      	ldr	r0, [pc, #228]	; (800ba84 <__mdiff+0x110>)
 800b99e:	f000 fe9f 	bl	800c6e0 <__assert_func>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	bfa4      	itt	ge
 800b9ae:	4643      	movge	r3, r8
 800b9b0:	46a0      	movge	r8, r4
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b9b8:	bfa6      	itte	ge
 800b9ba:	461c      	movge	r4, r3
 800b9bc:	2500      	movge	r5, #0
 800b9be:	2501      	movlt	r5, #1
 800b9c0:	f7ff fd40 	bl	800b444 <_Balloc>
 800b9c4:	b920      	cbnz	r0, 800b9d0 <__mdiff+0x5c>
 800b9c6:	4b2e      	ldr	r3, [pc, #184]	; (800ba80 <__mdiff+0x10c>)
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	f240 2145 	movw	r1, #581	; 0x245
 800b9ce:	e7e5      	b.n	800b99c <__mdiff+0x28>
 800b9d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9d4:	6926      	ldr	r6, [r4, #16]
 800b9d6:	60c5      	str	r5, [r0, #12]
 800b9d8:	f104 0914 	add.w	r9, r4, #20
 800b9dc:	f108 0514 	add.w	r5, r8, #20
 800b9e0:	f100 0e14 	add.w	lr, r0, #20
 800b9e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9ec:	f108 0210 	add.w	r2, r8, #16
 800b9f0:	46f2      	mov	sl, lr
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9fc:	fa11 f88b 	uxtah	r8, r1, fp
 800ba00:	b299      	uxth	r1, r3
 800ba02:	0c1b      	lsrs	r3, r3, #16
 800ba04:	eba8 0801 	sub.w	r8, r8, r1
 800ba08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba10:	fa1f f888 	uxth.w	r8, r8
 800ba14:	1419      	asrs	r1, r3, #16
 800ba16:	454e      	cmp	r6, r9
 800ba18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba1c:	f84a 3b04 	str.w	r3, [sl], #4
 800ba20:	d8e8      	bhi.n	800b9f4 <__mdiff+0x80>
 800ba22:	1b33      	subs	r3, r6, r4
 800ba24:	3b15      	subs	r3, #21
 800ba26:	f023 0303 	bic.w	r3, r3, #3
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	3415      	adds	r4, #21
 800ba2e:	42a6      	cmp	r6, r4
 800ba30:	bf38      	it	cc
 800ba32:	2304      	movcc	r3, #4
 800ba34:	441d      	add	r5, r3
 800ba36:	4473      	add	r3, lr
 800ba38:	469e      	mov	lr, r3
 800ba3a:	462e      	mov	r6, r5
 800ba3c:	4566      	cmp	r6, ip
 800ba3e:	d30e      	bcc.n	800ba5e <__mdiff+0xea>
 800ba40:	f10c 0203 	add.w	r2, ip, #3
 800ba44:	1b52      	subs	r2, r2, r5
 800ba46:	f022 0203 	bic.w	r2, r2, #3
 800ba4a:	3d03      	subs	r5, #3
 800ba4c:	45ac      	cmp	ip, r5
 800ba4e:	bf38      	it	cc
 800ba50:	2200      	movcc	r2, #0
 800ba52:	4413      	add	r3, r2
 800ba54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba58:	b17a      	cbz	r2, 800ba7a <__mdiff+0x106>
 800ba5a:	6107      	str	r7, [r0, #16]
 800ba5c:	e7a4      	b.n	800b9a8 <__mdiff+0x34>
 800ba5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba62:	fa11 f288 	uxtah	r2, r1, r8
 800ba66:	1414      	asrs	r4, r2, #16
 800ba68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba72:	f84e 2b04 	str.w	r2, [lr], #4
 800ba76:	1421      	asrs	r1, r4, #16
 800ba78:	e7e0      	b.n	800ba3c <__mdiff+0xc8>
 800ba7a:	3f01      	subs	r7, #1
 800ba7c:	e7ea      	b.n	800ba54 <__mdiff+0xe0>
 800ba7e:	bf00      	nop
 800ba80:	0800d266 	.word	0x0800d266
 800ba84:	0800d277 	.word	0x0800d277

0800ba88 <__d2b>:
 800ba88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	460f      	mov	r7, r1
 800ba8e:	2101      	movs	r1, #1
 800ba90:	ec59 8b10 	vmov	r8, r9, d0
 800ba94:	4616      	mov	r6, r2
 800ba96:	f7ff fcd5 	bl	800b444 <_Balloc>
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	b930      	cbnz	r0, 800baac <__d2b+0x24>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	4b24      	ldr	r3, [pc, #144]	; (800bb34 <__d2b+0xac>)
 800baa2:	4825      	ldr	r0, [pc, #148]	; (800bb38 <__d2b+0xb0>)
 800baa4:	f240 310f 	movw	r1, #783	; 0x30f
 800baa8:	f000 fe1a 	bl	800c6e0 <__assert_func>
 800baac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bab4:	bb2d      	cbnz	r5, 800bb02 <__d2b+0x7a>
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	f1b8 0300 	subs.w	r3, r8, #0
 800babc:	d026      	beq.n	800bb0c <__d2b+0x84>
 800babe:	4668      	mov	r0, sp
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	f7ff fd87 	bl	800b5d4 <__lo0bits>
 800bac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800baca:	b1e8      	cbz	r0, 800bb08 <__d2b+0x80>
 800bacc:	f1c0 0320 	rsb	r3, r0, #32
 800bad0:	fa02 f303 	lsl.w	r3, r2, r3
 800bad4:	430b      	orrs	r3, r1
 800bad6:	40c2      	lsrs	r2, r0
 800bad8:	6163      	str	r3, [r4, #20]
 800bada:	9201      	str	r2, [sp, #4]
 800badc:	9b01      	ldr	r3, [sp, #4]
 800bade:	61a3      	str	r3, [r4, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bf14      	ite	ne
 800bae4:	2202      	movne	r2, #2
 800bae6:	2201      	moveq	r2, #1
 800bae8:	6122      	str	r2, [r4, #16]
 800baea:	b1bd      	cbz	r5, 800bb1c <__d2b+0x94>
 800baec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800baf0:	4405      	add	r5, r0
 800baf2:	603d      	str	r5, [r7, #0]
 800baf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800baf8:	6030      	str	r0, [r6, #0]
 800bafa:	4620      	mov	r0, r4
 800bafc:	b003      	add	sp, #12
 800bafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb06:	e7d6      	b.n	800bab6 <__d2b+0x2e>
 800bb08:	6161      	str	r1, [r4, #20]
 800bb0a:	e7e7      	b.n	800badc <__d2b+0x54>
 800bb0c:	a801      	add	r0, sp, #4
 800bb0e:	f7ff fd61 	bl	800b5d4 <__lo0bits>
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	6163      	str	r3, [r4, #20]
 800bb16:	3020      	adds	r0, #32
 800bb18:	2201      	movs	r2, #1
 800bb1a:	e7e5      	b.n	800bae8 <__d2b+0x60>
 800bb1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb24:	6038      	str	r0, [r7, #0]
 800bb26:	6918      	ldr	r0, [r3, #16]
 800bb28:	f7ff fd34 	bl	800b594 <__hi0bits>
 800bb2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb30:	e7e2      	b.n	800baf8 <__d2b+0x70>
 800bb32:	bf00      	nop
 800bb34:	0800d266 	.word	0x0800d266
 800bb38:	0800d277 	.word	0x0800d277

0800bb3c <__ssputs_r>:
 800bb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb40:	688e      	ldr	r6, [r1, #8]
 800bb42:	461f      	mov	r7, r3
 800bb44:	42be      	cmp	r6, r7
 800bb46:	680b      	ldr	r3, [r1, #0]
 800bb48:	4682      	mov	sl, r0
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	4690      	mov	r8, r2
 800bb4e:	d82c      	bhi.n	800bbaa <__ssputs_r+0x6e>
 800bb50:	898a      	ldrh	r2, [r1, #12]
 800bb52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb56:	d026      	beq.n	800bba6 <__ssputs_r+0x6a>
 800bb58:	6965      	ldr	r5, [r4, #20]
 800bb5a:	6909      	ldr	r1, [r1, #16]
 800bb5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb60:	eba3 0901 	sub.w	r9, r3, r1
 800bb64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb68:	1c7b      	adds	r3, r7, #1
 800bb6a:	444b      	add	r3, r9
 800bb6c:	106d      	asrs	r5, r5, #1
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	bf38      	it	cc
 800bb72:	461d      	movcc	r5, r3
 800bb74:	0553      	lsls	r3, r2, #21
 800bb76:	d527      	bpl.n	800bbc8 <__ssputs_r+0x8c>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7ff fbd7 	bl	800b32c <_malloc_r>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	b360      	cbz	r0, 800bbdc <__ssputs_r+0xa0>
 800bb82:	6921      	ldr	r1, [r4, #16]
 800bb84:	464a      	mov	r2, r9
 800bb86:	f000 fd9d 	bl	800c6c4 <memcpy>
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	6126      	str	r6, [r4, #16]
 800bb98:	6165      	str	r5, [r4, #20]
 800bb9a:	444e      	add	r6, r9
 800bb9c:	eba5 0509 	sub.w	r5, r5, r9
 800bba0:	6026      	str	r6, [r4, #0]
 800bba2:	60a5      	str	r5, [r4, #8]
 800bba4:	463e      	mov	r6, r7
 800bba6:	42be      	cmp	r6, r7
 800bba8:	d900      	bls.n	800bbac <__ssputs_r+0x70>
 800bbaa:	463e      	mov	r6, r7
 800bbac:	6820      	ldr	r0, [r4, #0]
 800bbae:	4632      	mov	r2, r6
 800bbb0:	4641      	mov	r1, r8
 800bbb2:	f000 fd5c 	bl	800c66e <memmove>
 800bbb6:	68a3      	ldr	r3, [r4, #8]
 800bbb8:	1b9b      	subs	r3, r3, r6
 800bbba:	60a3      	str	r3, [r4, #8]
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	4433      	add	r3, r6
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc8:	462a      	mov	r2, r5
 800bbca:	f000 fdcf 	bl	800c76c <_realloc_r>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d1e0      	bne.n	800bb96 <__ssputs_r+0x5a>
 800bbd4:	6921      	ldr	r1, [r4, #16]
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	f7ff fb34 	bl	800b244 <_free_r>
 800bbdc:	230c      	movs	r3, #12
 800bbde:	f8ca 3000 	str.w	r3, [sl]
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	f04f 30ff 	mov.w	r0, #4294967295
 800bbee:	e7e9      	b.n	800bbc4 <__ssputs_r+0x88>

0800bbf0 <_svfiprintf_r>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	4698      	mov	r8, r3
 800bbf6:	898b      	ldrh	r3, [r1, #12]
 800bbf8:	061b      	lsls	r3, r3, #24
 800bbfa:	b09d      	sub	sp, #116	; 0x74
 800bbfc:	4607      	mov	r7, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	4614      	mov	r4, r2
 800bc02:	d50e      	bpl.n	800bc22 <_svfiprintf_r+0x32>
 800bc04:	690b      	ldr	r3, [r1, #16]
 800bc06:	b963      	cbnz	r3, 800bc22 <_svfiprintf_r+0x32>
 800bc08:	2140      	movs	r1, #64	; 0x40
 800bc0a:	f7ff fb8f 	bl	800b32c <_malloc_r>
 800bc0e:	6028      	str	r0, [r5, #0]
 800bc10:	6128      	str	r0, [r5, #16]
 800bc12:	b920      	cbnz	r0, 800bc1e <_svfiprintf_r+0x2e>
 800bc14:	230c      	movs	r3, #12
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	e0d0      	b.n	800bdc0 <_svfiprintf_r+0x1d0>
 800bc1e:	2340      	movs	r3, #64	; 0x40
 800bc20:	616b      	str	r3, [r5, #20]
 800bc22:	2300      	movs	r3, #0
 800bc24:	9309      	str	r3, [sp, #36]	; 0x24
 800bc26:	2320      	movs	r3, #32
 800bc28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc30:	2330      	movs	r3, #48	; 0x30
 800bc32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdd8 <_svfiprintf_r+0x1e8>
 800bc36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc3a:	f04f 0901 	mov.w	r9, #1
 800bc3e:	4623      	mov	r3, r4
 800bc40:	469a      	mov	sl, r3
 800bc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc46:	b10a      	cbz	r2, 800bc4c <_svfiprintf_r+0x5c>
 800bc48:	2a25      	cmp	r2, #37	; 0x25
 800bc4a:	d1f9      	bne.n	800bc40 <_svfiprintf_r+0x50>
 800bc4c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc50:	d00b      	beq.n	800bc6a <_svfiprintf_r+0x7a>
 800bc52:	465b      	mov	r3, fp
 800bc54:	4622      	mov	r2, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ff6f 	bl	800bb3c <__ssputs_r>
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f000 80a9 	beq.w	800bdb6 <_svfiprintf_r+0x1c6>
 800bc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc66:	445a      	add	r2, fp
 800bc68:	9209      	str	r2, [sp, #36]	; 0x24
 800bc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 80a1 	beq.w	800bdb6 <_svfiprintf_r+0x1c6>
 800bc74:	2300      	movs	r3, #0
 800bc76:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc7e:	f10a 0a01 	add.w	sl, sl, #1
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	9307      	str	r3, [sp, #28]
 800bc86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc8a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc8c:	4654      	mov	r4, sl
 800bc8e:	2205      	movs	r2, #5
 800bc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc94:	4850      	ldr	r0, [pc, #320]	; (800bdd8 <_svfiprintf_r+0x1e8>)
 800bc96:	f7f4 fad3 	bl	8000240 <memchr>
 800bc9a:	9a04      	ldr	r2, [sp, #16]
 800bc9c:	b9d8      	cbnz	r0, 800bcd6 <_svfiprintf_r+0xe6>
 800bc9e:	06d0      	lsls	r0, r2, #27
 800bca0:	bf44      	itt	mi
 800bca2:	2320      	movmi	r3, #32
 800bca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca8:	0711      	lsls	r1, r2, #28
 800bcaa:	bf44      	itt	mi
 800bcac:	232b      	movmi	r3, #43	; 0x2b
 800bcae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb8:	d015      	beq.n	800bce6 <_svfiprintf_r+0xf6>
 800bcba:	9a07      	ldr	r2, [sp, #28]
 800bcbc:	4654      	mov	r4, sl
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f04f 0c0a 	mov.w	ip, #10
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcca:	3b30      	subs	r3, #48	; 0x30
 800bccc:	2b09      	cmp	r3, #9
 800bcce:	d94d      	bls.n	800bd6c <_svfiprintf_r+0x17c>
 800bcd0:	b1b0      	cbz	r0, 800bd00 <_svfiprintf_r+0x110>
 800bcd2:	9207      	str	r2, [sp, #28]
 800bcd4:	e014      	b.n	800bd00 <_svfiprintf_r+0x110>
 800bcd6:	eba0 0308 	sub.w	r3, r0, r8
 800bcda:	fa09 f303 	lsl.w	r3, r9, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	46a2      	mov	sl, r4
 800bce4:	e7d2      	b.n	800bc8c <_svfiprintf_r+0x9c>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d19      	adds	r1, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9103      	str	r1, [sp, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfbb      	ittet	lt
 800bcf2:	425b      	neglt	r3, r3
 800bcf4:	f042 0202 	orrlt.w	r2, r2, #2
 800bcf8:	9307      	strge	r3, [sp, #28]
 800bcfa:	9307      	strlt	r3, [sp, #28]
 800bcfc:	bfb8      	it	lt
 800bcfe:	9204      	strlt	r2, [sp, #16]
 800bd00:	7823      	ldrb	r3, [r4, #0]
 800bd02:	2b2e      	cmp	r3, #46	; 0x2e
 800bd04:	d10c      	bne.n	800bd20 <_svfiprintf_r+0x130>
 800bd06:	7863      	ldrb	r3, [r4, #1]
 800bd08:	2b2a      	cmp	r3, #42	; 0x2a
 800bd0a:	d134      	bne.n	800bd76 <_svfiprintf_r+0x186>
 800bd0c:	9b03      	ldr	r3, [sp, #12]
 800bd0e:	1d1a      	adds	r2, r3, #4
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	9203      	str	r2, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	bfb8      	it	lt
 800bd18:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd1c:	3402      	adds	r4, #2
 800bd1e:	9305      	str	r3, [sp, #20]
 800bd20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bde8 <_svfiprintf_r+0x1f8>
 800bd24:	7821      	ldrb	r1, [r4, #0]
 800bd26:	2203      	movs	r2, #3
 800bd28:	4650      	mov	r0, sl
 800bd2a:	f7f4 fa89 	bl	8000240 <memchr>
 800bd2e:	b138      	cbz	r0, 800bd40 <_svfiprintf_r+0x150>
 800bd30:	9b04      	ldr	r3, [sp, #16]
 800bd32:	eba0 000a 	sub.w	r0, r0, sl
 800bd36:	2240      	movs	r2, #64	; 0x40
 800bd38:	4082      	lsls	r2, r0
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	3401      	adds	r4, #1
 800bd3e:	9304      	str	r3, [sp, #16]
 800bd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd44:	4825      	ldr	r0, [pc, #148]	; (800bddc <_svfiprintf_r+0x1ec>)
 800bd46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd4a:	2206      	movs	r2, #6
 800bd4c:	f7f4 fa78 	bl	8000240 <memchr>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d038      	beq.n	800bdc6 <_svfiprintf_r+0x1d6>
 800bd54:	4b22      	ldr	r3, [pc, #136]	; (800bde0 <_svfiprintf_r+0x1f0>)
 800bd56:	bb1b      	cbnz	r3, 800bda0 <_svfiprintf_r+0x1b0>
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	3307      	adds	r3, #7
 800bd5c:	f023 0307 	bic.w	r3, r3, #7
 800bd60:	3308      	adds	r3, #8
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd66:	4433      	add	r3, r6
 800bd68:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6a:	e768      	b.n	800bc3e <_svfiprintf_r+0x4e>
 800bd6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd70:	460c      	mov	r4, r1
 800bd72:	2001      	movs	r0, #1
 800bd74:	e7a6      	b.n	800bcc4 <_svfiprintf_r+0xd4>
 800bd76:	2300      	movs	r3, #0
 800bd78:	3401      	adds	r4, #1
 800bd7a:	9305      	str	r3, [sp, #20]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	f04f 0c0a 	mov.w	ip, #10
 800bd82:	4620      	mov	r0, r4
 800bd84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd88:	3a30      	subs	r2, #48	; 0x30
 800bd8a:	2a09      	cmp	r2, #9
 800bd8c:	d903      	bls.n	800bd96 <_svfiprintf_r+0x1a6>
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0c6      	beq.n	800bd20 <_svfiprintf_r+0x130>
 800bd92:	9105      	str	r1, [sp, #20]
 800bd94:	e7c4      	b.n	800bd20 <_svfiprintf_r+0x130>
 800bd96:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e7f0      	b.n	800bd82 <_svfiprintf_r+0x192>
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	462a      	mov	r2, r5
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <_svfiprintf_r+0x1f4>)
 800bda8:	a904      	add	r1, sp, #16
 800bdaa:	4638      	mov	r0, r7
 800bdac:	f7fd fe22 	bl	80099f4 <_printf_float>
 800bdb0:	1c42      	adds	r2, r0, #1
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	d1d6      	bne.n	800bd64 <_svfiprintf_r+0x174>
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	065b      	lsls	r3, r3, #25
 800bdba:	f53f af2d 	bmi.w	800bc18 <_svfiprintf_r+0x28>
 800bdbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdc0:	b01d      	add	sp, #116	; 0x74
 800bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc6:	ab03      	add	r3, sp, #12
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	462a      	mov	r2, r5
 800bdcc:	4b05      	ldr	r3, [pc, #20]	; (800bde4 <_svfiprintf_r+0x1f4>)
 800bdce:	a904      	add	r1, sp, #16
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7fe f8b3 	bl	8009f3c <_printf_i>
 800bdd6:	e7eb      	b.n	800bdb0 <_svfiprintf_r+0x1c0>
 800bdd8:	0800d3cc 	.word	0x0800d3cc
 800bddc:	0800d3d6 	.word	0x0800d3d6
 800bde0:	080099f5 	.word	0x080099f5
 800bde4:	0800bb3d 	.word	0x0800bb3d
 800bde8:	0800d3d2 	.word	0x0800d3d2

0800bdec <_sungetc_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	1c4b      	adds	r3, r1, #1
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	d103      	bne.n	800bdfc <_sungetc_r+0x10>
 800bdf4:	f04f 35ff 	mov.w	r5, #4294967295
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	8993      	ldrh	r3, [r2, #12]
 800bdfe:	f023 0320 	bic.w	r3, r3, #32
 800be02:	8193      	strh	r3, [r2, #12]
 800be04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be06:	6852      	ldr	r2, [r2, #4]
 800be08:	b2cd      	uxtb	r5, r1
 800be0a:	b18b      	cbz	r3, 800be30 <_sungetc_r+0x44>
 800be0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be0e:	4293      	cmp	r3, r2
 800be10:	dd08      	ble.n	800be24 <_sungetc_r+0x38>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	1e5a      	subs	r2, r3, #1
 800be16:	6022      	str	r2, [r4, #0]
 800be18:	f803 5c01 	strb.w	r5, [r3, #-1]
 800be1c:	6863      	ldr	r3, [r4, #4]
 800be1e:	3301      	adds	r3, #1
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	e7e9      	b.n	800bdf8 <_sungetc_r+0xc>
 800be24:	4621      	mov	r1, r4
 800be26:	f000 fbe8 	bl	800c5fa <__submore>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d0f1      	beq.n	800be12 <_sungetc_r+0x26>
 800be2e:	e7e1      	b.n	800bdf4 <_sungetc_r+0x8>
 800be30:	6921      	ldr	r1, [r4, #16]
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	b151      	cbz	r1, 800be4c <_sungetc_r+0x60>
 800be36:	4299      	cmp	r1, r3
 800be38:	d208      	bcs.n	800be4c <_sungetc_r+0x60>
 800be3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800be3e:	42a9      	cmp	r1, r5
 800be40:	d104      	bne.n	800be4c <_sungetc_r+0x60>
 800be42:	3b01      	subs	r3, #1
 800be44:	3201      	adds	r2, #1
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	6062      	str	r2, [r4, #4]
 800be4a:	e7d5      	b.n	800bdf8 <_sungetc_r+0xc>
 800be4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800be50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be54:	6363      	str	r3, [r4, #52]	; 0x34
 800be56:	2303      	movs	r3, #3
 800be58:	63a3      	str	r3, [r4, #56]	; 0x38
 800be5a:	4623      	mov	r3, r4
 800be5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	2301      	movs	r3, #1
 800be64:	e7dc      	b.n	800be20 <_sungetc_r+0x34>

0800be66 <__ssrefill_r>:
 800be66:	b510      	push	{r4, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800be6c:	b169      	cbz	r1, 800be8a <__ssrefill_r+0x24>
 800be6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be72:	4299      	cmp	r1, r3
 800be74:	d001      	beq.n	800be7a <__ssrefill_r+0x14>
 800be76:	f7ff f9e5 	bl	800b244 <_free_r>
 800be7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be7c:	6063      	str	r3, [r4, #4]
 800be7e:	2000      	movs	r0, #0
 800be80:	6360      	str	r0, [r4, #52]	; 0x34
 800be82:	b113      	cbz	r3, 800be8a <__ssrefill_r+0x24>
 800be84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be86:	6023      	str	r3, [r4, #0]
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	6923      	ldr	r3, [r4, #16]
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	2300      	movs	r3, #0
 800be90:	6063      	str	r3, [r4, #4]
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f043 0320 	orr.w	r3, r3, #32
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	f04f 30ff 	mov.w	r0, #4294967295
 800be9e:	e7f3      	b.n	800be88 <__ssrefill_r+0x22>

0800bea0 <__ssvfiscanf_r>:
 800bea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea4:	460c      	mov	r4, r1
 800bea6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800beaa:	2100      	movs	r1, #0
 800beac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800beb0:	49a6      	ldr	r1, [pc, #664]	; (800c14c <__ssvfiscanf_r+0x2ac>)
 800beb2:	91a0      	str	r1, [sp, #640]	; 0x280
 800beb4:	f10d 0804 	add.w	r8, sp, #4
 800beb8:	49a5      	ldr	r1, [pc, #660]	; (800c150 <__ssvfiscanf_r+0x2b0>)
 800beba:	4fa6      	ldr	r7, [pc, #664]	; (800c154 <__ssvfiscanf_r+0x2b4>)
 800bebc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c158 <__ssvfiscanf_r+0x2b8>
 800bec0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bec4:	4606      	mov	r6, r0
 800bec6:	91a1      	str	r1, [sp, #644]	; 0x284
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	7813      	ldrb	r3, [r2, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 815a 	beq.w	800c186 <__ssvfiscanf_r+0x2e6>
 800bed2:	5cf9      	ldrb	r1, [r7, r3]
 800bed4:	f011 0108 	ands.w	r1, r1, #8
 800bed8:	f102 0501 	add.w	r5, r2, #1
 800bedc:	d019      	beq.n	800bf12 <__ssvfiscanf_r+0x72>
 800bede:	6863      	ldr	r3, [r4, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dd0f      	ble.n	800bf04 <__ssvfiscanf_r+0x64>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	5cba      	ldrb	r2, [r7, r2]
 800beea:	0712      	lsls	r2, r2, #28
 800beec:	d401      	bmi.n	800bef2 <__ssvfiscanf_r+0x52>
 800beee:	462a      	mov	r2, r5
 800bef0:	e7eb      	b.n	800beca <__ssvfiscanf_r+0x2a>
 800bef2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bef4:	3201      	adds	r2, #1
 800bef6:	9245      	str	r2, [sp, #276]	; 0x114
 800bef8:	6862      	ldr	r2, [r4, #4]
 800befa:	3301      	adds	r3, #1
 800befc:	3a01      	subs	r2, #1
 800befe:	6062      	str	r2, [r4, #4]
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	e7ec      	b.n	800bede <__ssvfiscanf_r+0x3e>
 800bf04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf06:	4621      	mov	r1, r4
 800bf08:	4630      	mov	r0, r6
 800bf0a:	4798      	blx	r3
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d0e9      	beq.n	800bee4 <__ssvfiscanf_r+0x44>
 800bf10:	e7ed      	b.n	800beee <__ssvfiscanf_r+0x4e>
 800bf12:	2b25      	cmp	r3, #37	; 0x25
 800bf14:	d012      	beq.n	800bf3c <__ssvfiscanf_r+0x9c>
 800bf16:	469a      	mov	sl, r3
 800bf18:	6863      	ldr	r3, [r4, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f340 8091 	ble.w	800c042 <__ssvfiscanf_r+0x1a2>
 800bf20:	6822      	ldr	r2, [r4, #0]
 800bf22:	7813      	ldrb	r3, [r2, #0]
 800bf24:	4553      	cmp	r3, sl
 800bf26:	f040 812e 	bne.w	800c186 <__ssvfiscanf_r+0x2e6>
 800bf2a:	6863      	ldr	r3, [r4, #4]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	6063      	str	r3, [r4, #4]
 800bf30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bf32:	3201      	adds	r2, #1
 800bf34:	3301      	adds	r3, #1
 800bf36:	6022      	str	r2, [r4, #0]
 800bf38:	9345      	str	r3, [sp, #276]	; 0x114
 800bf3a:	e7d8      	b.n	800beee <__ssvfiscanf_r+0x4e>
 800bf3c:	9141      	str	r1, [sp, #260]	; 0x104
 800bf3e:	9143      	str	r1, [sp, #268]	; 0x10c
 800bf40:	7853      	ldrb	r3, [r2, #1]
 800bf42:	2b2a      	cmp	r3, #42	; 0x2a
 800bf44:	bf02      	ittt	eq
 800bf46:	2310      	moveq	r3, #16
 800bf48:	1c95      	addeq	r5, r2, #2
 800bf4a:	9341      	streq	r3, [sp, #260]	; 0x104
 800bf4c:	220a      	movs	r2, #10
 800bf4e:	46aa      	mov	sl, r5
 800bf50:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bf54:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bf58:	2b09      	cmp	r3, #9
 800bf5a:	d91c      	bls.n	800bf96 <__ssvfiscanf_r+0xf6>
 800bf5c:	487e      	ldr	r0, [pc, #504]	; (800c158 <__ssvfiscanf_r+0x2b8>)
 800bf5e:	2203      	movs	r2, #3
 800bf60:	f7f4 f96e 	bl	8000240 <memchr>
 800bf64:	b138      	cbz	r0, 800bf76 <__ssvfiscanf_r+0xd6>
 800bf66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf68:	eba0 0009 	sub.w	r0, r0, r9
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4083      	lsls	r3, r0
 800bf70:	4313      	orrs	r3, r2
 800bf72:	9341      	str	r3, [sp, #260]	; 0x104
 800bf74:	4655      	mov	r5, sl
 800bf76:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf7a:	2b78      	cmp	r3, #120	; 0x78
 800bf7c:	d806      	bhi.n	800bf8c <__ssvfiscanf_r+0xec>
 800bf7e:	2b57      	cmp	r3, #87	; 0x57
 800bf80:	d810      	bhi.n	800bfa4 <__ssvfiscanf_r+0x104>
 800bf82:	2b25      	cmp	r3, #37	; 0x25
 800bf84:	d0c7      	beq.n	800bf16 <__ssvfiscanf_r+0x76>
 800bf86:	d857      	bhi.n	800c038 <__ssvfiscanf_r+0x198>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d065      	beq.n	800c058 <__ssvfiscanf_r+0x1b8>
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	9347      	str	r3, [sp, #284]	; 0x11c
 800bf90:	230a      	movs	r3, #10
 800bf92:	9342      	str	r3, [sp, #264]	; 0x108
 800bf94:	e076      	b.n	800c084 <__ssvfiscanf_r+0x1e4>
 800bf96:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bf98:	fb02 1103 	mla	r1, r2, r3, r1
 800bf9c:	3930      	subs	r1, #48	; 0x30
 800bf9e:	9143      	str	r1, [sp, #268]	; 0x10c
 800bfa0:	4655      	mov	r5, sl
 800bfa2:	e7d4      	b.n	800bf4e <__ssvfiscanf_r+0xae>
 800bfa4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bfa8:	2a20      	cmp	r2, #32
 800bfaa:	d8ef      	bhi.n	800bf8c <__ssvfiscanf_r+0xec>
 800bfac:	a101      	add	r1, pc, #4	; (adr r1, 800bfb4 <__ssvfiscanf_r+0x114>)
 800bfae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bfb2:	bf00      	nop
 800bfb4:	0800c067 	.word	0x0800c067
 800bfb8:	0800bf8d 	.word	0x0800bf8d
 800bfbc:	0800bf8d 	.word	0x0800bf8d
 800bfc0:	0800c0c5 	.word	0x0800c0c5
 800bfc4:	0800bf8d 	.word	0x0800bf8d
 800bfc8:	0800bf8d 	.word	0x0800bf8d
 800bfcc:	0800bf8d 	.word	0x0800bf8d
 800bfd0:	0800bf8d 	.word	0x0800bf8d
 800bfd4:	0800bf8d 	.word	0x0800bf8d
 800bfd8:	0800bf8d 	.word	0x0800bf8d
 800bfdc:	0800bf8d 	.word	0x0800bf8d
 800bfe0:	0800c0db 	.word	0x0800c0db
 800bfe4:	0800c0c1 	.word	0x0800c0c1
 800bfe8:	0800c03f 	.word	0x0800c03f
 800bfec:	0800c03f 	.word	0x0800c03f
 800bff0:	0800c03f 	.word	0x0800c03f
 800bff4:	0800bf8d 	.word	0x0800bf8d
 800bff8:	0800c07d 	.word	0x0800c07d
 800bffc:	0800bf8d 	.word	0x0800bf8d
 800c000:	0800bf8d 	.word	0x0800bf8d
 800c004:	0800bf8d 	.word	0x0800bf8d
 800c008:	0800bf8d 	.word	0x0800bf8d
 800c00c:	0800c0eb 	.word	0x0800c0eb
 800c010:	0800c0b9 	.word	0x0800c0b9
 800c014:	0800c05f 	.word	0x0800c05f
 800c018:	0800bf8d 	.word	0x0800bf8d
 800c01c:	0800bf8d 	.word	0x0800bf8d
 800c020:	0800c0e7 	.word	0x0800c0e7
 800c024:	0800bf8d 	.word	0x0800bf8d
 800c028:	0800c0c1 	.word	0x0800c0c1
 800c02c:	0800bf8d 	.word	0x0800bf8d
 800c030:	0800bf8d 	.word	0x0800bf8d
 800c034:	0800c067 	.word	0x0800c067
 800c038:	3b45      	subs	r3, #69	; 0x45
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d8a6      	bhi.n	800bf8c <__ssvfiscanf_r+0xec>
 800c03e:	2305      	movs	r3, #5
 800c040:	e01f      	b.n	800c082 <__ssvfiscanf_r+0x1e2>
 800c042:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c044:	4621      	mov	r1, r4
 800c046:	4630      	mov	r0, r6
 800c048:	4798      	blx	r3
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f43f af68 	beq.w	800bf20 <__ssvfiscanf_r+0x80>
 800c050:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c052:	2800      	cmp	r0, #0
 800c054:	f040 808d 	bne.w	800c172 <__ssvfiscanf_r+0x2d2>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	e08f      	b.n	800c17e <__ssvfiscanf_r+0x2de>
 800c05e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c060:	f042 0220 	orr.w	r2, r2, #32
 800c064:	9241      	str	r2, [sp, #260]	; 0x104
 800c066:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c06c:	9241      	str	r2, [sp, #260]	; 0x104
 800c06e:	2210      	movs	r2, #16
 800c070:	2b6f      	cmp	r3, #111	; 0x6f
 800c072:	9242      	str	r2, [sp, #264]	; 0x108
 800c074:	bf34      	ite	cc
 800c076:	2303      	movcc	r3, #3
 800c078:	2304      	movcs	r3, #4
 800c07a:	e002      	b.n	800c082 <__ssvfiscanf_r+0x1e2>
 800c07c:	2300      	movs	r3, #0
 800c07e:	9342      	str	r3, [sp, #264]	; 0x108
 800c080:	2303      	movs	r3, #3
 800c082:	9347      	str	r3, [sp, #284]	; 0x11c
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	dd3d      	ble.n	800c106 <__ssvfiscanf_r+0x266>
 800c08a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c08c:	0659      	lsls	r1, r3, #25
 800c08e:	d404      	bmi.n	800c09a <__ssvfiscanf_r+0x1fa>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	781a      	ldrb	r2, [r3, #0]
 800c094:	5cba      	ldrb	r2, [r7, r2]
 800c096:	0712      	lsls	r2, r2, #28
 800c098:	d43c      	bmi.n	800c114 <__ssvfiscanf_r+0x274>
 800c09a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	dc4b      	bgt.n	800c138 <__ssvfiscanf_r+0x298>
 800c0a0:	466b      	mov	r3, sp
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	a941      	add	r1, sp, #260	; 0x104
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f000 f872 	bl	800c190 <_scanf_chars>
 800c0ac:	2801      	cmp	r0, #1
 800c0ae:	d06a      	beq.n	800c186 <__ssvfiscanf_r+0x2e6>
 800c0b0:	2802      	cmp	r0, #2
 800c0b2:	f47f af1c 	bne.w	800beee <__ssvfiscanf_r+0x4e>
 800c0b6:	e7cb      	b.n	800c050 <__ssvfiscanf_r+0x1b0>
 800c0b8:	2308      	movs	r3, #8
 800c0ba:	9342      	str	r3, [sp, #264]	; 0x108
 800c0bc:	2304      	movs	r3, #4
 800c0be:	e7e0      	b.n	800c082 <__ssvfiscanf_r+0x1e2>
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	e7d5      	b.n	800c070 <__ssvfiscanf_r+0x1d0>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	f000 fa5e 	bl	800c588 <__sccl>
 800c0cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d2:	9341      	str	r3, [sp, #260]	; 0x104
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e7d3      	b.n	800c082 <__ssvfiscanf_r+0x1e2>
 800c0da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e0:	9341      	str	r3, [sp, #260]	; 0x104
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e7cd      	b.n	800c082 <__ssvfiscanf_r+0x1e2>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	e7cb      	b.n	800c082 <__ssvfiscanf_r+0x1e2>
 800c0ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c0ec:	06c3      	lsls	r3, r0, #27
 800c0ee:	f53f aefe 	bmi.w	800beee <__ssvfiscanf_r+0x4e>
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0f6:	1d19      	adds	r1, r3, #4
 800c0f8:	9100      	str	r1, [sp, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	07c0      	lsls	r0, r0, #31
 800c0fe:	bf4c      	ite	mi
 800c100:	801a      	strhmi	r2, [r3, #0]
 800c102:	601a      	strpl	r2, [r3, #0]
 800c104:	e6f3      	b.n	800beee <__ssvfiscanf_r+0x4e>
 800c106:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c108:	4621      	mov	r1, r4
 800c10a:	4630      	mov	r0, r6
 800c10c:	4798      	blx	r3
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0bb      	beq.n	800c08a <__ssvfiscanf_r+0x1ea>
 800c112:	e79d      	b.n	800c050 <__ssvfiscanf_r+0x1b0>
 800c114:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c116:	3201      	adds	r2, #1
 800c118:	9245      	str	r2, [sp, #276]	; 0x114
 800c11a:	6862      	ldr	r2, [r4, #4]
 800c11c:	3a01      	subs	r2, #1
 800c11e:	2a00      	cmp	r2, #0
 800c120:	6062      	str	r2, [r4, #4]
 800c122:	dd02      	ble.n	800c12a <__ssvfiscanf_r+0x28a>
 800c124:	3301      	adds	r3, #1
 800c126:	6023      	str	r3, [r4, #0]
 800c128:	e7b2      	b.n	800c090 <__ssvfiscanf_r+0x1f0>
 800c12a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c12c:	4621      	mov	r1, r4
 800c12e:	4630      	mov	r0, r6
 800c130:	4798      	blx	r3
 800c132:	2800      	cmp	r0, #0
 800c134:	d0ac      	beq.n	800c090 <__ssvfiscanf_r+0x1f0>
 800c136:	e78b      	b.n	800c050 <__ssvfiscanf_r+0x1b0>
 800c138:	2b04      	cmp	r3, #4
 800c13a:	dc0f      	bgt.n	800c15c <__ssvfiscanf_r+0x2bc>
 800c13c:	466b      	mov	r3, sp
 800c13e:	4622      	mov	r2, r4
 800c140:	a941      	add	r1, sp, #260	; 0x104
 800c142:	4630      	mov	r0, r6
 800c144:	f000 f87e 	bl	800c244 <_scanf_i>
 800c148:	e7b0      	b.n	800c0ac <__ssvfiscanf_r+0x20c>
 800c14a:	bf00      	nop
 800c14c:	0800bded 	.word	0x0800bded
 800c150:	0800be67 	.word	0x0800be67
 800c154:	0800d43f 	.word	0x0800d43f
 800c158:	0800d3d2 	.word	0x0800d3d2
 800c15c:	4b0b      	ldr	r3, [pc, #44]	; (800c18c <__ssvfiscanf_r+0x2ec>)
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f43f aec5 	beq.w	800beee <__ssvfiscanf_r+0x4e>
 800c164:	466b      	mov	r3, sp
 800c166:	4622      	mov	r2, r4
 800c168:	a941      	add	r1, sp, #260	; 0x104
 800c16a:	4630      	mov	r0, r6
 800c16c:	f3af 8000 	nop.w
 800c170:	e79c      	b.n	800c0ac <__ssvfiscanf_r+0x20c>
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c178:	bf18      	it	ne
 800c17a:	f04f 30ff 	movne.w	r0, #4294967295
 800c17e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c186:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c188:	e7f9      	b.n	800c17e <__ssvfiscanf_r+0x2de>
 800c18a:	bf00      	nop
 800c18c:	00000000 	.word	0x00000000

0800c190 <_scanf_chars>:
 800c190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c194:	4615      	mov	r5, r2
 800c196:	688a      	ldr	r2, [r1, #8]
 800c198:	4680      	mov	r8, r0
 800c19a:	460c      	mov	r4, r1
 800c19c:	b932      	cbnz	r2, 800c1ac <_scanf_chars+0x1c>
 800c19e:	698a      	ldr	r2, [r1, #24]
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	bf0c      	ite	eq
 800c1a4:	2201      	moveq	r2, #1
 800c1a6:	f04f 32ff 	movne.w	r2, #4294967295
 800c1aa:	608a      	str	r2, [r1, #8]
 800c1ac:	6822      	ldr	r2, [r4, #0]
 800c1ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c240 <_scanf_chars+0xb0>
 800c1b2:	06d1      	lsls	r1, r2, #27
 800c1b4:	bf5f      	itttt	pl
 800c1b6:	681a      	ldrpl	r2, [r3, #0]
 800c1b8:	1d11      	addpl	r1, r2, #4
 800c1ba:	6019      	strpl	r1, [r3, #0]
 800c1bc:	6816      	ldrpl	r6, [r2, #0]
 800c1be:	2700      	movs	r7, #0
 800c1c0:	69a0      	ldr	r0, [r4, #24]
 800c1c2:	b188      	cbz	r0, 800c1e8 <_scanf_chars+0x58>
 800c1c4:	2801      	cmp	r0, #1
 800c1c6:	d107      	bne.n	800c1d8 <_scanf_chars+0x48>
 800c1c8:	682a      	ldr	r2, [r5, #0]
 800c1ca:	7811      	ldrb	r1, [r2, #0]
 800c1cc:	6962      	ldr	r2, [r4, #20]
 800c1ce:	5c52      	ldrb	r2, [r2, r1]
 800c1d0:	b952      	cbnz	r2, 800c1e8 <_scanf_chars+0x58>
 800c1d2:	2f00      	cmp	r7, #0
 800c1d4:	d031      	beq.n	800c23a <_scanf_chars+0xaa>
 800c1d6:	e022      	b.n	800c21e <_scanf_chars+0x8e>
 800c1d8:	2802      	cmp	r0, #2
 800c1da:	d120      	bne.n	800c21e <_scanf_chars+0x8e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c1e4:	071b      	lsls	r3, r3, #28
 800c1e6:	d41a      	bmi.n	800c21e <_scanf_chars+0x8e>
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	06da      	lsls	r2, r3, #27
 800c1ec:	bf5e      	ittt	pl
 800c1ee:	682b      	ldrpl	r3, [r5, #0]
 800c1f0:	781b      	ldrbpl	r3, [r3, #0]
 800c1f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c1f6:	682a      	ldr	r2, [r5, #0]
 800c1f8:	686b      	ldr	r3, [r5, #4]
 800c1fa:	3201      	adds	r2, #1
 800c1fc:	602a      	str	r2, [r5, #0]
 800c1fe:	68a2      	ldr	r2, [r4, #8]
 800c200:	3b01      	subs	r3, #1
 800c202:	3a01      	subs	r2, #1
 800c204:	606b      	str	r3, [r5, #4]
 800c206:	3701      	adds	r7, #1
 800c208:	60a2      	str	r2, [r4, #8]
 800c20a:	b142      	cbz	r2, 800c21e <_scanf_chars+0x8e>
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dcd7      	bgt.n	800c1c0 <_scanf_chars+0x30>
 800c210:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c214:	4629      	mov	r1, r5
 800c216:	4640      	mov	r0, r8
 800c218:	4798      	blx	r3
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d0d0      	beq.n	800c1c0 <_scanf_chars+0x30>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	f013 0310 	ands.w	r3, r3, #16
 800c224:	d105      	bne.n	800c232 <_scanf_chars+0xa2>
 800c226:	68e2      	ldr	r2, [r4, #12]
 800c228:	3201      	adds	r2, #1
 800c22a:	60e2      	str	r2, [r4, #12]
 800c22c:	69a2      	ldr	r2, [r4, #24]
 800c22e:	b102      	cbz	r2, 800c232 <_scanf_chars+0xa2>
 800c230:	7033      	strb	r3, [r6, #0]
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	443b      	add	r3, r7
 800c236:	6123      	str	r3, [r4, #16]
 800c238:	2000      	movs	r0, #0
 800c23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23e:	bf00      	nop
 800c240:	0800d43f 	.word	0x0800d43f

0800c244 <_scanf_i>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	4698      	mov	r8, r3
 800c24a:	4b74      	ldr	r3, [pc, #464]	; (800c41c <_scanf_i+0x1d8>)
 800c24c:	460c      	mov	r4, r1
 800c24e:	4682      	mov	sl, r0
 800c250:	4616      	mov	r6, r2
 800c252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c256:	b087      	sub	sp, #28
 800c258:	ab03      	add	r3, sp, #12
 800c25a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c25e:	4b70      	ldr	r3, [pc, #448]	; (800c420 <_scanf_i+0x1dc>)
 800c260:	69a1      	ldr	r1, [r4, #24]
 800c262:	4a70      	ldr	r2, [pc, #448]	; (800c424 <_scanf_i+0x1e0>)
 800c264:	2903      	cmp	r1, #3
 800c266:	bf18      	it	ne
 800c268:	461a      	movne	r2, r3
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	9201      	str	r2, [sp, #4]
 800c26e:	1e5a      	subs	r2, r3, #1
 800c270:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c274:	bf88      	it	hi
 800c276:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c27a:	4627      	mov	r7, r4
 800c27c:	bf82      	ittt	hi
 800c27e:	eb03 0905 	addhi.w	r9, r3, r5
 800c282:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c286:	60a3      	strhi	r3, [r4, #8]
 800c288:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c28c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c290:	bf98      	it	ls
 800c292:	f04f 0900 	movls.w	r9, #0
 800c296:	6023      	str	r3, [r4, #0]
 800c298:	463d      	mov	r5, r7
 800c29a:	f04f 0b00 	mov.w	fp, #0
 800c29e:	6831      	ldr	r1, [r6, #0]
 800c2a0:	ab03      	add	r3, sp, #12
 800c2a2:	7809      	ldrb	r1, [r1, #0]
 800c2a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	f7f3 ffc9 	bl	8000240 <memchr>
 800c2ae:	b328      	cbz	r0, 800c2fc <_scanf_i+0xb8>
 800c2b0:	f1bb 0f01 	cmp.w	fp, #1
 800c2b4:	d159      	bne.n	800c36a <_scanf_i+0x126>
 800c2b6:	6862      	ldr	r2, [r4, #4]
 800c2b8:	b92a      	cbnz	r2, 800c2c6 <_scanf_i+0x82>
 800c2ba:	6822      	ldr	r2, [r4, #0]
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2c2:	6063      	str	r3, [r4, #4]
 800c2c4:	6022      	str	r2, [r4, #0]
 800c2c6:	6822      	ldr	r2, [r4, #0]
 800c2c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c2cc:	6022      	str	r2, [r4, #0]
 800c2ce:	68a2      	ldr	r2, [r4, #8]
 800c2d0:	1e51      	subs	r1, r2, #1
 800c2d2:	60a1      	str	r1, [r4, #8]
 800c2d4:	b192      	cbz	r2, 800c2fc <_scanf_i+0xb8>
 800c2d6:	6832      	ldr	r2, [r6, #0]
 800c2d8:	1c51      	adds	r1, r2, #1
 800c2da:	6031      	str	r1, [r6, #0]
 800c2dc:	7812      	ldrb	r2, [r2, #0]
 800c2de:	f805 2b01 	strb.w	r2, [r5], #1
 800c2e2:	6872      	ldr	r2, [r6, #4]
 800c2e4:	3a01      	subs	r2, #1
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	6072      	str	r2, [r6, #4]
 800c2ea:	dc07      	bgt.n	800c2fc <_scanf_i+0xb8>
 800c2ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	4790      	blx	r2
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f040 8085 	bne.w	800c406 <_scanf_i+0x1c2>
 800c2fc:	f10b 0b01 	add.w	fp, fp, #1
 800c300:	f1bb 0f03 	cmp.w	fp, #3
 800c304:	d1cb      	bne.n	800c29e <_scanf_i+0x5a>
 800c306:	6863      	ldr	r3, [r4, #4]
 800c308:	b90b      	cbnz	r3, 800c30e <_scanf_i+0xca>
 800c30a:	230a      	movs	r3, #10
 800c30c:	6063      	str	r3, [r4, #4]
 800c30e:	6863      	ldr	r3, [r4, #4]
 800c310:	4945      	ldr	r1, [pc, #276]	; (800c428 <_scanf_i+0x1e4>)
 800c312:	6960      	ldr	r0, [r4, #20]
 800c314:	1ac9      	subs	r1, r1, r3
 800c316:	f000 f937 	bl	800c588 <__sccl>
 800c31a:	f04f 0b00 	mov.w	fp, #0
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	6822      	ldr	r2, [r4, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d03d      	beq.n	800c3a2 <_scanf_i+0x15e>
 800c326:	6831      	ldr	r1, [r6, #0]
 800c328:	6960      	ldr	r0, [r4, #20]
 800c32a:	f891 c000 	ldrb.w	ip, [r1]
 800c32e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c332:	2800      	cmp	r0, #0
 800c334:	d035      	beq.n	800c3a2 <_scanf_i+0x15e>
 800c336:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c33a:	d124      	bne.n	800c386 <_scanf_i+0x142>
 800c33c:	0510      	lsls	r0, r2, #20
 800c33e:	d522      	bpl.n	800c386 <_scanf_i+0x142>
 800c340:	f10b 0b01 	add.w	fp, fp, #1
 800c344:	f1b9 0f00 	cmp.w	r9, #0
 800c348:	d003      	beq.n	800c352 <_scanf_i+0x10e>
 800c34a:	3301      	adds	r3, #1
 800c34c:	f109 39ff 	add.w	r9, r9, #4294967295
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	6873      	ldr	r3, [r6, #4]
 800c354:	3b01      	subs	r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	6073      	str	r3, [r6, #4]
 800c35a:	dd1b      	ble.n	800c394 <_scanf_i+0x150>
 800c35c:	6833      	ldr	r3, [r6, #0]
 800c35e:	3301      	adds	r3, #1
 800c360:	6033      	str	r3, [r6, #0]
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	3b01      	subs	r3, #1
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	e7d9      	b.n	800c31e <_scanf_i+0xda>
 800c36a:	f1bb 0f02 	cmp.w	fp, #2
 800c36e:	d1ae      	bne.n	800c2ce <_scanf_i+0x8a>
 800c370:	6822      	ldr	r2, [r4, #0]
 800c372:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c376:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c37a:	d1bf      	bne.n	800c2fc <_scanf_i+0xb8>
 800c37c:	2310      	movs	r3, #16
 800c37e:	6063      	str	r3, [r4, #4]
 800c380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c384:	e7a2      	b.n	800c2cc <_scanf_i+0x88>
 800c386:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c38a:	6022      	str	r2, [r4, #0]
 800c38c:	780b      	ldrb	r3, [r1, #0]
 800c38e:	f805 3b01 	strb.w	r3, [r5], #1
 800c392:	e7de      	b.n	800c352 <_scanf_i+0x10e>
 800c394:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c398:	4631      	mov	r1, r6
 800c39a:	4650      	mov	r0, sl
 800c39c:	4798      	blx	r3
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d0df      	beq.n	800c362 <_scanf_i+0x11e>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	05d9      	lsls	r1, r3, #23
 800c3a6:	d50d      	bpl.n	800c3c4 <_scanf_i+0x180>
 800c3a8:	42bd      	cmp	r5, r7
 800c3aa:	d909      	bls.n	800c3c0 <_scanf_i+0x17c>
 800c3ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c3b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	4650      	mov	r0, sl
 800c3b8:	4798      	blx	r3
 800c3ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800c3be:	464d      	mov	r5, r9
 800c3c0:	42bd      	cmp	r5, r7
 800c3c2:	d028      	beq.n	800c416 <_scanf_i+0x1d2>
 800c3c4:	6822      	ldr	r2, [r4, #0]
 800c3c6:	f012 0210 	ands.w	r2, r2, #16
 800c3ca:	d113      	bne.n	800c3f4 <_scanf_i+0x1b0>
 800c3cc:	702a      	strb	r2, [r5, #0]
 800c3ce:	6863      	ldr	r3, [r4, #4]
 800c3d0:	9e01      	ldr	r6, [sp, #4]
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	47b0      	blx	r6
 800c3d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3dc:	6821      	ldr	r1, [r4, #0]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	f8c8 2000 	str.w	r2, [r8]
 800c3e4:	f011 0f20 	tst.w	r1, #32
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	d00f      	beq.n	800c40c <_scanf_i+0x1c8>
 800c3ec:	6018      	str	r0, [r3, #0]
 800c3ee:	68e3      	ldr	r3, [r4, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	60e3      	str	r3, [r4, #12]
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	1bed      	subs	r5, r5, r7
 800c3f8:	445d      	add	r5, fp
 800c3fa:	442b      	add	r3, r5
 800c3fc:	6123      	str	r3, [r4, #16]
 800c3fe:	2000      	movs	r0, #0
 800c400:	b007      	add	sp, #28
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	f04f 0b00 	mov.w	fp, #0
 800c40a:	e7ca      	b.n	800c3a2 <_scanf_i+0x15e>
 800c40c:	07ca      	lsls	r2, r1, #31
 800c40e:	bf4c      	ite	mi
 800c410:	8018      	strhmi	r0, [r3, #0]
 800c412:	6018      	strpl	r0, [r3, #0]
 800c414:	e7eb      	b.n	800c3ee <_scanf_i+0x1aa>
 800c416:	2001      	movs	r0, #1
 800c418:	e7f2      	b.n	800c400 <_scanf_i+0x1bc>
 800c41a:	bf00      	nop
 800c41c:	0800d138 	.word	0x0800d138
 800c420:	0800c9b9 	.word	0x0800c9b9
 800c424:	0800c8d1 	.word	0x0800c8d1
 800c428:	0800d3ed 	.word	0x0800d3ed

0800c42c <__sflush_r>:
 800c42c:	898a      	ldrh	r2, [r1, #12]
 800c42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	4605      	mov	r5, r0
 800c434:	0710      	lsls	r0, r2, #28
 800c436:	460c      	mov	r4, r1
 800c438:	d458      	bmi.n	800c4ec <__sflush_r+0xc0>
 800c43a:	684b      	ldr	r3, [r1, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dc05      	bgt.n	800c44c <__sflush_r+0x20>
 800c440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	dc02      	bgt.n	800c44c <__sflush_r+0x20>
 800c446:	2000      	movs	r0, #0
 800c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d0f9      	beq.n	800c446 <__sflush_r+0x1a>
 800c452:	2300      	movs	r3, #0
 800c454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c458:	682f      	ldr	r7, [r5, #0]
 800c45a:	6a21      	ldr	r1, [r4, #32]
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	d032      	beq.n	800c4c6 <__sflush_r+0x9a>
 800c460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	075a      	lsls	r2, r3, #29
 800c466:	d505      	bpl.n	800c474 <__sflush_r+0x48>
 800c468:	6863      	ldr	r3, [r4, #4]
 800c46a:	1ac0      	subs	r0, r0, r3
 800c46c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c46e:	b10b      	cbz	r3, 800c474 <__sflush_r+0x48>
 800c470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c472:	1ac0      	subs	r0, r0, r3
 800c474:	2300      	movs	r3, #0
 800c476:	4602      	mov	r2, r0
 800c478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c47a:	6a21      	ldr	r1, [r4, #32]
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b0      	blx	r6
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	d106      	bne.n	800c494 <__sflush_r+0x68>
 800c486:	6829      	ldr	r1, [r5, #0]
 800c488:	291d      	cmp	r1, #29
 800c48a:	d82b      	bhi.n	800c4e4 <__sflush_r+0xb8>
 800c48c:	4a29      	ldr	r2, [pc, #164]	; (800c534 <__sflush_r+0x108>)
 800c48e:	410a      	asrs	r2, r1
 800c490:	07d6      	lsls	r6, r2, #31
 800c492:	d427      	bmi.n	800c4e4 <__sflush_r+0xb8>
 800c494:	2200      	movs	r2, #0
 800c496:	6062      	str	r2, [r4, #4]
 800c498:	04d9      	lsls	r1, r3, #19
 800c49a:	6922      	ldr	r2, [r4, #16]
 800c49c:	6022      	str	r2, [r4, #0]
 800c49e:	d504      	bpl.n	800c4aa <__sflush_r+0x7e>
 800c4a0:	1c42      	adds	r2, r0, #1
 800c4a2:	d101      	bne.n	800c4a8 <__sflush_r+0x7c>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b903      	cbnz	r3, 800c4aa <__sflush_r+0x7e>
 800c4a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ac:	602f      	str	r7, [r5, #0]
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	d0c9      	beq.n	800c446 <__sflush_r+0x1a>
 800c4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4b6:	4299      	cmp	r1, r3
 800c4b8:	d002      	beq.n	800c4c0 <__sflush_r+0x94>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7fe fec2 	bl	800b244 <_free_r>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c4c4:	e7c0      	b.n	800c448 <__sflush_r+0x1c>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	47b0      	blx	r6
 800c4cc:	1c41      	adds	r1, r0, #1
 800c4ce:	d1c8      	bne.n	800c462 <__sflush_r+0x36>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0c5      	beq.n	800c462 <__sflush_r+0x36>
 800c4d6:	2b1d      	cmp	r3, #29
 800c4d8:	d001      	beq.n	800c4de <__sflush_r+0xb2>
 800c4da:	2b16      	cmp	r3, #22
 800c4dc:	d101      	bne.n	800c4e2 <__sflush_r+0xb6>
 800c4de:	602f      	str	r7, [r5, #0]
 800c4e0:	e7b1      	b.n	800c446 <__sflush_r+0x1a>
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	e7ad      	b.n	800c448 <__sflush_r+0x1c>
 800c4ec:	690f      	ldr	r7, [r1, #16]
 800c4ee:	2f00      	cmp	r7, #0
 800c4f0:	d0a9      	beq.n	800c446 <__sflush_r+0x1a>
 800c4f2:	0793      	lsls	r3, r2, #30
 800c4f4:	680e      	ldr	r6, [r1, #0]
 800c4f6:	bf08      	it	eq
 800c4f8:	694b      	ldreq	r3, [r1, #20]
 800c4fa:	600f      	str	r7, [r1, #0]
 800c4fc:	bf18      	it	ne
 800c4fe:	2300      	movne	r3, #0
 800c500:	eba6 0807 	sub.w	r8, r6, r7
 800c504:	608b      	str	r3, [r1, #8]
 800c506:	f1b8 0f00 	cmp.w	r8, #0
 800c50a:	dd9c      	ble.n	800c446 <__sflush_r+0x1a>
 800c50c:	6a21      	ldr	r1, [r4, #32]
 800c50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c510:	4643      	mov	r3, r8
 800c512:	463a      	mov	r2, r7
 800c514:	4628      	mov	r0, r5
 800c516:	47b0      	blx	r6
 800c518:	2800      	cmp	r0, #0
 800c51a:	dc06      	bgt.n	800c52a <__sflush_r+0xfe>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	e78e      	b.n	800c448 <__sflush_r+0x1c>
 800c52a:	4407      	add	r7, r0
 800c52c:	eba8 0800 	sub.w	r8, r8, r0
 800c530:	e7e9      	b.n	800c506 <__sflush_r+0xda>
 800c532:	bf00      	nop
 800c534:	dfbffffe 	.word	0xdfbffffe

0800c538 <_fflush_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b913      	cbnz	r3, 800c548 <_fflush_r+0x10>
 800c542:	2500      	movs	r5, #0
 800c544:	4628      	mov	r0, r5
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	b118      	cbz	r0, 800c552 <_fflush_r+0x1a>
 800c54a:	6a03      	ldr	r3, [r0, #32]
 800c54c:	b90b      	cbnz	r3, 800c552 <_fflush_r+0x1a>
 800c54e:	f7fd fe91 	bl	800a274 <__sinit>
 800c552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0f3      	beq.n	800c542 <_fflush_r+0xa>
 800c55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c55c:	07d0      	lsls	r0, r2, #31
 800c55e:	d404      	bmi.n	800c56a <_fflush_r+0x32>
 800c560:	0599      	lsls	r1, r3, #22
 800c562:	d402      	bmi.n	800c56a <_fflush_r+0x32>
 800c564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c566:	f7fd ffef 	bl	800a548 <__retarget_lock_acquire_recursive>
 800c56a:	4628      	mov	r0, r5
 800c56c:	4621      	mov	r1, r4
 800c56e:	f7ff ff5d 	bl	800c42c <__sflush_r>
 800c572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c574:	07da      	lsls	r2, r3, #31
 800c576:	4605      	mov	r5, r0
 800c578:	d4e4      	bmi.n	800c544 <_fflush_r+0xc>
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	059b      	lsls	r3, r3, #22
 800c57e:	d4e1      	bmi.n	800c544 <_fflush_r+0xc>
 800c580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c582:	f7fd ffe2 	bl	800a54a <__retarget_lock_release_recursive>
 800c586:	e7dd      	b.n	800c544 <_fflush_r+0xc>

0800c588 <__sccl>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	780b      	ldrb	r3, [r1, #0]
 800c58c:	4604      	mov	r4, r0
 800c58e:	2b5e      	cmp	r3, #94	; 0x5e
 800c590:	bf0b      	itete	eq
 800c592:	784b      	ldrbeq	r3, [r1, #1]
 800c594:	1c4a      	addne	r2, r1, #1
 800c596:	1c8a      	addeq	r2, r1, #2
 800c598:	2100      	movne	r1, #0
 800c59a:	bf08      	it	eq
 800c59c:	2101      	moveq	r1, #1
 800c59e:	3801      	subs	r0, #1
 800c5a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c5a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c5a8:	42a8      	cmp	r0, r5
 800c5aa:	d1fb      	bne.n	800c5a4 <__sccl+0x1c>
 800c5ac:	b90b      	cbnz	r3, 800c5b2 <__sccl+0x2a>
 800c5ae:	1e50      	subs	r0, r2, #1
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
 800c5b2:	f081 0101 	eor.w	r1, r1, #1
 800c5b6:	54e1      	strb	r1, [r4, r3]
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c5c0:	2d2d      	cmp	r5, #45	; 0x2d
 800c5c2:	d005      	beq.n	800c5d0 <__sccl+0x48>
 800c5c4:	2d5d      	cmp	r5, #93	; 0x5d
 800c5c6:	d016      	beq.n	800c5f6 <__sccl+0x6e>
 800c5c8:	2d00      	cmp	r5, #0
 800c5ca:	d0f1      	beq.n	800c5b0 <__sccl+0x28>
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	e7f2      	b.n	800c5b6 <__sccl+0x2e>
 800c5d0:	7846      	ldrb	r6, [r0, #1]
 800c5d2:	2e5d      	cmp	r6, #93	; 0x5d
 800c5d4:	d0fa      	beq.n	800c5cc <__sccl+0x44>
 800c5d6:	42b3      	cmp	r3, r6
 800c5d8:	dcf8      	bgt.n	800c5cc <__sccl+0x44>
 800c5da:	3002      	adds	r0, #2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	3201      	adds	r2, #1
 800c5e0:	4296      	cmp	r6, r2
 800c5e2:	54a1      	strb	r1, [r4, r2]
 800c5e4:	dcfb      	bgt.n	800c5de <__sccl+0x56>
 800c5e6:	1af2      	subs	r2, r6, r3
 800c5e8:	3a01      	subs	r2, #1
 800c5ea:	1c5d      	adds	r5, r3, #1
 800c5ec:	42b3      	cmp	r3, r6
 800c5ee:	bfa8      	it	ge
 800c5f0:	2200      	movge	r2, #0
 800c5f2:	18ab      	adds	r3, r5, r2
 800c5f4:	e7e1      	b.n	800c5ba <__sccl+0x32>
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	e7da      	b.n	800c5b0 <__sccl+0x28>

0800c5fa <__submore>:
 800c5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fe:	460c      	mov	r4, r1
 800c600:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c606:	4299      	cmp	r1, r3
 800c608:	d11d      	bne.n	800c646 <__submore+0x4c>
 800c60a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c60e:	f7fe fe8d 	bl	800b32c <_malloc_r>
 800c612:	b918      	cbnz	r0, 800c61c <__submore+0x22>
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c620:	63a3      	str	r3, [r4, #56]	; 0x38
 800c622:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c626:	6360      	str	r0, [r4, #52]	; 0x34
 800c628:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c62c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c630:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c634:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c638:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c63c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c640:	6020      	str	r0, [r4, #0]
 800c642:	2000      	movs	r0, #0
 800c644:	e7e8      	b.n	800c618 <__submore+0x1e>
 800c646:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c648:	0077      	lsls	r7, r6, #1
 800c64a:	463a      	mov	r2, r7
 800c64c:	f000 f88e 	bl	800c76c <_realloc_r>
 800c650:	4605      	mov	r5, r0
 800c652:	2800      	cmp	r0, #0
 800c654:	d0de      	beq.n	800c614 <__submore+0x1a>
 800c656:	eb00 0806 	add.w	r8, r0, r6
 800c65a:	4601      	mov	r1, r0
 800c65c:	4632      	mov	r2, r6
 800c65e:	4640      	mov	r0, r8
 800c660:	f000 f830 	bl	800c6c4 <memcpy>
 800c664:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c668:	f8c4 8000 	str.w	r8, [r4]
 800c66c:	e7e9      	b.n	800c642 <__submore+0x48>

0800c66e <memmove>:
 800c66e:	4288      	cmp	r0, r1
 800c670:	b510      	push	{r4, lr}
 800c672:	eb01 0402 	add.w	r4, r1, r2
 800c676:	d902      	bls.n	800c67e <memmove+0x10>
 800c678:	4284      	cmp	r4, r0
 800c67a:	4623      	mov	r3, r4
 800c67c:	d807      	bhi.n	800c68e <memmove+0x20>
 800c67e:	1e43      	subs	r3, r0, #1
 800c680:	42a1      	cmp	r1, r4
 800c682:	d008      	beq.n	800c696 <memmove+0x28>
 800c684:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c688:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c68c:	e7f8      	b.n	800c680 <memmove+0x12>
 800c68e:	4402      	add	r2, r0
 800c690:	4601      	mov	r1, r0
 800c692:	428a      	cmp	r2, r1
 800c694:	d100      	bne.n	800c698 <memmove+0x2a>
 800c696:	bd10      	pop	{r4, pc}
 800c698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c69c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6a0:	e7f7      	b.n	800c692 <memmove+0x24>
	...

0800c6a4 <_sbrk_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4d06      	ldr	r5, [pc, #24]	; (800c6c0 <_sbrk_r+0x1c>)
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	602b      	str	r3, [r5, #0]
 800c6b0:	f7f5 fb9c 	bl	8001dec <_sbrk>
 800c6b4:	1c43      	adds	r3, r0, #1
 800c6b6:	d102      	bne.n	800c6be <_sbrk_r+0x1a>
 800c6b8:	682b      	ldr	r3, [r5, #0]
 800c6ba:	b103      	cbz	r3, 800c6be <_sbrk_r+0x1a>
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	bd38      	pop	{r3, r4, r5, pc}
 800c6c0:	2000071c 	.word	0x2000071c

0800c6c4 <memcpy>:
 800c6c4:	440a      	add	r2, r1
 800c6c6:	4291      	cmp	r1, r2
 800c6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6cc:	d100      	bne.n	800c6d0 <memcpy+0xc>
 800c6ce:	4770      	bx	lr
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6da:	4291      	cmp	r1, r2
 800c6dc:	d1f9      	bne.n	800c6d2 <memcpy+0xe>
 800c6de:	bd10      	pop	{r4, pc}

0800c6e0 <__assert_func>:
 800c6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b09      	ldr	r3, [pc, #36]	; (800c70c <__assert_func+0x2c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	68d8      	ldr	r0, [r3, #12]
 800c6ee:	b14c      	cbz	r4, 800c704 <__assert_func+0x24>
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <__assert_func+0x30>)
 800c6f2:	9100      	str	r1, [sp, #0]
 800c6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6f8:	4906      	ldr	r1, [pc, #24]	; (800c714 <__assert_func+0x34>)
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	f000 f96c 	bl	800c9d8 <fiprintf>
 800c700:	f000 f97c 	bl	800c9fc <abort>
 800c704:	4b04      	ldr	r3, [pc, #16]	; (800c718 <__assert_func+0x38>)
 800c706:	461c      	mov	r4, r3
 800c708:	e7f3      	b.n	800c6f2 <__assert_func+0x12>
 800c70a:	bf00      	nop
 800c70c:	200000e0 	.word	0x200000e0
 800c710:	0800d402 	.word	0x0800d402
 800c714:	0800d40f 	.word	0x0800d40f
 800c718:	0800d43d 	.word	0x0800d43d

0800c71c <_calloc_r>:
 800c71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c71e:	fba1 2402 	umull	r2, r4, r1, r2
 800c722:	b94c      	cbnz	r4, 800c738 <_calloc_r+0x1c>
 800c724:	4611      	mov	r1, r2
 800c726:	9201      	str	r2, [sp, #4]
 800c728:	f7fe fe00 	bl	800b32c <_malloc_r>
 800c72c:	9a01      	ldr	r2, [sp, #4]
 800c72e:	4605      	mov	r5, r0
 800c730:	b930      	cbnz	r0, 800c740 <_calloc_r+0x24>
 800c732:	4628      	mov	r0, r5
 800c734:	b003      	add	sp, #12
 800c736:	bd30      	pop	{r4, r5, pc}
 800c738:	220c      	movs	r2, #12
 800c73a:	6002      	str	r2, [r0, #0]
 800c73c:	2500      	movs	r5, #0
 800c73e:	e7f8      	b.n	800c732 <_calloc_r+0x16>
 800c740:	4621      	mov	r1, r4
 800c742:	f7fd fe72 	bl	800a42a <memset>
 800c746:	e7f4      	b.n	800c732 <_calloc_r+0x16>

0800c748 <__ascii_mbtowc>:
 800c748:	b082      	sub	sp, #8
 800c74a:	b901      	cbnz	r1, 800c74e <__ascii_mbtowc+0x6>
 800c74c:	a901      	add	r1, sp, #4
 800c74e:	b142      	cbz	r2, 800c762 <__ascii_mbtowc+0x1a>
 800c750:	b14b      	cbz	r3, 800c766 <__ascii_mbtowc+0x1e>
 800c752:	7813      	ldrb	r3, [r2, #0]
 800c754:	600b      	str	r3, [r1, #0]
 800c756:	7812      	ldrb	r2, [r2, #0]
 800c758:	1e10      	subs	r0, r2, #0
 800c75a:	bf18      	it	ne
 800c75c:	2001      	movne	r0, #1
 800c75e:	b002      	add	sp, #8
 800c760:	4770      	bx	lr
 800c762:	4610      	mov	r0, r2
 800c764:	e7fb      	b.n	800c75e <__ascii_mbtowc+0x16>
 800c766:	f06f 0001 	mvn.w	r0, #1
 800c76a:	e7f8      	b.n	800c75e <__ascii_mbtowc+0x16>

0800c76c <_realloc_r>:
 800c76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c770:	4680      	mov	r8, r0
 800c772:	4614      	mov	r4, r2
 800c774:	460e      	mov	r6, r1
 800c776:	b921      	cbnz	r1, 800c782 <_realloc_r+0x16>
 800c778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c77c:	4611      	mov	r1, r2
 800c77e:	f7fe bdd5 	b.w	800b32c <_malloc_r>
 800c782:	b92a      	cbnz	r2, 800c790 <_realloc_r+0x24>
 800c784:	f7fe fd5e 	bl	800b244 <_free_r>
 800c788:	4625      	mov	r5, r4
 800c78a:	4628      	mov	r0, r5
 800c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c790:	f000 f93b 	bl	800ca0a <_malloc_usable_size_r>
 800c794:	4284      	cmp	r4, r0
 800c796:	4607      	mov	r7, r0
 800c798:	d802      	bhi.n	800c7a0 <_realloc_r+0x34>
 800c79a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c79e:	d812      	bhi.n	800c7c6 <_realloc_r+0x5a>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	f7fe fdc2 	bl	800b32c <_malloc_r>
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d0ed      	beq.n	800c78a <_realloc_r+0x1e>
 800c7ae:	42bc      	cmp	r4, r7
 800c7b0:	4622      	mov	r2, r4
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	bf28      	it	cs
 800c7b6:	463a      	movcs	r2, r7
 800c7b8:	f7ff ff84 	bl	800c6c4 <memcpy>
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4640      	mov	r0, r8
 800c7c0:	f7fe fd40 	bl	800b244 <_free_r>
 800c7c4:	e7e1      	b.n	800c78a <_realloc_r+0x1e>
 800c7c6:	4635      	mov	r5, r6
 800c7c8:	e7df      	b.n	800c78a <_realloc_r+0x1e>
	...

0800c7cc <_strtol_l.constprop.0>:
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d2:	d001      	beq.n	800c7d8 <_strtol_l.constprop.0+0xc>
 800c7d4:	2b24      	cmp	r3, #36	; 0x24
 800c7d6:	d906      	bls.n	800c7e6 <_strtol_l.constprop.0+0x1a>
 800c7d8:	f7fd fe8c 	bl	800a4f4 <__errno>
 800c7dc:	2316      	movs	r3, #22
 800c7de:	6003      	str	r3, [r0, #0]
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c8cc <_strtol_l.constprop.0+0x100>
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	462e      	mov	r6, r5
 800c7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c7f6:	f017 0708 	ands.w	r7, r7, #8
 800c7fa:	d1f7      	bne.n	800c7ec <_strtol_l.constprop.0+0x20>
 800c7fc:	2c2d      	cmp	r4, #45	; 0x2d
 800c7fe:	d132      	bne.n	800c866 <_strtol_l.constprop.0+0x9a>
 800c800:	782c      	ldrb	r4, [r5, #0]
 800c802:	2701      	movs	r7, #1
 800c804:	1cb5      	adds	r5, r6, #2
 800c806:	2b00      	cmp	r3, #0
 800c808:	d05b      	beq.n	800c8c2 <_strtol_l.constprop.0+0xf6>
 800c80a:	2b10      	cmp	r3, #16
 800c80c:	d109      	bne.n	800c822 <_strtol_l.constprop.0+0x56>
 800c80e:	2c30      	cmp	r4, #48	; 0x30
 800c810:	d107      	bne.n	800c822 <_strtol_l.constprop.0+0x56>
 800c812:	782c      	ldrb	r4, [r5, #0]
 800c814:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c818:	2c58      	cmp	r4, #88	; 0x58
 800c81a:	d14d      	bne.n	800c8b8 <_strtol_l.constprop.0+0xec>
 800c81c:	786c      	ldrb	r4, [r5, #1]
 800c81e:	2310      	movs	r3, #16
 800c820:	3502      	adds	r5, #2
 800c822:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c826:	f108 38ff 	add.w	r8, r8, #4294967295
 800c82a:	f04f 0e00 	mov.w	lr, #0
 800c82e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c832:	4676      	mov	r6, lr
 800c834:	fb03 8a19 	mls	sl, r3, r9, r8
 800c838:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c83c:	f1bc 0f09 	cmp.w	ip, #9
 800c840:	d816      	bhi.n	800c870 <_strtol_l.constprop.0+0xa4>
 800c842:	4664      	mov	r4, ip
 800c844:	42a3      	cmp	r3, r4
 800c846:	dd24      	ble.n	800c892 <_strtol_l.constprop.0+0xc6>
 800c848:	f1be 3fff 	cmp.w	lr, #4294967295
 800c84c:	d008      	beq.n	800c860 <_strtol_l.constprop.0+0x94>
 800c84e:	45b1      	cmp	r9, r6
 800c850:	d31c      	bcc.n	800c88c <_strtol_l.constprop.0+0xc0>
 800c852:	d101      	bne.n	800c858 <_strtol_l.constprop.0+0x8c>
 800c854:	45a2      	cmp	sl, r4
 800c856:	db19      	blt.n	800c88c <_strtol_l.constprop.0+0xc0>
 800c858:	fb06 4603 	mla	r6, r6, r3, r4
 800c85c:	f04f 0e01 	mov.w	lr, #1
 800c860:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c864:	e7e8      	b.n	800c838 <_strtol_l.constprop.0+0x6c>
 800c866:	2c2b      	cmp	r4, #43	; 0x2b
 800c868:	bf04      	itt	eq
 800c86a:	782c      	ldrbeq	r4, [r5, #0]
 800c86c:	1cb5      	addeq	r5, r6, #2
 800c86e:	e7ca      	b.n	800c806 <_strtol_l.constprop.0+0x3a>
 800c870:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c874:	f1bc 0f19 	cmp.w	ip, #25
 800c878:	d801      	bhi.n	800c87e <_strtol_l.constprop.0+0xb2>
 800c87a:	3c37      	subs	r4, #55	; 0x37
 800c87c:	e7e2      	b.n	800c844 <_strtol_l.constprop.0+0x78>
 800c87e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c882:	f1bc 0f19 	cmp.w	ip, #25
 800c886:	d804      	bhi.n	800c892 <_strtol_l.constprop.0+0xc6>
 800c888:	3c57      	subs	r4, #87	; 0x57
 800c88a:	e7db      	b.n	800c844 <_strtol_l.constprop.0+0x78>
 800c88c:	f04f 3eff 	mov.w	lr, #4294967295
 800c890:	e7e6      	b.n	800c860 <_strtol_l.constprop.0+0x94>
 800c892:	f1be 3fff 	cmp.w	lr, #4294967295
 800c896:	d105      	bne.n	800c8a4 <_strtol_l.constprop.0+0xd8>
 800c898:	2322      	movs	r3, #34	; 0x22
 800c89a:	6003      	str	r3, [r0, #0]
 800c89c:	4646      	mov	r6, r8
 800c89e:	b942      	cbnz	r2, 800c8b2 <_strtol_l.constprop.0+0xe6>
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	e79e      	b.n	800c7e2 <_strtol_l.constprop.0+0x16>
 800c8a4:	b107      	cbz	r7, 800c8a8 <_strtol_l.constprop.0+0xdc>
 800c8a6:	4276      	negs	r6, r6
 800c8a8:	2a00      	cmp	r2, #0
 800c8aa:	d0f9      	beq.n	800c8a0 <_strtol_l.constprop.0+0xd4>
 800c8ac:	f1be 0f00 	cmp.w	lr, #0
 800c8b0:	d000      	beq.n	800c8b4 <_strtol_l.constprop.0+0xe8>
 800c8b2:	1e69      	subs	r1, r5, #1
 800c8b4:	6011      	str	r1, [r2, #0]
 800c8b6:	e7f3      	b.n	800c8a0 <_strtol_l.constprop.0+0xd4>
 800c8b8:	2430      	movs	r4, #48	; 0x30
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1b1      	bne.n	800c822 <_strtol_l.constprop.0+0x56>
 800c8be:	2308      	movs	r3, #8
 800c8c0:	e7af      	b.n	800c822 <_strtol_l.constprop.0+0x56>
 800c8c2:	2c30      	cmp	r4, #48	; 0x30
 800c8c4:	d0a5      	beq.n	800c812 <_strtol_l.constprop.0+0x46>
 800c8c6:	230a      	movs	r3, #10
 800c8c8:	e7ab      	b.n	800c822 <_strtol_l.constprop.0+0x56>
 800c8ca:	bf00      	nop
 800c8cc:	0800d43f 	.word	0x0800d43f

0800c8d0 <_strtol_r>:
 800c8d0:	f7ff bf7c 	b.w	800c7cc <_strtol_l.constprop.0>

0800c8d4 <_strtoul_l.constprop.0>:
 800c8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d8:	4f36      	ldr	r7, [pc, #216]	; (800c9b4 <_strtoul_l.constprop.0+0xe0>)
 800c8da:	4686      	mov	lr, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8e4:	5d3e      	ldrb	r6, [r7, r4]
 800c8e6:	f016 0608 	ands.w	r6, r6, #8
 800c8ea:	d1f8      	bne.n	800c8de <_strtoul_l.constprop.0+0xa>
 800c8ec:	2c2d      	cmp	r4, #45	; 0x2d
 800c8ee:	d130      	bne.n	800c952 <_strtoul_l.constprop.0+0x7e>
 800c8f0:	782c      	ldrb	r4, [r5, #0]
 800c8f2:	2601      	movs	r6, #1
 800c8f4:	1c85      	adds	r5, r0, #2
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d057      	beq.n	800c9aa <_strtoul_l.constprop.0+0xd6>
 800c8fa:	2b10      	cmp	r3, #16
 800c8fc:	d109      	bne.n	800c912 <_strtoul_l.constprop.0+0x3e>
 800c8fe:	2c30      	cmp	r4, #48	; 0x30
 800c900:	d107      	bne.n	800c912 <_strtoul_l.constprop.0+0x3e>
 800c902:	7828      	ldrb	r0, [r5, #0]
 800c904:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c908:	2858      	cmp	r0, #88	; 0x58
 800c90a:	d149      	bne.n	800c9a0 <_strtoul_l.constprop.0+0xcc>
 800c90c:	786c      	ldrb	r4, [r5, #1]
 800c90e:	2310      	movs	r3, #16
 800c910:	3502      	adds	r5, #2
 800c912:	f04f 38ff 	mov.w	r8, #4294967295
 800c916:	2700      	movs	r7, #0
 800c918:	fbb8 f8f3 	udiv	r8, r8, r3
 800c91c:	fb03 f908 	mul.w	r9, r3, r8
 800c920:	ea6f 0909 	mvn.w	r9, r9
 800c924:	4638      	mov	r0, r7
 800c926:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c92a:	f1bc 0f09 	cmp.w	ip, #9
 800c92e:	d815      	bhi.n	800c95c <_strtoul_l.constprop.0+0x88>
 800c930:	4664      	mov	r4, ip
 800c932:	42a3      	cmp	r3, r4
 800c934:	dd23      	ble.n	800c97e <_strtoul_l.constprop.0+0xaa>
 800c936:	f1b7 3fff 	cmp.w	r7, #4294967295
 800c93a:	d007      	beq.n	800c94c <_strtoul_l.constprop.0+0x78>
 800c93c:	4580      	cmp	r8, r0
 800c93e:	d31b      	bcc.n	800c978 <_strtoul_l.constprop.0+0xa4>
 800c940:	d101      	bne.n	800c946 <_strtoul_l.constprop.0+0x72>
 800c942:	45a1      	cmp	r9, r4
 800c944:	db18      	blt.n	800c978 <_strtoul_l.constprop.0+0xa4>
 800c946:	fb00 4003 	mla	r0, r0, r3, r4
 800c94a:	2701      	movs	r7, #1
 800c94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c950:	e7e9      	b.n	800c926 <_strtoul_l.constprop.0+0x52>
 800c952:	2c2b      	cmp	r4, #43	; 0x2b
 800c954:	bf04      	itt	eq
 800c956:	782c      	ldrbeq	r4, [r5, #0]
 800c958:	1c85      	addeq	r5, r0, #2
 800c95a:	e7cc      	b.n	800c8f6 <_strtoul_l.constprop.0+0x22>
 800c95c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c960:	f1bc 0f19 	cmp.w	ip, #25
 800c964:	d801      	bhi.n	800c96a <_strtoul_l.constprop.0+0x96>
 800c966:	3c37      	subs	r4, #55	; 0x37
 800c968:	e7e3      	b.n	800c932 <_strtoul_l.constprop.0+0x5e>
 800c96a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c96e:	f1bc 0f19 	cmp.w	ip, #25
 800c972:	d804      	bhi.n	800c97e <_strtoul_l.constprop.0+0xaa>
 800c974:	3c57      	subs	r4, #87	; 0x57
 800c976:	e7dc      	b.n	800c932 <_strtoul_l.constprop.0+0x5e>
 800c978:	f04f 37ff 	mov.w	r7, #4294967295
 800c97c:	e7e6      	b.n	800c94c <_strtoul_l.constprop.0+0x78>
 800c97e:	1c7b      	adds	r3, r7, #1
 800c980:	d106      	bne.n	800c990 <_strtoul_l.constprop.0+0xbc>
 800c982:	2322      	movs	r3, #34	; 0x22
 800c984:	f8ce 3000 	str.w	r3, [lr]
 800c988:	4638      	mov	r0, r7
 800c98a:	b932      	cbnz	r2, 800c99a <_strtoul_l.constprop.0+0xc6>
 800c98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c990:	b106      	cbz	r6, 800c994 <_strtoul_l.constprop.0+0xc0>
 800c992:	4240      	negs	r0, r0
 800c994:	2a00      	cmp	r2, #0
 800c996:	d0f9      	beq.n	800c98c <_strtoul_l.constprop.0+0xb8>
 800c998:	b107      	cbz	r7, 800c99c <_strtoul_l.constprop.0+0xc8>
 800c99a:	1e69      	subs	r1, r5, #1
 800c99c:	6011      	str	r1, [r2, #0]
 800c99e:	e7f5      	b.n	800c98c <_strtoul_l.constprop.0+0xb8>
 800c9a0:	2430      	movs	r4, #48	; 0x30
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1b5      	bne.n	800c912 <_strtoul_l.constprop.0+0x3e>
 800c9a6:	2308      	movs	r3, #8
 800c9a8:	e7b3      	b.n	800c912 <_strtoul_l.constprop.0+0x3e>
 800c9aa:	2c30      	cmp	r4, #48	; 0x30
 800c9ac:	d0a9      	beq.n	800c902 <_strtoul_l.constprop.0+0x2e>
 800c9ae:	230a      	movs	r3, #10
 800c9b0:	e7af      	b.n	800c912 <_strtoul_l.constprop.0+0x3e>
 800c9b2:	bf00      	nop
 800c9b4:	0800d43f 	.word	0x0800d43f

0800c9b8 <_strtoul_r>:
 800c9b8:	f7ff bf8c 	b.w	800c8d4 <_strtoul_l.constprop.0>

0800c9bc <__ascii_wctomb>:
 800c9bc:	b149      	cbz	r1, 800c9d2 <__ascii_wctomb+0x16>
 800c9be:	2aff      	cmp	r2, #255	; 0xff
 800c9c0:	bf85      	ittet	hi
 800c9c2:	238a      	movhi	r3, #138	; 0x8a
 800c9c4:	6003      	strhi	r3, [r0, #0]
 800c9c6:	700a      	strbls	r2, [r1, #0]
 800c9c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9cc:	bf98      	it	ls
 800c9ce:	2001      	movls	r0, #1
 800c9d0:	4770      	bx	lr
 800c9d2:	4608      	mov	r0, r1
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <fiprintf>:
 800c9d8:	b40e      	push	{r1, r2, r3}
 800c9da:	b503      	push	{r0, r1, lr}
 800c9dc:	4601      	mov	r1, r0
 800c9de:	ab03      	add	r3, sp, #12
 800c9e0:	4805      	ldr	r0, [pc, #20]	; (800c9f8 <fiprintf+0x20>)
 800c9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e6:	6800      	ldr	r0, [r0, #0]
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	f000 f83f 	bl	800ca6c <_vfiprintf_r>
 800c9ee:	b002      	add	sp, #8
 800c9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f4:	b003      	add	sp, #12
 800c9f6:	4770      	bx	lr
 800c9f8:	200000e0 	.word	0x200000e0

0800c9fc <abort>:
 800c9fc:	b508      	push	{r3, lr}
 800c9fe:	2006      	movs	r0, #6
 800ca00:	f000 fa0c 	bl	800ce1c <raise>
 800ca04:	2001      	movs	r0, #1
 800ca06:	f7f5 f979 	bl	8001cfc <_exit>

0800ca0a <_malloc_usable_size_r>:
 800ca0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca0e:	1f18      	subs	r0, r3, #4
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	bfbc      	itt	lt
 800ca14:	580b      	ldrlt	r3, [r1, r0]
 800ca16:	18c0      	addlt	r0, r0, r3
 800ca18:	4770      	bx	lr

0800ca1a <__sfputc_r>:
 800ca1a:	6893      	ldr	r3, [r2, #8]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	b410      	push	{r4}
 800ca22:	6093      	str	r3, [r2, #8]
 800ca24:	da08      	bge.n	800ca38 <__sfputc_r+0x1e>
 800ca26:	6994      	ldr	r4, [r2, #24]
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	db01      	blt.n	800ca30 <__sfputc_r+0x16>
 800ca2c:	290a      	cmp	r1, #10
 800ca2e:	d103      	bne.n	800ca38 <__sfputc_r+0x1e>
 800ca30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca34:	f000 b934 	b.w	800cca0 <__swbuf_r>
 800ca38:	6813      	ldr	r3, [r2, #0]
 800ca3a:	1c58      	adds	r0, r3, #1
 800ca3c:	6010      	str	r0, [r2, #0]
 800ca3e:	7019      	strb	r1, [r3, #0]
 800ca40:	4608      	mov	r0, r1
 800ca42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <__sfputs_r>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	4614      	mov	r4, r2
 800ca50:	18d5      	adds	r5, r2, r3
 800ca52:	42ac      	cmp	r4, r5
 800ca54:	d101      	bne.n	800ca5a <__sfputs_r+0x12>
 800ca56:	2000      	movs	r0, #0
 800ca58:	e007      	b.n	800ca6a <__sfputs_r+0x22>
 800ca5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5e:	463a      	mov	r2, r7
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7ff ffda 	bl	800ca1a <__sfputc_r>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d1f3      	bne.n	800ca52 <__sfputs_r+0xa>
 800ca6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca6c <_vfiprintf_r>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	460d      	mov	r5, r1
 800ca72:	b09d      	sub	sp, #116	; 0x74
 800ca74:	4614      	mov	r4, r2
 800ca76:	4698      	mov	r8, r3
 800ca78:	4606      	mov	r6, r0
 800ca7a:	b118      	cbz	r0, 800ca84 <_vfiprintf_r+0x18>
 800ca7c:	6a03      	ldr	r3, [r0, #32]
 800ca7e:	b90b      	cbnz	r3, 800ca84 <_vfiprintf_r+0x18>
 800ca80:	f7fd fbf8 	bl	800a274 <__sinit>
 800ca84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca86:	07d9      	lsls	r1, r3, #31
 800ca88:	d405      	bmi.n	800ca96 <_vfiprintf_r+0x2a>
 800ca8a:	89ab      	ldrh	r3, [r5, #12]
 800ca8c:	059a      	lsls	r2, r3, #22
 800ca8e:	d402      	bmi.n	800ca96 <_vfiprintf_r+0x2a>
 800ca90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca92:	f7fd fd59 	bl	800a548 <__retarget_lock_acquire_recursive>
 800ca96:	89ab      	ldrh	r3, [r5, #12]
 800ca98:	071b      	lsls	r3, r3, #28
 800ca9a:	d501      	bpl.n	800caa0 <_vfiprintf_r+0x34>
 800ca9c:	692b      	ldr	r3, [r5, #16]
 800ca9e:	b99b      	cbnz	r3, 800cac8 <_vfiprintf_r+0x5c>
 800caa0:	4629      	mov	r1, r5
 800caa2:	4630      	mov	r0, r6
 800caa4:	f000 f93a 	bl	800cd1c <__swsetup_r>
 800caa8:	b170      	cbz	r0, 800cac8 <_vfiprintf_r+0x5c>
 800caaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caac:	07dc      	lsls	r4, r3, #31
 800caae:	d504      	bpl.n	800caba <_vfiprintf_r+0x4e>
 800cab0:	f04f 30ff 	mov.w	r0, #4294967295
 800cab4:	b01d      	add	sp, #116	; 0x74
 800cab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caba:	89ab      	ldrh	r3, [r5, #12]
 800cabc:	0598      	lsls	r0, r3, #22
 800cabe:	d4f7      	bmi.n	800cab0 <_vfiprintf_r+0x44>
 800cac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cac2:	f7fd fd42 	bl	800a54a <__retarget_lock_release_recursive>
 800cac6:	e7f3      	b.n	800cab0 <_vfiprintf_r+0x44>
 800cac8:	2300      	movs	r3, #0
 800caca:	9309      	str	r3, [sp, #36]	; 0x24
 800cacc:	2320      	movs	r3, #32
 800cace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cad2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cad6:	2330      	movs	r3, #48	; 0x30
 800cad8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc8c <_vfiprintf_r+0x220>
 800cadc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cae0:	f04f 0901 	mov.w	r9, #1
 800cae4:	4623      	mov	r3, r4
 800cae6:	469a      	mov	sl, r3
 800cae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caec:	b10a      	cbz	r2, 800caf2 <_vfiprintf_r+0x86>
 800caee:	2a25      	cmp	r2, #37	; 0x25
 800caf0:	d1f9      	bne.n	800cae6 <_vfiprintf_r+0x7a>
 800caf2:	ebba 0b04 	subs.w	fp, sl, r4
 800caf6:	d00b      	beq.n	800cb10 <_vfiprintf_r+0xa4>
 800caf8:	465b      	mov	r3, fp
 800cafa:	4622      	mov	r2, r4
 800cafc:	4629      	mov	r1, r5
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7ff ffa2 	bl	800ca48 <__sfputs_r>
 800cb04:	3001      	adds	r0, #1
 800cb06:	f000 80a9 	beq.w	800cc5c <_vfiprintf_r+0x1f0>
 800cb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb0c:	445a      	add	r2, fp
 800cb0e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb10:	f89a 3000 	ldrb.w	r3, [sl]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 80a1 	beq.w	800cc5c <_vfiprintf_r+0x1f0>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb24:	f10a 0a01 	add.w	sl, sl, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	9307      	str	r3, [sp, #28]
 800cb2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb30:	931a      	str	r3, [sp, #104]	; 0x68
 800cb32:	4654      	mov	r4, sl
 800cb34:	2205      	movs	r2, #5
 800cb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3a:	4854      	ldr	r0, [pc, #336]	; (800cc8c <_vfiprintf_r+0x220>)
 800cb3c:	f7f3 fb80 	bl	8000240 <memchr>
 800cb40:	9a04      	ldr	r2, [sp, #16]
 800cb42:	b9d8      	cbnz	r0, 800cb7c <_vfiprintf_r+0x110>
 800cb44:	06d1      	lsls	r1, r2, #27
 800cb46:	bf44      	itt	mi
 800cb48:	2320      	movmi	r3, #32
 800cb4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb4e:	0713      	lsls	r3, r2, #28
 800cb50:	bf44      	itt	mi
 800cb52:	232b      	movmi	r3, #43	; 0x2b
 800cb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb58:	f89a 3000 	ldrb.w	r3, [sl]
 800cb5c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5e:	d015      	beq.n	800cb8c <_vfiprintf_r+0x120>
 800cb60:	9a07      	ldr	r2, [sp, #28]
 800cb62:	4654      	mov	r4, sl
 800cb64:	2000      	movs	r0, #0
 800cb66:	f04f 0c0a 	mov.w	ip, #10
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb70:	3b30      	subs	r3, #48	; 0x30
 800cb72:	2b09      	cmp	r3, #9
 800cb74:	d94d      	bls.n	800cc12 <_vfiprintf_r+0x1a6>
 800cb76:	b1b0      	cbz	r0, 800cba6 <_vfiprintf_r+0x13a>
 800cb78:	9207      	str	r2, [sp, #28]
 800cb7a:	e014      	b.n	800cba6 <_vfiprintf_r+0x13a>
 800cb7c:	eba0 0308 	sub.w	r3, r0, r8
 800cb80:	fa09 f303 	lsl.w	r3, r9, r3
 800cb84:	4313      	orrs	r3, r2
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	46a2      	mov	sl, r4
 800cb8a:	e7d2      	b.n	800cb32 <_vfiprintf_r+0xc6>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	1d19      	adds	r1, r3, #4
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	9103      	str	r1, [sp, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	bfbb      	ittet	lt
 800cb98:	425b      	neglt	r3, r3
 800cb9a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb9e:	9307      	strge	r3, [sp, #28]
 800cba0:	9307      	strlt	r3, [sp, #28]
 800cba2:	bfb8      	it	lt
 800cba4:	9204      	strlt	r2, [sp, #16]
 800cba6:	7823      	ldrb	r3, [r4, #0]
 800cba8:	2b2e      	cmp	r3, #46	; 0x2e
 800cbaa:	d10c      	bne.n	800cbc6 <_vfiprintf_r+0x15a>
 800cbac:	7863      	ldrb	r3, [r4, #1]
 800cbae:	2b2a      	cmp	r3, #42	; 0x2a
 800cbb0:	d134      	bne.n	800cc1c <_vfiprintf_r+0x1b0>
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	1d1a      	adds	r2, r3, #4
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	9203      	str	r2, [sp, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bfb8      	it	lt
 800cbbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbc2:	3402      	adds	r4, #2
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cc9c <_vfiprintf_r+0x230>
 800cbca:	7821      	ldrb	r1, [r4, #0]
 800cbcc:	2203      	movs	r2, #3
 800cbce:	4650      	mov	r0, sl
 800cbd0:	f7f3 fb36 	bl	8000240 <memchr>
 800cbd4:	b138      	cbz	r0, 800cbe6 <_vfiprintf_r+0x17a>
 800cbd6:	9b04      	ldr	r3, [sp, #16]
 800cbd8:	eba0 000a 	sub.w	r0, r0, sl
 800cbdc:	2240      	movs	r2, #64	; 0x40
 800cbde:	4082      	lsls	r2, r0
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	3401      	adds	r4, #1
 800cbe4:	9304      	str	r3, [sp, #16]
 800cbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbea:	4829      	ldr	r0, [pc, #164]	; (800cc90 <_vfiprintf_r+0x224>)
 800cbec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbf0:	2206      	movs	r2, #6
 800cbf2:	f7f3 fb25 	bl	8000240 <memchr>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d03f      	beq.n	800cc7a <_vfiprintf_r+0x20e>
 800cbfa:	4b26      	ldr	r3, [pc, #152]	; (800cc94 <_vfiprintf_r+0x228>)
 800cbfc:	bb1b      	cbnz	r3, 800cc46 <_vfiprintf_r+0x1da>
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	3307      	adds	r3, #7
 800cc02:	f023 0307 	bic.w	r3, r3, #7
 800cc06:	3308      	adds	r3, #8
 800cc08:	9303      	str	r3, [sp, #12]
 800cc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0c:	443b      	add	r3, r7
 800cc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc10:	e768      	b.n	800cae4 <_vfiprintf_r+0x78>
 800cc12:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc16:	460c      	mov	r4, r1
 800cc18:	2001      	movs	r0, #1
 800cc1a:	e7a6      	b.n	800cb6a <_vfiprintf_r+0xfe>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	3401      	adds	r4, #1
 800cc20:	9305      	str	r3, [sp, #20]
 800cc22:	4619      	mov	r1, r3
 800cc24:	f04f 0c0a 	mov.w	ip, #10
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc2e:	3a30      	subs	r2, #48	; 0x30
 800cc30:	2a09      	cmp	r2, #9
 800cc32:	d903      	bls.n	800cc3c <_vfiprintf_r+0x1d0>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0c6      	beq.n	800cbc6 <_vfiprintf_r+0x15a>
 800cc38:	9105      	str	r1, [sp, #20]
 800cc3a:	e7c4      	b.n	800cbc6 <_vfiprintf_r+0x15a>
 800cc3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc40:	4604      	mov	r4, r0
 800cc42:	2301      	movs	r3, #1
 800cc44:	e7f0      	b.n	800cc28 <_vfiprintf_r+0x1bc>
 800cc46:	ab03      	add	r3, sp, #12
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	4b12      	ldr	r3, [pc, #72]	; (800cc98 <_vfiprintf_r+0x22c>)
 800cc4e:	a904      	add	r1, sp, #16
 800cc50:	4630      	mov	r0, r6
 800cc52:	f7fc fecf 	bl	80099f4 <_printf_float>
 800cc56:	4607      	mov	r7, r0
 800cc58:	1c78      	adds	r0, r7, #1
 800cc5a:	d1d6      	bne.n	800cc0a <_vfiprintf_r+0x19e>
 800cc5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc5e:	07d9      	lsls	r1, r3, #31
 800cc60:	d405      	bmi.n	800cc6e <_vfiprintf_r+0x202>
 800cc62:	89ab      	ldrh	r3, [r5, #12]
 800cc64:	059a      	lsls	r2, r3, #22
 800cc66:	d402      	bmi.n	800cc6e <_vfiprintf_r+0x202>
 800cc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc6a:	f7fd fc6e 	bl	800a54a <__retarget_lock_release_recursive>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	065b      	lsls	r3, r3, #25
 800cc72:	f53f af1d 	bmi.w	800cab0 <_vfiprintf_r+0x44>
 800cc76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc78:	e71c      	b.n	800cab4 <_vfiprintf_r+0x48>
 800cc7a:	ab03      	add	r3, sp, #12
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	462a      	mov	r2, r5
 800cc80:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <_vfiprintf_r+0x22c>)
 800cc82:	a904      	add	r1, sp, #16
 800cc84:	4630      	mov	r0, r6
 800cc86:	f7fd f959 	bl	8009f3c <_printf_i>
 800cc8a:	e7e4      	b.n	800cc56 <_vfiprintf_r+0x1ea>
 800cc8c:	0800d3cc 	.word	0x0800d3cc
 800cc90:	0800d3d6 	.word	0x0800d3d6
 800cc94:	080099f5 	.word	0x080099f5
 800cc98:	0800ca49 	.word	0x0800ca49
 800cc9c:	0800d3d2 	.word	0x0800d3d2

0800cca0 <__swbuf_r>:
 800cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca2:	460e      	mov	r6, r1
 800cca4:	4614      	mov	r4, r2
 800cca6:	4605      	mov	r5, r0
 800cca8:	b118      	cbz	r0, 800ccb2 <__swbuf_r+0x12>
 800ccaa:	6a03      	ldr	r3, [r0, #32]
 800ccac:	b90b      	cbnz	r3, 800ccb2 <__swbuf_r+0x12>
 800ccae:	f7fd fae1 	bl	800a274 <__sinit>
 800ccb2:	69a3      	ldr	r3, [r4, #24]
 800ccb4:	60a3      	str	r3, [r4, #8]
 800ccb6:	89a3      	ldrh	r3, [r4, #12]
 800ccb8:	071a      	lsls	r2, r3, #28
 800ccba:	d525      	bpl.n	800cd08 <__swbuf_r+0x68>
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	b31b      	cbz	r3, 800cd08 <__swbuf_r+0x68>
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	6922      	ldr	r2, [r4, #16]
 800ccc4:	1a98      	subs	r0, r3, r2
 800ccc6:	6963      	ldr	r3, [r4, #20]
 800ccc8:	b2f6      	uxtb	r6, r6
 800ccca:	4283      	cmp	r3, r0
 800cccc:	4637      	mov	r7, r6
 800ccce:	dc04      	bgt.n	800ccda <__swbuf_r+0x3a>
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7ff fc30 	bl	800c538 <_fflush_r>
 800ccd8:	b9e0      	cbnz	r0, 800cd14 <__swbuf_r+0x74>
 800ccda:	68a3      	ldr	r3, [r4, #8]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	60a3      	str	r3, [r4, #8]
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	6022      	str	r2, [r4, #0]
 800cce6:	701e      	strb	r6, [r3, #0]
 800cce8:	6962      	ldr	r2, [r4, #20]
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d004      	beq.n	800ccfa <__swbuf_r+0x5a>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	07db      	lsls	r3, r3, #31
 800ccf4:	d506      	bpl.n	800cd04 <__swbuf_r+0x64>
 800ccf6:	2e0a      	cmp	r6, #10
 800ccf8:	d104      	bne.n	800cd04 <__swbuf_r+0x64>
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f7ff fc1b 	bl	800c538 <_fflush_r>
 800cd02:	b938      	cbnz	r0, 800cd14 <__swbuf_r+0x74>
 800cd04:	4638      	mov	r0, r7
 800cd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd08:	4621      	mov	r1, r4
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f000 f806 	bl	800cd1c <__swsetup_r>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d0d5      	beq.n	800ccc0 <__swbuf_r+0x20>
 800cd14:	f04f 37ff 	mov.w	r7, #4294967295
 800cd18:	e7f4      	b.n	800cd04 <__swbuf_r+0x64>
	...

0800cd1c <__swsetup_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4b2a      	ldr	r3, [pc, #168]	; (800cdc8 <__swsetup_r+0xac>)
 800cd20:	4605      	mov	r5, r0
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	460c      	mov	r4, r1
 800cd26:	b118      	cbz	r0, 800cd30 <__swsetup_r+0x14>
 800cd28:	6a03      	ldr	r3, [r0, #32]
 800cd2a:	b90b      	cbnz	r3, 800cd30 <__swsetup_r+0x14>
 800cd2c:	f7fd faa2 	bl	800a274 <__sinit>
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd36:	0718      	lsls	r0, r3, #28
 800cd38:	d422      	bmi.n	800cd80 <__swsetup_r+0x64>
 800cd3a:	06d9      	lsls	r1, r3, #27
 800cd3c:	d407      	bmi.n	800cd4e <__swsetup_r+0x32>
 800cd3e:	2309      	movs	r3, #9
 800cd40:	602b      	str	r3, [r5, #0]
 800cd42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e034      	b.n	800cdb8 <__swsetup_r+0x9c>
 800cd4e:	0758      	lsls	r0, r3, #29
 800cd50:	d512      	bpl.n	800cd78 <__swsetup_r+0x5c>
 800cd52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd54:	b141      	cbz	r1, 800cd68 <__swsetup_r+0x4c>
 800cd56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	d002      	beq.n	800cd64 <__swsetup_r+0x48>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f7fe fa70 	bl	800b244 <_free_r>
 800cd64:	2300      	movs	r3, #0
 800cd66:	6363      	str	r3, [r4, #52]	; 0x34
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	2300      	movs	r3, #0
 800cd72:	6063      	str	r3, [r4, #4]
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	6023      	str	r3, [r4, #0]
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	f043 0308 	orr.w	r3, r3, #8
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	6923      	ldr	r3, [r4, #16]
 800cd82:	b94b      	cbnz	r3, 800cd98 <__swsetup_r+0x7c>
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd8e:	d003      	beq.n	800cd98 <__swsetup_r+0x7c>
 800cd90:	4621      	mov	r1, r4
 800cd92:	4628      	mov	r0, r5
 800cd94:	f000 f884 	bl	800cea0 <__smakebuf_r>
 800cd98:	89a0      	ldrh	r0, [r4, #12]
 800cd9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd9e:	f010 0301 	ands.w	r3, r0, #1
 800cda2:	d00a      	beq.n	800cdba <__swsetup_r+0x9e>
 800cda4:	2300      	movs	r3, #0
 800cda6:	60a3      	str	r3, [r4, #8]
 800cda8:	6963      	ldr	r3, [r4, #20]
 800cdaa:	425b      	negs	r3, r3
 800cdac:	61a3      	str	r3, [r4, #24]
 800cdae:	6923      	ldr	r3, [r4, #16]
 800cdb0:	b943      	cbnz	r3, 800cdc4 <__swsetup_r+0xa8>
 800cdb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdb6:	d1c4      	bne.n	800cd42 <__swsetup_r+0x26>
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	0781      	lsls	r1, r0, #30
 800cdbc:	bf58      	it	pl
 800cdbe:	6963      	ldrpl	r3, [r4, #20]
 800cdc0:	60a3      	str	r3, [r4, #8]
 800cdc2:	e7f4      	b.n	800cdae <__swsetup_r+0x92>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e7f7      	b.n	800cdb8 <__swsetup_r+0x9c>
 800cdc8:	200000e0 	.word	0x200000e0

0800cdcc <_raise_r>:
 800cdcc:	291f      	cmp	r1, #31
 800cdce:	b538      	push	{r3, r4, r5, lr}
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	d904      	bls.n	800cde0 <_raise_r+0x14>
 800cdd6:	2316      	movs	r3, #22
 800cdd8:	6003      	str	r3, [r0, #0]
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295
 800cdde:	bd38      	pop	{r3, r4, r5, pc}
 800cde0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cde2:	b112      	cbz	r2, 800cdea <_raise_r+0x1e>
 800cde4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cde8:	b94b      	cbnz	r3, 800cdfe <_raise_r+0x32>
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 f830 	bl	800ce50 <_getpid_r>
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdfa:	f000 b817 	b.w	800ce2c <_kill_r>
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d00a      	beq.n	800ce18 <_raise_r+0x4c>
 800ce02:	1c59      	adds	r1, r3, #1
 800ce04:	d103      	bne.n	800ce0e <_raise_r+0x42>
 800ce06:	2316      	movs	r3, #22
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	e7e7      	b.n	800cdde <_raise_r+0x12>
 800ce0e:	2400      	movs	r4, #0
 800ce10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce14:	4628      	mov	r0, r5
 800ce16:	4798      	blx	r3
 800ce18:	2000      	movs	r0, #0
 800ce1a:	e7e0      	b.n	800cdde <_raise_r+0x12>

0800ce1c <raise>:
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <raise+0xc>)
 800ce1e:	4601      	mov	r1, r0
 800ce20:	6818      	ldr	r0, [r3, #0]
 800ce22:	f7ff bfd3 	b.w	800cdcc <_raise_r>
 800ce26:	bf00      	nop
 800ce28:	200000e0 	.word	0x200000e0

0800ce2c <_kill_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d07      	ldr	r5, [pc, #28]	; (800ce4c <_kill_r+0x20>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	4611      	mov	r1, r2
 800ce38:	602b      	str	r3, [r5, #0]
 800ce3a:	f7f4 ff4f 	bl	8001cdc <_kill>
 800ce3e:	1c43      	adds	r3, r0, #1
 800ce40:	d102      	bne.n	800ce48 <_kill_r+0x1c>
 800ce42:	682b      	ldr	r3, [r5, #0]
 800ce44:	b103      	cbz	r3, 800ce48 <_kill_r+0x1c>
 800ce46:	6023      	str	r3, [r4, #0]
 800ce48:	bd38      	pop	{r3, r4, r5, pc}
 800ce4a:	bf00      	nop
 800ce4c:	2000071c 	.word	0x2000071c

0800ce50 <_getpid_r>:
 800ce50:	f7f4 bf3c 	b.w	8001ccc <_getpid>

0800ce54 <__swhatbuf_r>:
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	460c      	mov	r4, r1
 800ce58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	b096      	sub	sp, #88	; 0x58
 800ce60:	4615      	mov	r5, r2
 800ce62:	461e      	mov	r6, r3
 800ce64:	da0d      	bge.n	800ce82 <__swhatbuf_r+0x2e>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce6c:	f04f 0100 	mov.w	r1, #0
 800ce70:	bf0c      	ite	eq
 800ce72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce76:	2340      	movne	r3, #64	; 0x40
 800ce78:	2000      	movs	r0, #0
 800ce7a:	6031      	str	r1, [r6, #0]
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	b016      	add	sp, #88	; 0x58
 800ce80:	bd70      	pop	{r4, r5, r6, pc}
 800ce82:	466a      	mov	r2, sp
 800ce84:	f000 f848 	bl	800cf18 <_fstat_r>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	dbec      	blt.n	800ce66 <__swhatbuf_r+0x12>
 800ce8c:	9901      	ldr	r1, [sp, #4]
 800ce8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce96:	4259      	negs	r1, r3
 800ce98:	4159      	adcs	r1, r3
 800ce9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce9e:	e7eb      	b.n	800ce78 <__swhatbuf_r+0x24>

0800cea0 <__smakebuf_r>:
 800cea0:	898b      	ldrh	r3, [r1, #12]
 800cea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cea4:	079d      	lsls	r5, r3, #30
 800cea6:	4606      	mov	r6, r0
 800cea8:	460c      	mov	r4, r1
 800ceaa:	d507      	bpl.n	800cebc <__smakebuf_r+0x1c>
 800ceac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	6123      	str	r3, [r4, #16]
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	6163      	str	r3, [r4, #20]
 800ceb8:	b002      	add	sp, #8
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	ab01      	add	r3, sp, #4
 800cebe:	466a      	mov	r2, sp
 800cec0:	f7ff ffc8 	bl	800ce54 <__swhatbuf_r>
 800cec4:	9900      	ldr	r1, [sp, #0]
 800cec6:	4605      	mov	r5, r0
 800cec8:	4630      	mov	r0, r6
 800ceca:	f7fe fa2f 	bl	800b32c <_malloc_r>
 800cece:	b948      	cbnz	r0, 800cee4 <__smakebuf_r+0x44>
 800ced0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced4:	059a      	lsls	r2, r3, #22
 800ced6:	d4ef      	bmi.n	800ceb8 <__smakebuf_r+0x18>
 800ced8:	f023 0303 	bic.w	r3, r3, #3
 800cedc:	f043 0302 	orr.w	r3, r3, #2
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	e7e3      	b.n	800ceac <__smakebuf_r+0xc>
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	6020      	str	r0, [r4, #0]
 800cee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceec:	81a3      	strh	r3, [r4, #12]
 800ceee:	9b00      	ldr	r3, [sp, #0]
 800cef0:	6163      	str	r3, [r4, #20]
 800cef2:	9b01      	ldr	r3, [sp, #4]
 800cef4:	6120      	str	r0, [r4, #16]
 800cef6:	b15b      	cbz	r3, 800cf10 <__smakebuf_r+0x70>
 800cef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cefc:	4630      	mov	r0, r6
 800cefe:	f000 f81d 	bl	800cf3c <_isatty_r>
 800cf02:	b128      	cbz	r0, 800cf10 <__smakebuf_r+0x70>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f023 0303 	bic.w	r3, r3, #3
 800cf0a:	f043 0301 	orr.w	r3, r3, #1
 800cf0e:	81a3      	strh	r3, [r4, #12]
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	431d      	orrs	r5, r3
 800cf14:	81a5      	strh	r5, [r4, #12]
 800cf16:	e7cf      	b.n	800ceb8 <__smakebuf_r+0x18>

0800cf18 <_fstat_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	; (800cf38 <_fstat_r+0x20>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	4611      	mov	r1, r2
 800cf24:	602b      	str	r3, [r5, #0]
 800cf26:	f7f4 ff38 	bl	8001d9a <_fstat>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d102      	bne.n	800cf34 <_fstat_r+0x1c>
 800cf2e:	682b      	ldr	r3, [r5, #0]
 800cf30:	b103      	cbz	r3, 800cf34 <_fstat_r+0x1c>
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	bd38      	pop	{r3, r4, r5, pc}
 800cf36:	bf00      	nop
 800cf38:	2000071c 	.word	0x2000071c

0800cf3c <_isatty_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4d06      	ldr	r5, [pc, #24]	; (800cf58 <_isatty_r+0x1c>)
 800cf40:	2300      	movs	r3, #0
 800cf42:	4604      	mov	r4, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	f7f4 ff37 	bl	8001dba <_isatty>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_isatty_r+0x1a>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_isatty_r+0x1a>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	2000071c 	.word	0x2000071c

0800cf5c <_init>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	bf00      	nop
 800cf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf62:	bc08      	pop	{r3}
 800cf64:	469e      	mov	lr, r3
 800cf66:	4770      	bx	lr

0800cf68 <_fini>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr
